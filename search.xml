<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot+MyBatis+BootStrap3.0前后端不分离项目</title>
      <link href="/2022/07/25/ComputerStore/"/>
      <url>/2022/07/25/ComputerStore/</url>
      
        <content type="html"><![CDATA[<h1 id="电脑商城"><a href="#电脑商城" class="headerlink" title="电脑商城"></a>电脑商城</h1><ul><li><p>项目介绍：基于SpringBoot+Mybatis+BootStrap3.0前后端不分离的项目</p></li><li><p>项目功能 ：</p><p>①登录、注册、集成kaptcha验证码防止机器人，以及用户管理(用户信息的修改)  </p><p>②分页处理展示商品信息、支持通过模糊搜索查找相关商品</p><p>③购物车相关功能管理(如购物车商品的展示和结算) </p><p>④订单管理页面可以查看不同状态订单以及集成了支付宝沙箱模拟商品支付全过程</p><p>⑤收藏界面同样实现分页展示用户收藏商品信息，以及加入收藏、取消收藏和加入购物车</p><p>⑥对全部业务方法使用aop拦截计算业务执行时间，为后续优化提供支持</p></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>基本环境：</p><p>1.jdk 1.8</p><p>2.maven 3.6.2</p><p>3.数据库 mysql 8.0.26</p><p>4.集成开发环境 IDEA2020</p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS `computer_store` CHARACTER SET &#x27;utf8&#x27;;</span><br></pre></td></tr></table></figure><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_user (</span><br><span class="line">uid INT AUTO_INCREMENT COMMENT &#x27;用户id&#x27;,</span><br><span class="line">username VARCHAR(20) NOT NULL UNIQUE COMMENT &#x27;用户名&#x27;,</span><br><span class="line">password CHAR(32) NOT NULL COMMENT &#x27;密码&#x27;,</span><br><span class="line">salt CHAR(36) COMMENT &#x27;盐值&#x27;,</span><br><span class="line">phone VARCHAR(20) COMMENT &#x27;电话号码&#x27;,</span><br><span class="line">email VARCHAR(30) COMMENT &#x27;电子邮箱&#x27;,</span><br><span class="line">gender INT COMMENT &#x27;性别:0-女，1-男&#x27;,</span><br><span class="line">avatar VARCHAR(50) COMMENT &#x27;头像&#x27;,</span><br><span class="line">is_delete INT COMMENT &#x27;是否删除：0-未删除，1-已删除&#x27;,</span><br><span class="line">created_user VARCHAR(20) COMMENT &#x27;日志-创建人&#x27;,</span><br><span class="line">created_time DATETIME COMMENT &#x27;日志-创建时间&#x27;,</span><br><span class="line">modified_user VARCHAR(20) COMMENT &#x27;日志-最后修改执行人&#x27;,</span><br><span class="line">modified_time DATETIME COMMENT &#x27;日志-最后修改时间&#x27;,</span><br><span class="line">PRIMARY KEY (uid)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><ul><li><strong>考虑到每个表中都有固定的四个字段，重复写过于麻烦，因此可以使用一个Java基类来对应这四个字段</strong></li></ul><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于与数据表四个字段形成映射关系的基类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;<span class="comment">//为了便于数据传输，实现序列化接口</span></span><br><span class="line">    <span class="keyword">private</span> String createdUser;</span><br><span class="line">    <span class="keyword">private</span> Date createdTime;</span><br><span class="line">    <span class="keyword">private</span> String modifiedUser;</span><br><span class="line">    <span class="keyword">private</span> Date modifiedTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对应数据表的User实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String salt; <span class="comment">//用于加密密码</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;<span class="comment">//&#x27;性别:0-女，1-男&#x27;,</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">    <span class="keyword">private</span> Integer isDelete;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><h4 id="后端-持久层"><a href="#后端-持久层" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><ul><li><strong>通过MyBatis框架与数据库进行交互</strong></li></ul><p>1.编写sql语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#增加用户的sql语句</span><br><span class="line">insert into t_user(username,password) vaules(?,?);</span><br><span class="line"></span><br><span class="line">#判断用户名是否已存在的语句</span><br><span class="line">select * from t_user where username = ?;</span><br></pre></td></tr></table></figure><p>2.定义mapper接口和抽象方法</p><p>由于项目可能有多个mapper接口，因此在项目的目录结构下创建一个mapper的包，用于管理所有的mapper接口，</p><p>并在springboot启动类上使用@MapperScan注解扫描此包下的所有mapper接口或直接在接口上使用@Mapper注解。</p><p>以便在项目启动的时间把mapper扫描进容器中，交由spring容器管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//User实体类对应的mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">//用户注册</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户名查询用户信息</span></span><br><span class="line">    User <span class="title function_">queryUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写映射文件</p><p>项目可能有多个mapper映射文件，必须在项目目录结构resource文件下创建一个mapper的包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;top.year21.computerstore.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- int addUser(@Param(&quot;user&quot;) User user); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> &gt;</span></span><br><span class="line">        insert into t_user(</span><br><span class="line">                        username,password,salt,phone,email,gender,avatar,is_delete,</span><br><span class="line">                        created_user,created_time,modified_user,modified_time</span><br><span class="line">                        )</span><br><span class="line">                        values (</span><br><span class="line">                        #&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;,#&#123;phone&#125;,#&#123;email&#125;,</span><br><span class="line">                        #&#123;gender&#125;,#&#123;avatar&#125;,#&#123;isDelete&#125;,</span><br><span class="line">                        #&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;</span><br><span class="line">                                )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 询的结果集字段和实体类的user属性名不一致，自定义查询结果集的映射规则   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;queryUser&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;salt&quot;</span> <span class="attr">column</span>=<span class="string">&quot;salt&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">column</span>=<span class="string">&quot;avatar&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;isDelete&quot;</span> <span class="attr">column</span>=<span class="string">&quot;is_delete&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   User queryUserByUsername(@Param(&quot;username&quot;) String username); --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  用于查询的结果集字段和实体类的user属性名不一致，所以不能使用resultType，必须使用resultMap  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByUsername&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;queryUser&quot;</span>&gt;</span></span><br><span class="line">            select * from t_user  where username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.将mapper映射文件的位置在yml配置文件中进行对应的设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>5.进行单元测试（每个 的完成建议都进行单元测试）</p><h4 id="后端-业务层"><a href="#后端-业务层" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>业务层的包下主要有exception、impl、接口，其中exception放置各种异常处理类，impl中放置接口的实现类</p><p>1.规划异常处理机制</p><p>考虑到在后端处理业务的过程中，会出现各种异常情况，如执行过程中数据库宕机、用户名重复等。</p><p>虽然java在异常处理机制已经很完善，以上的情况都是抛出RuntimeException异常，对定位异常不够明确。</p><p>因此在业务层的制定中，需要考虑对异常的定义处理。</p><p>在业务层制定一个继承RuntimeException异常的异常类，再让具体的异常继承这个异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//专用于处理业务层的异常基类</span></span><br><span class="line"><span class="comment">//e.g. throws new ServiceException(&quot;业务层出现异常&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ServiceException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据业务层不同的 来详细定义具体异常的类型，统一的继承ServiceException异常基类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示用户名重复的异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameDuplicateException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicateException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicateException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicateException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicateException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicateException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//专用于处理业务层其他未知异常，如数据插入过程中服务器、数据库宕机的情况</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示验证码错误的异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidCodeNotMatchException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>2.定义业务层接口和抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理用户注册的业务层接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="comment">//处理用户注册</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">UserRegister</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.定义接口的实现类，处理请求</p><ul><li><p>为什么要补全这五个字段？因为注册界面只让填写了用户名和密码，在经过查询数据库用户不重复后，</p><p>如果直接执行插入操作，那么这五个字段在数据库中就是空值，因此必须在注册时补全</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理用户注册的业务层接口的实现类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IUserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理用户注册</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">UserRegister</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//需要先判断用户名是否在数据库中重复</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">queryUser</span> <span class="operator">=</span> userMapper.queryUserByUsername(user.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重复的情况下，抛出用户名重复异常</span></span><br><span class="line">        <span class="keyword">if</span> (queryUser != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameDuplicateException</span>(<span class="string">&quot;用户名已被注册&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码不能以明文方式存入数据库，需要进行加密操作</span></span><br><span class="line">        <span class="comment">//密码加密的实现： 盐值 + password + 盐值 ---&gt; md5算法进行加密，连续加载三次 ---&gt; 得到最终存入数据库的结果</span></span><br><span class="line">        <span class="comment">//盐值就是一个随机的字符串</span></span><br><span class="line">        <span class="comment">//记录旧密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldPassword</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="comment">//使用UUID获取时间戳创建盐值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录此刻的盐值，用于以后做用户登录判断</span></span><br><span class="line">        user.setSalt(salt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行加密操作</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">md5Password</span> <span class="operator">=</span> PasswordEncryptedUtils.getPasswordByMD5(oldPassword, salt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将加密后的密码设置为用户设置的密码</span></span><br><span class="line">        user.setPassword(md5Password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在执行插入操作之前对一些表字段进行补全</span></span><br><span class="line">        <span class="comment">//is_delete字段设置为0，表示未删除用户</span></span><br><span class="line">        user.setIsDelete(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//补全其余四个日志信息的字段</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">currentTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        user.setCreatedUser(user.getUsername());</span><br><span class="line">        user.setCreatedTime(currentTime);</span><br><span class="line">        user.setModifiedUser(user.getUsername());</span><br><span class="line">        user.setModifiedTime(currentTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不重复，调用插入方法,处理业务</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.addUser(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0</span>)&#123; <span class="comment">//判断服务器或数据库执行是否出现异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;处理用户注册过程中，服务器或数据库执行出现异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.业务层进行单元测试</p><h4 id="后端-控制层"><a href="#后端-控制层" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.设置返回响应信息给前端的基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//响应数据给前端</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">//响应状态码 200-成功 4000-用户名重复 5000-数据库或服务器异常</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="comment">//响应信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//响应数据</span></span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(<span class="type">int</span> code, E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.设计请求</p><p>请求路径：&#x2F;user</p><p>请求参数：User user,HttpSession session,String code</p><p>请求类型：post</p><p>响应结果：JsonResult&lt; Void&gt;</p><p>3.controller的设计</p><p>①创建一个BaseController全局处理自定义的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局处理异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="comment">//操作成功的状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OK</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.当出现了value内的异常之一，就会将下方的方法作为新的控制器方法进行执行</span></span><br><span class="line"><span class="comment">     *   因此该方法的返回值也同时是返回给前端的页面</span></span><br><span class="line"><span class="comment">     * 2.此外还自动将异常对象传递到此方法的参数列表中，这里使用Throwable e来接收</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span> <span class="comment">//统一处理抛出的异常</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">handleException</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(e);</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UsernameDuplicateException)&#123;</span><br><span class="line">            result.setStatus(<span class="number">4000</span>); <span class="comment">//表示用户名重复</span></span><br><span class="line">            result.setMessage(e.getMessage());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InsertException)&#123;</span><br><span class="line">            result.setStatus(<span class="number">5000</span>); <span class="comment">//数据库或服务器有问题</span></span><br><span class="line">            result.setMessage(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回异常处理结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②创建一个UserController处理请求</p><p>UserController继承了BaseControlle也就间接用于了BaseControlle的属性和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理用户请求的控制器</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户注册</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">userRegister</span><span class="params">(User user,HttpSession session,String code)</span> &#123;</span><br><span class="line">        <span class="comment">//从session取出验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">validCode</span> <span class="operator">=</span> (String) session.getAttribute(Constants.KAPTCHA_SESSION_KEY);</span><br><span class="line"><span class="comment">//判断验证码是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (!validCode.equals(code))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidCodeNotMatchException</span>(<span class="string">&quot;验证码错误,请重试！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行插入操作</span></span><br><span class="line">        userService.userRegister(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.使用postman进行接口的测试</p><h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li>前端页面只需要将表单信息通过ajax异步向后端服务器发起请求即可</li></ul><p>给用户注册按钮绑定点击事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">//在网页加载完成后执行</span></span><br><span class="line">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//引入页脚的公共页面</span></span><br><span class="line">    $(<span class="string">&quot;.footer&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;components/footer.html&quot;</span>)</span><br><span class="line">    <span class="comment">//检测信息</span></span><br><span class="line">    <span class="title function_">checkInfoAndSendAjax</span>();</span><br><span class="line">    <span class="comment">//给返回主页绑定点击事件</span></span><br><span class="line">    $(<span class="string">&quot;#btn-toIndex&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        location.<span class="property">href</span> = <span class="string">&quot;index.html&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//验证信息和发送ajax注册用户请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkInfoAndSendAjax</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//给用户注册绑定点击事件</span></span><br><span class="line">    $(<span class="string">&quot;#btn-reg&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> name = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="keyword">let</span> pwd = $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="keyword">let</span> rePwd = $(<span class="string">&quot;#rePwd&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="keyword">let</span> codeStr = $(<span class="string">&quot;#code&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="comment">//去掉验证码前后空格</span></span><br><span class="line">        codeStr = $.<span class="title function_">trim</span>(codeStr);</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="string">&quot;&quot;</span> || pwd == <span class="string">&quot;&quot;</span> || rePwd == <span class="string">&quot;&quot;</span> ||codeStr == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            $(<span class="string">&quot;#error-msg&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;请先填写需要注册的信息！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//验证用户名是否符合规则</span></span><br><span class="line">        <span class="keyword">let</span> nameCheck = <span class="regexp">/^\w&#123;5,12&#125;$/</span>;</span><br><span class="line">        <span class="keyword">let</span> username = $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(nameCheck.<span class="title function_">test</span>(username)))&#123;</span><br><span class="line">            $(<span class="string">&quot;#error-msg&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;用户名必须是5-12位的字母和数字&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">&quot;#error-msg&quot;</span>).<span class="title function_">empty</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证密码是否符合规则</span></span><br><span class="line">        <span class="keyword">let</span> passCheck = <span class="regexp">/^\w&#123;5,12&#125;$/</span>;</span><br><span class="line">        <span class="keyword">let</span> password = $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="keyword">if</span> (!passCheck.<span class="title function_">test</span>(password))&#123;</span><br><span class="line">            $(<span class="string">&quot;#error-msg&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;密码必须是5-12位的字母和数字&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">&quot;#error-msg&quot;</span>).<span class="title function_">empty</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证确认密码和密码是否相同</span></span><br><span class="line">        <span class="keyword">let</span> rePass = $(<span class="string">&quot;#rePwd&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="keyword">if</span> (rePass !== password)&#123;</span><br><span class="line">            $(<span class="string">&quot;#error-msg&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;密码不一致&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">&quot;#error-msg&quot;</span>).<span class="title function_">empty</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            url : <span class="string">&quot;http://localhost:8080/user&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: $(<span class="string">&quot;#form-reg&quot;</span>).<span class="title function_">serialize</span>(), <span class="comment">//获取表单的所有内容</span></span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;注册成功！&quot;</span>)</span><br><span class="line">                    location.<span class="property">href</span> = <span class="string">&quot;login.html&quot;</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    $(<span class="string">&quot;#error-msg&quot;</span>).<span class="title function_">html</span>(res.<span class="property">message</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(error.<span class="property">status</span> + <span class="string">&quot;错误,服务器出现故障，请等待攻城狮修复！！&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="后端-持久层-1"><a href="#后端-持久层-1" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><ul><li>持久层可以利用上面写好的sql语句判断用户是否存在即可，密码的校验 交由业务层进行处理</li></ul><p>1.sql语句用上面的</p><p>2.mapper接口用上面的</p><p>3.mapper接口的映射文件用上面的</p><p>4.单元测试</p><h4 id="后端-业务层-1"><a href="#后端-业务层-1" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常，创建两个自定义的异常处理类继承ServiceException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示用户名不存在的异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserNotExistException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;&#125;</span><br><span class="line"><span class="comment">//表示密码错误的异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrongPasswordException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>2.编写接口和抽象方法以及实现类内具体的业务处理流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IUserService</span></span><br><span class="line"><span class="comment">//处理用户登录</span></span><br><span class="line">User <span class="title function_">userLogin</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IUserServiceImpl 具体的业务处理用户登录</span></span><br><span class="line">   <span class="keyword">public</span> User <span class="title function_">userLogin</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">//用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> user.getUsername();</span><br><span class="line">        <span class="comment">//用户输入的密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userPassword</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询登录用户是否在数据库中存在</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userMapper.queryUserByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (loginUser == <span class="literal">null</span>)&#123; <span class="comment">//为空代表用户名不存在</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotExistException</span>(<span class="string">&quot;用户数据不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取得数据库查询返回用户的盐值和密码以及删除状态</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> loginUser.getSalt();</span><br><span class="line">        <span class="type">String</span> <span class="variable">databasePwd</span> <span class="operator">=</span> loginUser.getPassword();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">deleteStatus</span> <span class="operator">=</span> loginUser.getIsDelete();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对用户输入的密码进行加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">md5PasswordBy</span> <span class="operator">=</span> PasswordEncryptedUtils.getPasswordByMD5(userPassword, salt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将加密后的字符和数据库查询的MD5进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (!databasePwd.equals(md5PasswordBy))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">WrongPasswordException</span>(<span class="string">&quot;密码不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断登录的用户账户是否已注销</span></span><br><span class="line">        <span class="keyword">if</span> (deleteStatus == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotExistException</span>(<span class="string">&quot;用户数据不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//密码正确返回查询的用户信息</span></span><br><span class="line">        <span class="keyword">return</span> loginUser;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3.进行单元测试</p><h4 id="后端-控制层-1"><a href="#后端-控制层-1" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.在全局异常处理机制中添加对业务层异常的处理</p><p>2.设计请求</p><p>请求路径：&#x2F;user</p><p>请求参数：User user, HttpSession session,String code</p><p>请求类型：get</p><p>响应结果：JsonResult&lt; User&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//控制层调用业务层接口的方法</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">userLogin</span><span class="params">(User user, HttpSession session)</span>&#123;</span><br><span class="line">   <span class="comment">//将存储在session的kaptcha所生成的验证码取出</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">validCode</span> <span class="operator">=</span> (String) session.getAttribute(Constants.KAPTCHA_SESSION_KEY);</span><br><span class="line">        <span class="comment">//判断验证码是否一致</span></span><br><span class="line">        <span class="keyword">if</span> (!validCode.equals(code))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidCodeNotMatchException</span>(<span class="string">&quot;验证码错误,请重试！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行登录操作</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.userLogin(user);</span><br><span class="line">        <span class="comment">//分别将用户的session保存到服务端</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;uid&quot;</span>,loginUser.getUid());</span><br><span class="line">        session.setAttribute(<span class="string">&quot;username&quot;</span>,loginUser.getUsername());</span><br><span class="line">        <span class="comment">//优化一下传回前端的user数据，有些字段是不需要的。</span></span><br><span class="line">        <span class="comment">//只将用户名和uid进行回传</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        newUser.setUsername(loginUser.getUsername());</span><br><span class="line">        newUser.setUid(loginUser.getUid());</span><br><span class="line">        newUser.setGender(loginUser.getGender());</span><br><span class="line">        newUser.setPhone(loginUser.getPhone());</span><br><span class="line">        newUser.setEmail(loginUser.getEmail());</span><br><span class="line">        newUser.setAvatar(loginUser.getAvatar());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,newUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.控制层单元测试</p><h4 id="前端页面-1"><a href="#前端页面-1" class="headerlink" title="前端页面"></a>前端页面</h4><p>登录成功以及登录成功后需要做的事情：</p><ul><li><p>与上面注册登录一样的逻辑，这里不浪费空间了</p><p>唯一一个不同的地方是需要在登录成功后跳转至首页</p><p><font color='red'><strong>window.location.href &#x3D; “xxx.html” 这个直接跳转到指定页面</strong></font></p></li><li><p>保存用户信息到session域中</p><ul><li>①保存在前端的会话窗口中，供前端页面使用</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将用户信息存入session域中</span></span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;user&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>));</span><br></pre></td></tr></table></figure><ul><li><p>②保存在工程项目的session中，供整个工程使用</p><p><strong>session对象主要存在服务器端，可以用于保存服务器的临时数据的对象，也可用于拦截器的拦截请求</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Description : 从session中获取用户uid</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> session springboot启动时生成的session对象</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Integer <span class="title function_">getUserIdFromSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uidStr</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;uid&quot;</span>).toString();</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(uidStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从session中获取用户username</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getUsernameFromSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> session.getAttribute(<span class="string">&quot;username&quot;</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'><strong>拦截器</strong></font>，对每个访问的页面进行拦截判断，没有登录则重定向至登录页面</p><p>①在interceptor包下自定义拦截器类，实现HandleInterceptor接口，实现此接口的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义的拦截器类，拦截所有请求进行判断</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * Description : 检测全局session对象中是否由uid数据，有则放行，没有则拦截</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> request 请求对象</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> response 响应对象</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> handler 处理器（url+Controller：映射）</span></span><br><span class="line"><span class="comment">           **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取项目工程的session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (session.getAttribute(<span class="string">&quot;uid&quot;</span>) != <span class="literal">null</span>)&#123; <span class="comment">//说明此时已登录</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">//说明未登录</span></span><br><span class="line">            <span class="comment">//重定向至登录页面</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/web/login.html&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②在config包下创建自定义配置类，实现WebMvcConfigurer接口，将拦截器添加到容器中</p><p>​    指定拦截规则【如果是拦截所有，静态资源也会被拦截，所以要指定白名单和黑名单】</p><p><font color='red'>   <strong>拦截器也要放行接口的请求，不然就报错</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 网页拦截器，判读用户是否已经登录</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//注册拦截器并添加拦截规则</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">            <span class="comment">//也可以用一个List&lt;String&gt; 来设置排除拦截的资源</span></span><br><span class="line">            <span class="comment">//拦截器也要放行接口的请求，不然就报错</span></span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/web/login.html&quot;</span>,<span class="string">&quot;/web/index.html&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;/web/register.html&quot;</span>,<span class="string">&quot;/web/product.html&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;/web/components/**&quot;</span>,<span class="string">&quot;/web/search.html&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;/user/**&quot;</span>,<span class="string">&quot;/address/**&quot;</span>,<span class="string">&quot;/file/**&quot;</span>,<span class="string">&quot;/district/**&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;/product/**&quot;</span>,<span class="string">&quot;/cart/**&quot;</span>,<span class="string">&quot;/order/**&quot;</span>,<span class="string">&quot;/kaptcha/**&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/bootstrap3/**&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><h4 id="后端-持久层-2"><a href="#后端-持久层-2" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.编写sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> password <span class="operator">=</span> #&#123;password&#125; <span class="keyword">where</span> uid <span class="operator">=</span> #&#123;uid&#125;;</span><br></pre></td></tr></table></figure><p>2.定义mapper接口的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updatePassword</span><span class="params">(String password,String uid)</span>;</span><br></pre></td></tr></table></figure><p>3.编写mapper接口的映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    int updatePassword(@Param(&quot;password&quot;) String password,@Param(&quot;uid&quot;) String uid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatePassword&quot;</span>&gt;</span></span><br><span class="line">    update t_user set password = #&#123;password&#125; where uid = #&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-业务层-2"><a href="#后端-业务层-2" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.异常处理，创建一个表示密码不匹配的异常，比如原密码不对</p><p>2.定义Userservice的抽象方法</p><p>3.编写实现类实现接口方法的业务处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.表示原密码不正确的异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OriginalPasswordNotMatchException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.Userservice的抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="comment">//处理用户修改密码</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">userResetPwd</span><span class="params">(String oldPwd,String newPwd, HttpSession session)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.编写实现类实现接口方法的业务处理逻辑</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 处理用户修改密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/7/11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originalPassword 用户的原密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newPassword 用户要修改的新密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session 项目启动springboot提供的session对象，用于获取用户的uid</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userResetPwd</span><span class="params">(String originalPassword,String newPassword, HttpSession session)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从session中获取用户名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;username&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数据库查询对应的信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.queryUserByUsername(username);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得数据库查询返回用户的盐值和密码以及删除状态</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> user.getSalt();</span><br><span class="line">    <span class="type">String</span> <span class="variable">databasePwd</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对用户输入的密码进行加密</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">md5Password</span> <span class="operator">=</span> PasswordEncryptedUtils.getPasswordByMD5(originalPassword, salt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先判断原密码是否正确，将加密后的密码和数据库查询的MD5进行校验</span></span><br><span class="line">    <span class="keyword">if</span> (!databasePwd.equals(md5Password))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OriginalPasswordNotMatchException</span>(<span class="string">&quot;原密码不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将新密码进行加密</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">newMD5Pwd</span> <span class="operator">=</span> PasswordEncryptedUtils.getPasswordByMD5(newPassword, salt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先获取现在的时间</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">currentTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新密码</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.updatePassword(newMD5Pwd,user.getUsername(),currentTime,username);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;数据库或服务器故障，密码修改失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-2"><a href="#后端-控制层-2" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.在全局异常处理机制中添加对业务层异常的处理</p><p>2.设计请求</p><p>请求路径 &#x2F;user</p><p>请求参数 String oldPwd，String newPwd，Httpsession session</p><p>请求类型 post</p><p>响应类型 JsonResult&lt; Void&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">userResetPwd</span><span class="params">(<span class="meta">@RequestParam(&quot;oldPassword&quot;)</span> String oldPwd,</span></span><br><span class="line"><span class="params">                                     <span class="meta">@RequestParam(&quot;newPassword&quot;)</span> String newPwd,</span></span><br><span class="line"><span class="params">                                     HttpSession session)</span>&#123;</span><br><span class="line">    userService.userResetPwd(oldPwd, newPwd, session);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="前端页面-2"><a href="#前端页面-2" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li><p>与上面用户登录大致的逻辑，这里不浪费空间了，代码放在web&#x2F;password.html页面下</p></li><li><p>补充一点：在用户修改密码后，利用location.href &#x3D; “login.html”</p><p>以及在后端删除session中存储的uid值实现让用户重新登录</p></li></ul><hr><h3 id="个人资料"><a href="#个人资料" class="headerlink" title="个人资料"></a>个人资料</h3><h4 id="后端-持久层-3"><a href="#后端-持久层-3" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.编写sql语句</p><ul><li>需要更新phone、email、gender、modified_user ,modified_time这五个字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>根据uid主键查询用户信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> uid <span class="operator">=</span> #&#123;uid&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>更新的<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> phone <span class="operator">=</span> #&#123;phone&#125;,</span><br><span class="line">                  email <span class="operator">=</span> #&#123;email&#125;,</span><br><span class="line">                  gender <span class="operator">=</span> #&#123;gender&#125;,</span><br><span class="line">  modified_user <span class="operator">=</span> #&#123;modifiedUser&#125;,</span><br><span class="line">  modified_time <span class="operator">=</span> #&#123;modifiedTime&#125;</span><br><span class="line">  <span class="keyword">where</span> uid <span class="operator">=</span> #&#123;uid&#125;</span><br></pre></td></tr></table></figure><p>2.定义mapper接口抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">queryUserByUid</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> Integer uid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">UpdateUserInfo</span><span class="params">(String phone,</span></span><br><span class="line"><span class="params">                   String email,</span></span><br><span class="line"><span class="params">                   Integer gender,</span></span><br><span class="line"><span class="params">                   String modifiedUser,</span></span><br><span class="line"><span class="params">                   Date modifiedTime,</span></span><br><span class="line"><span class="params">                   Integer uid)</span>;</span><br></pre></td></tr></table></figure><p>3.编写映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    User queryUserByUid(@Param(&quot;uid&quot;) Integer uid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByUid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;queryUser&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    int UpdateUserInfo(****)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;UpdateUserInfo&quot;</span>&gt;</span></span><br><span class="line">    update t_user set</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null and phone != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        phone = #&#123;phone&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        email = #&#123;email&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        gender = #&#123;gender&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    modified_user = #&#123;modifiedUser&#125;,</span><br><span class="line">    modified_time = #&#123;modifiedTime&#125;</span><br><span class="line">    where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-业务层-3"><a href="#后端-业务层-3" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.异常控制，好像没什么新异常</p><p>2.定义service层接口的抽象方法</p><p>3.实现抽象方法，编写业务处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">userUpdateInfo</span><span class="params">(String phone,String email,</span></span><br><span class="line"><span class="params">                    Integer gender,String username,</span></span><br><span class="line"><span class="params">                    Integer uid)</span>;</span><br><span class="line"><span class="comment">//根据id查询用户信息</span></span><br><span class="line">User <span class="title function_">queryUserByUid</span><span class="params">(Integer uid)</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//实现抽象方法，编写业务处理逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">userUpdateInfo</span><span class="params">(String phone, String email, Integer gender,String username,Integer uid)</span> &#123;</span><br><span class="line">    <span class="comment">//获取用户id并判断用户是否存在</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.queryUserByUid(uid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span> | user.getIsDelete() == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotExistException</span>(<span class="string">&quot;用户数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户信息</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.UpdateUserInfo(phone, email, gender, username, <span class="keyword">new</span> <span class="title class_">Date</span>(), uid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;数据库或服务器异常，个人资料修改失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-3"><a href="#后端-控制层-3" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.无异常，不需要处理</p><p>2.设计请求</p><p>请求路径 &#x2F;user&#x2F;updateInfo</p><p>请求参数 String phone,String email,Integer gender,HttpSession session</p><p>请求类型 post</p><p>响应类型 JsonResult&lt; User&gt;</p><p>3.处理请求</p><ul><li>考虑到前端信息及时更新的问题，因此这里选择将更新后的User进行回传</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/queryUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">queryUserByUid</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByUid(uid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将用户名、id、电话、邮箱、性别进行回传</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    newUser.setUsername(user.getUsername());</span><br><span class="line">    newUser.setUid(user.getUid());</span><br><span class="line">    newUser.setGender(user.getGender());</span><br><span class="line">    newUser.setPhone(user.getPhone());</span><br><span class="line">    newUser.setEmail(user.getEmail());</span><br><span class="line">    newUser.setAvatar(user.getAvatar());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,newUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping(&quot;/updateInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">userInfoUpdate</span><span class="params">(String phone,String email,Integer gender,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//从session中取出用户名和uid</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.userUpdateInfo(phone, email, gender, username, id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将用户名、id、电话、邮箱、性别进行回传</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    newUser.setUsername(user.getUsername());</span><br><span class="line">    newUser.setUid(user.getUid());</span><br><span class="line">    newUser.setGender(user.getGender());</span><br><span class="line">    newUser.setPhone(user.getPhone());</span><br><span class="line">    newUser.setEmail(user.getEmail());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,newUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-3"><a href="#前端页面-3" class="headerlink" title="前端页面"></a>前端页面</h4><p>①第一个ajax请求在用户信息页面加载完成后自动发送，并根据返回值通过js的id选择器</p><p>​找到对应的元素并修改其属性值</p><p>②第二个ajax请求在用户点击修改按钮之后先提示是否修改，再根据其选择进行处理，</p><p>​同理根据结果利用js的id选择器找到对应的元素并修改其属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--js代码--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//在网页加载完成后执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//在页面完成之后自动发送ajax请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $.<span class="title function_">ajax</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        url : <span class="string">&quot;http://localhost:8080/user/queryUser&quot;</span> ,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(res.<span class="property">data</span>.<span class="property">username</span>) <span class="comment">//修改用户名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;#phone&quot;</span>).<span class="title function_">val</span>(res.<span class="property">data</span>.<span class="property">phone</span>) <span class="comment">//修改电话</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;#email&quot;</span>).<span class="title function_">val</span>(res.<span class="property">data</span>.<span class="property">email</span>) <span class="comment">//修改邮箱</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//修改性别</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">gender</span> === <span class="number">0</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//prop()表示给某个元素添加属性和属性值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    $(<span class="string">&quot;#gender-female&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>,<span class="string">&quot;checked&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    $(<span class="string">&quot;#gender-male&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>,<span class="string">&quot;checked&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;服务器出现故障，请等待攻城狮修复！！&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//给用户注册绑定点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">&quot;#btn-change-info&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//根据用户选择状态决定是否发生ajax请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&quot;确定要修改吗？&quot;</span>))&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $.<span class="title function_">ajax</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                url : <span class="string">&quot;http://localhost:8080/user/updateInfo&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>: <span class="string">&quot;put&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>: $(<span class="string">&quot;#form-change-info&quot;</span>).<span class="title function_">serialize</span>(),<span class="comment">//获取表单的所有内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="title function_">alert</span>(<span class="string">&quot;修改成功！&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">//将回传的用户信息进行更新</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;user&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">//网页刷新</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        location.<span class="title function_">reload</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;<span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="title function_">alert</span>(res.<span class="property">message</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">alert</span>(<span class="string">&quot;服务器出现故障，请等待攻城狮修复！！&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//阻止表单的默认提交行为</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="头像上传"><a href="#头像上传" class="headerlink" title="头像上传"></a>头像上传</h3><h4 id="后端-持久层-4"><a href="#后端-持久层-4" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.编写sql语句</p><p>对应的avatar字段存其保存地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update t_user set avatar = #&#123;avatar&#125;,modified_user = #&#123;modifiedUser&#125;,</span><br><span class="line">                          modified_time = #&#123;modifiedTime&#125; where uid = #&#123;uid&#125;;</span><br></pre></td></tr></table></figure><p>2.定义mapper接口的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateUserAvatar</span><span class="params">(<span class="meta">@Param(&quot;file&quot;)</span> String ImgAddress,</span></span><br><span class="line"><span class="params">                     String modifiedUser,</span></span><br><span class="line"><span class="params">                     Date modifiedTime,</span></span><br><span class="line"><span class="params">                     Integer uid)</span>;</span><br></pre></td></tr></table></figure><p>3.编写mapper接口的映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    int updateUserAvatar(@Param(&quot;file&quot;) String ImgAddress);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUserAvatar&quot;</span>&gt;</span></span><br><span class="line">    update t_user set avatar = #&#123;avatar&#125; where uid = #&#123;uid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-业务层-4"><a href="#后端-业务层-4" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.异常规划 例如用户数据不存在，服务器宕机等</p><p>2.定义service层接口抽象方法</p><p>3.实现类重写抽象方法，编写业务处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.处理用户上传图片的抽象方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">userUploadImg</span><span class="params">(String imgAddress,Integer uid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.具体业务处理逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userUploadImg</span><span class="params">(String imgAddress, Integer uid)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.queryUserByUid(uid);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotExistException</span>(<span class="string">&quot;用户数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入图片</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span>  <span class="operator">=</span> userMapper.updateUserAvatar(imgAddress, user.getUsername(),<span class="keyword">new</span> <span class="title class_">Date</span>(),uid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;图片在服务器或数据库更新过程中出现错误，上传失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-4"><a href="#后端-控制层-4" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.处理控制层和业务层异常，<strong>将控制层异常加入全局异常处理@ExceptionHandler的值中</strong></p><ul><li><p>考虑到控制层接口前端数据也有可能出现异常，因此控制层也要进行异常控制</p><p>创建一个FileUploadException继承RunTimeException，其余异常继承此异常</p><p>①文件为空异常</p><p>②文件大小超出限制异常</p><p>③文件状态异常</p><p>④文件类型不符异常</p><p>⑤文件读取IO异常</p></li></ul><p>2.设计请求</p><p>请求路径：&#x2F;file</p><p>请求参数：MultipartFile file，Httpsession session</p><p>请求类型：post</p><p>响应类型：JsonResult&lt; Void&gt;</p><p>3.处理请求</p><p>①创建一个Controller专门处理文件的上传和下载</p><p>②将文件的下载地址保存到数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理文件上传和下载的Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置文件的上传限制</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.servlet.multipart.max-file-size&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer fileMaxSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置上传文件的类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; FILE_TYPE = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        FILE_TYPE.add(<span class="string">&quot;images/jpg&quot;</span>);</span><br><span class="line">        FILE_TYPE.add(<span class="string">&quot;images/jpeg&quot;</span>);</span><br><span class="line">        FILE_TYPE.add(<span class="string">&quot;images/png&quot;</span>);</span><br><span class="line">        FILE_TYPE.add(<span class="string">&quot;images/bmp&quot;</span>);</span><br><span class="line">        FILE_TYPE.add(<span class="string">&quot;images/gif&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">userAvatarUpload</span><span class="params">(MultipartFile file,</span></span><br><span class="line"><span class="params">                                             HttpSession session)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在保存文件之前对文件做检查</span></span><br><span class="line">        <span class="comment">//判断文件是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>(<span class="string">&quot;上传文件为空，上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断文件是否超过限制</span></span><br><span class="line">        <span class="keyword">if</span> (file.getSize() &gt; fileMaxSize)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>(<span class="string">&quot;文件过大，上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断上传的文件是否为图片类型 file.getContentType()获取的是这种形式 --&gt; text/html</span></span><br><span class="line">        <span class="keyword">if</span> (!FILE_TYPE.contains(file.getContentType()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeNotMatchException</span>(<span class="string">&quot;文件类型不符，上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取上传文件的原始名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件的后缀名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用时间戳为文件定义新的名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuidName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义文件最终的名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> uuidName + suffix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取项目在服务器上的真实位置并拼凑文件最终的保存位置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/static/images/img/&quot;</span> + fileName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里其实有两个选择：①直接将文件写入硬盘 这里选择这种</span></span><br><span class="line"><span class="comment">         * ②先获取存储文件的文件夹的路径，判断存储文件的文件夹是否存在，不存在则创建</span></span><br><span class="line"><span class="comment">         * 最后再将文件名和文件夹路径进行拼凑出最终文件的保存路径</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="comment">//虚拟创建目标文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取目标文件的上级目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">parentFile</span> <span class="operator">=</span> destFile.getParentFile();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!parentFile.exists())&#123;</span><br><span class="line">            <span class="comment">//代表文件的上级目录不存在，进行创建</span></span><br><span class="line">            parentFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选择第一种方法，直接写入目标位置</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(destFile);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (FileStatusException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileStatusException</span>(<span class="string">&quot;文件状态异常，写入失败&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileUploadIOException</span>(<span class="string">&quot;服务器或数据库写入文件失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取uid值</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将文件的下载路径写入数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileAccessPath</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:&quot;</span> + port + <span class="string">&quot;/file/down/&quot;</span> + fileName;</span><br><span class="line"></span><br><span class="line">        userService.userUploadImg(fileAccessPath,uid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/down/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; fileUpload(<span class="meta">@PathVariable(&quot;name&quot;)</span> String fileName) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">downFilePath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/static/images/img/&quot;</span> + fileName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (downFilePath != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//创建一个输入流读入需要下载的文件</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(downFilePath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建一个和文件所需字节大小一致的byte字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] fileBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[inputStream.available()];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将读入的流写入字节数据</span></span><br><span class="line">            inputStream.read(fileBytes);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">            <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">            <span class="comment">//Content-Disposition 通知客户端以下载的方式接受数据</span></span><br><span class="line">            <span class="comment">//attachment;filename= 设置下载的文件的名字</span></span><br><span class="line">            headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置响应状态码</span></span><br><span class="line">            <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">            ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(fileBytes, headers, statusCode);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭输入流</span></span><br><span class="line">            inputStream.close();</span><br><span class="line">            <span class="comment">//将需要下载的文件以字节数组的方式响应出去</span></span><br><span class="line">            <span class="keyword">return</span> responseEntity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="前端页面-4"><a href="#前端页面-4" class="headerlink" title="前端页面"></a>前端页面</h4><p>①在页面加载完成之前自动发送第一个ajax请求。</p><p>②这里使用form表单提交图像，但form表单提交会自动跳转，因此需要阻止submit的跳转行为</p><p>​引入js文件,在form表单添加onsubmit属性以及利用js插件解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引入阻止表单上传跳转的js--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery-1.8.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery.form.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    &lt;!--js代码--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">afterFromSubmit</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//阻止表单的默认跳转行为，并在ajax请求后进行重定向</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">&quot;#avatar&quot;</span>).<span class="title function_">ajaxSubmit</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&quot;上传成功&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//页面重定向，防止表单重复提交</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            location.<span class="property">href</span> = <span class="string">&quot;upload.html&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//这一步很关键，防止submit默认的提交跳转行为</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//网页加载完成之前自动发送ajax请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $.<span class="title function_">ajax</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/user/queryUser&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//判断用户是首次注册还是老用户</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">avatar</span> !== <span class="literal">null</span> &amp;&amp;res.<span class="property">data</span>.<span class="property">avatar</span> !== <span class="string">&quot;&quot;</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//设置用户头像</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;#img-avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,res.<span class="property">data</span>.<span class="property">avatar</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//设置为默认头像</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;#img-avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;../images/index/user.jpg&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="地址管理"><a href="#地址管理" class="headerlink" title="地址管理"></a>地址管理</h2><ul><li><p>鉴于地址管理  有点多，开发顺序参考：</p><p>新增收货地址管理、显示用户地址信息、设为默认地址、修改、删除</p></li></ul><h3 id="创建数据表-1"><a href="#创建数据表-1" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_address (</span><br><span class="line">    aid <span class="type">INT</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;收货地址id&#x27;</span>,</span><br><span class="line">    uid <span class="type">INT</span> COMMENT <span class="string">&#x27;归属的用户id&#x27;</span>,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;收货人姓名&#x27;</span>,</span><br><span class="line">    province_name <span class="type">VARCHAR</span>(<span class="number">15</span>) COMMENT <span class="string">&#x27;省-名称&#x27;</span>,</span><br><span class="line">    province_code <span class="type">CHAR</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;省-行政代号&#x27;</span>,</span><br><span class="line">    city_name <span class="type">VARCHAR</span>(<span class="number">15</span>) COMMENT <span class="string">&#x27;市-名称&#x27;</span>,</span><br><span class="line">    city_code <span class="type">CHAR</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;市-行政代号&#x27;</span>,</span><br><span class="line">    area_name <span class="type">VARCHAR</span>(<span class="number">15</span>) COMMENT <span class="string">&#x27;区-名称&#x27;</span>,</span><br><span class="line">    area_code <span class="type">CHAR</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;区-行政代号&#x27;</span>,</span><br><span class="line">    zip <span class="type">CHAR</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;邮政编码&#x27;</span>,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;详细地址&#x27;</span>,</span><br><span class="line">    phone <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;手机&#x27;</span>,</span><br><span class="line">    tel <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;固话&#x27;</span>,</span><br><span class="line">    tag <span class="type">VARCHAR</span>(<span class="number">6</span>) COMMENT <span class="string">&#x27;标签&#x27;</span>,</span><br><span class="line">    is_default <span class="type">INT</span> COMMENT <span class="string">&#x27;是否默认：0-不默认，1-默认&#x27;</span>,</span><br><span class="line">    created_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    created_time DATETIME COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    modified_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;修改人&#x27;</span>,</span><br><span class="line">    modified_time DATETIME COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (aid)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="创建实体类-1"><a href="#创建实体类-1" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对应数据表t_address的实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String provinceName;</span><br><span class="line">    <span class="keyword">private</span> String provinceCode;</span><br><span class="line">    <span class="keyword">private</span> String cityName;</span><br><span class="line">    <span class="keyword">private</span> String cityCode;</span><br><span class="line">    <span class="keyword">private</span> String areaName;</span><br><span class="line">    <span class="keyword">private</span> String areaCode;</span><br><span class="line">    <span class="keyword">private</span> String zip;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String phone ;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String tag;</span><br><span class="line">    <span class="keyword">private</span> Integer isDefault;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="新增地址"><a href="#新增地址" class="headerlink" title="新增地址"></a>新增地址</h3><h4 id="后端-持久层-5"><a href="#后端-持久层-5" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.编写sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>插入数据 除了此表的主键不需要数据，其他都要</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address(uid,name,province_name,province_code,city_name,city_code,area_name,</span><br><span class="line">area_code,zip,address,phone,tel,tag,is_default,created_user,created_time,</span><br><span class="line">                    modified_user,modified_time)</span><br><span class="line">                    <span class="keyword">values</span>(#&#123;uid&#125;,#&#123;name&#125;,#&#123;proviceName&#125;,#&#123;provinceCode&#125;,#&#123;cityName&#125;,</span><br><span class="line">                    #&#123;cityCode&#125;,#&#123;areaName&#125;,#&#123;areaCode&#125;,#&#123;zip&#125;,#&#123;address&#125;,#&#123;phone&#125;,</span><br><span class="line">                        #&#123;tel&#125;,#&#123;tag&#125;,#&#123;isDefault&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,</span><br><span class="line">                        #&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>判断用户数据条目是否超过限制</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> t_address <span class="keyword">where</span> uid <span class="operator">=</span> #&#123;uid&#125;</span><br></pre></td></tr></table></figure><p>2.定义抽象接口和抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Address实体类对应的mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressMapper</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Address address)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">userAddressCount</span><span class="params">(Integer aid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写mapper接口对应的映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-5"><a href="#后端-业务层-5" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.异常规划 用户地址条目数超出限制的异常</p><p>2.定义service接口和抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="comment">//添加地址业务抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Address address)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写具体的业务处理逻辑</p><ul><li><strong>需要注意，如果用户此时添加的地址是第一条，需要将其设置为其账户的默认地址</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IAddressServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressMapper addressMapper;</span><br><span class="line">    <span class="comment">//添加地址业务具体逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="comment">//先判断用户在数据库中的地址记录数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.userAddressCount(address.getUid());</span><br><span class="line">        <span class="comment">//查询是否超过记录限制</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">20</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressCountLimitException</span>(<span class="string">&quot;地址数量已达上限，请先删除部分地址！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当查询记录为0，则将此地址设置为用户默认的地址</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">            address.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> addressMapper.addAddress(address);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;新增地址失败，服务器或数据库异常！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-5"><a href="#后端-控制层-5" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.处理异常，将异常添加到全局统一管理</p><p>2.设计请求</p><p>请求路径：&#x2F;address</p><p>请求参数：Address address,HttpSession session</p><p>请求类型：post</p><p>响应类型：JsonResult&lt; Void&gt;</p><p>3.处理请求，创建对应的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/address&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAddressService addressService;</span><br><span class="line">    <span class="comment">//处理用户新增地址</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">addAddress</span><span class="params">(Address address, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//从session中取出uid</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line">        <span class="comment">//将取出的uid设为当前地址对象的的uid</span></span><br><span class="line">        address.setUid(uid);</span><br><span class="line">        <span class="comment">//调用业务层方法，新增地址</span></span><br><span class="line">        addressService.addAddress(address);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-5"><a href="#前端页面-5" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#btn-add-new-address&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            url : <span class="string">&quot;http://localhost:8080/address&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: $(<span class="string">&quot;#form-add-new-address&quot;</span>).<span class="title function_">serialize</span>(), <span class="comment">//获取表单的所有内容</span></span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="string">&quot;新增成功！&quot;</span>)</span><br><span class="line">                    location.<span class="property">href</span> = <span class="string">&quot;address.html&quot;</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(res.<span class="property">message</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;服务器出现故障，请等待攻城狮修复！！&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="获取省市区列表"><a href="#获取省市区列表" class="headerlink" title="获取省市区列表"></a>获取省市区列表</h3><h4 id="创建数据表-2"><a href="#创建数据表-2" class="headerlink" title="创建数据表"></a>创建数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>parent属性代表的是父区域的代码号，省的父代码号是<span class="operator">+</span><span class="number">86</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_dict_district (</span><br><span class="line">    id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    parent <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    code <span class="type">varchar</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h4 id="创建实体类-2"><a href="#创建实体类-2" class="headerlink" title="创建实体类"></a>创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">District</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String parent;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后端-持久层-6"><a href="#后端-持久层-6" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.编写sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>根据父代号查询相关信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_dict_district <span class="keyword">where</span> parent <span class="operator">=</span> #&#123;parent&#125; <span class="keyword">order</span> <span class="keyword">by</span> code <span class="keyword">ASC</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>根据code查询对应的省市区名字</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> t_dict_district <span class="keyword">where</span> code <span class="operator">=</span> #&#123;code&#125;</span><br></pre></td></tr></table></figure><p>2.定义mapper接口和抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据父代号查询区域信息</span></span><br><span class="line">List&lt;District&gt; <span class="title function_">queryDistrictByParent</span><span class="params">(String parent)</span>;</span><br><span class="line"><span class="comment">//根据code查询当前省市区的名称</span></span><br><span class="line">String <span class="title function_">queryDistrictByCode</span><span class="params">(String code)</span>;</span><br></pre></td></tr></table></figure><p>3.编写映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-6"><a href="#后端-业务层-6" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常 ,暂无异常</p><p>2.定义service接口和抽象方法</p><p>3.编写具体的业务处理逻辑</p><ul><li><p>此外，还需要在address业务层需要调用District业务层为它的address对象填充空白字段</p><p>因为provinceName、cityName、areaName的值需要通过前端传过来的option标签的</p><p>value值(这些option标签是通过这个业务层查询后append到select标签中的)进行查询</p><p>才能得到，因此还需要在address业务层调用这个业务层接口</p><p><font color='red'><strong>select标签中的option标签的value的值是前端往后端传的参数</strong></font></p></li><li><p>而在这之前添加关于地址的字段全空，code为名字就是因为select中没有选项</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDistrictServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IDistrictService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DistrictMapper districtMapper;</span><br><span class="line">    <span class="comment">//根据父代号查询省市区信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;District&gt; <span class="title function_">getSpecifyDistrictByParent</span><span class="params">(String parent)</span> &#123;</span><br><span class="line">        List&lt;District&gt; districts = districtMapper.queryDistrictByParent(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤无效字段数据，提高传输效率</span></span><br><span class="line">        <span class="keyword">for</span> (District ad: districts) &#123;</span><br><span class="line">            ad.setId(<span class="literal">null</span>);</span><br><span class="line">            ad.setParent(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回数据</span></span><br><span class="line">        <span class="keyword">return</span> districts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据code查询省市区名字</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNameByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> districtMapper.queryDistrictByCode(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-6"><a href="#后端-控制层-6" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.无异常，不用处理</p><p>2.设计请求</p><p>请求路径：&#x2F;district</p><p>请求参数：String parent</p><p>请求类型：get</p><p>响应类型：JsonResult&lt;List&lt; District&gt;&gt;</p><p>3.处理请求,创建一个新的控制类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理父代号查询省市区的请求</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;District&gt;&gt; <span class="title function_">queryDistrictByParent</span><span class="params">(String parent)</span>&#123;</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    List&lt;District&gt; list = districtService.getSpecifyDistrictByParent(parent);</span><br><span class="line">    <span class="comment">//返回数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="前端页面-6"><a href="#前端页面-6" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li>前端页面js代码过长，需要到&#x2F;web&#x2F;addAddress.html的script标签下看</li></ul><hr><h3 id="获取用户地址"><a href="#获取用户地址" class="headerlink" title="获取用户地址"></a>获取用户地址</h3><h4 id="后端-持久层-7"><a href="#后端-持久层-7" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.编写sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> uid <span class="operator">=</span> #&#123;uid&#125; <span class="keyword">order</span> <span class="keyword">by</span> is_default <span class="keyword">desc</span>,created_time <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p>2.定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询用户所有地址记录</span></span><br><span class="line">List&lt;Address&gt; <span class="title function_">queryUserAddress</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><p>3.编写映射文件</p><ul><li>定义结果结映射规则，将通过select查询出来的结果放入List当中</li></ul><p>4.单元测试</p><h4 id="后端-业务层-7"><a href="#后端-业务层-7" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.异常控制，貌似没新异常</p><p>2.定义业务层抽象方法</p><p>3.编写具体的业务处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加地址查询的抽象方法</span></span><br><span class="line">List&lt;Address&gt; <span class="title function_">queryUser</span><span class="params">(Integer uid)</span>;</span><br><span class="line"><span class="comment">//地址查询的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">queryUser</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    <span class="comment">//先判断用户信息是否存在</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByUid(uid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span> | user.getIsDelete() == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotExistException</span>(<span class="string">&quot;用户信息不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回查询的用户地址信息</span></span><br><span class="line">    <span class="keyword">return</span> addressMapper.queryUserAddress(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-7"><a href="#后端-控制层-7" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.异常处理</p><p>2.设计请求</p><p>请求地址：&#x2F;address</p><p>请求参数：HttpSession session</p><p>请求类型：get</p><p>响应类型：JsonResult&lt;List&lt; Address&gt;&gt;</p><p>3.处理请求</p><ul><li><strong>控制层需要把前端发送过来的Address其余空字段补全</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理用户查询收货地址</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&gt; <span class="title function_">queryAllAddress</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//获取uid</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    List&lt;Address&gt; list = addressService.queryUser(uid);</span><br><span class="line">    <span class="comment">//返回数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="前端页面-7"><a href="#前端页面-7" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li><p>在页面加载完成时，自动发送ajax请求查询用户收货地址，拿到返回数据之后</p><p>判断返回数据的j集合中是否有信息，没有信息将表格内容设置为提示信息，</p><p>有内容则通过js选择器找到显示表格的标签，通过append()将数据逐个插入到表格的标签内</p><p>并将修改、删除、设为默认的三个 绑定单击事件</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//页面加载完成自动发送ajax请求查询用户地址</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/address&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">length</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; res.<span class="property">data</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                    <span class="comment">//挨个获取返回的集合中的元素</span></span><br><span class="line">                    <span class="keyword">var</span> address = res.<span class="property">data</span>[i];</span><br><span class="line">                    <span class="comment">//拼凑标签和信息</span></span><br><span class="line">                    str = <span class="string">&quot;&lt;tr&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;td&gt;&quot;</span>+ address.<span class="property">tag</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;td&gt;&quot;</span>+ address.<span class="property">name</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;td&gt;&quot;</span></span><br><span class="line">                        + address.<span class="property">provinceCode</span> + address.<span class="property">cityCode</span> + address.<span class="property">areaCode</span> + address.<span class="property">address</span></span><br><span class="line">                        + <span class="string">&quot;&lt;/td&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;td&gt;&quot;</span> + address.<span class="property">phone</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;td&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;a href=&#x27;javascript:void(0);&#x27; onclick=&#x27;updateAddress()&#x27; class=&#x27;btn btn-xs btn-info&#x27;&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;span class=&#x27;fa fa-edit&#x27;&gt;&lt;/span&gt;修改&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;/a&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;/td&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;td&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;a href=&#x27;javascript:void(0);&#x27; onclick=&#x27;deleteAddress()&#x27; class=&#x27;btn btn-xs add-del btn-info&#x27;&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;span class=&#x27;fa fa-trash-o&#x27;&gt;&lt;/span&gt;删除&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;/a&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;/td&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;td&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;a href=&#x27;javascript:void(0);&#x27; onclick=&#x27;setDefault()&#x27; class=&#x27;btn btn-xs add-def btn-default&#x27;&gt;设为默认&lt;/a&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;/td&gt;&quot;</span></span><br><span class="line">                        + <span class="string">&quot;&lt;/tr&gt;&quot;</span></span><br><span class="line">                    <span class="comment">//将数据逐个插入到表格的标签内</span></span><br><span class="line">                    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(str)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> text = <span class="string">&quot;暂无收货地址，请先添加收货地址&quot;</span></span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">text</span>(text)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="设置默认地址"><a href="#设置默认地址" class="headerlink" title="设置默认地址"></a>设置默认地址</h3><h4 id="后端-持久层-8"><a href="#后端-持久层-8" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.编写sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>判断需要设置为默认地址的数据是否存在</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address <span class="keyword">where</span> aid <span class="operator">=</span> #&#123;aid&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>将所有地址设置为非默认值</span><br><span class="line"><span class="keyword">update</span> t_address <span class="keyword">set</span> is_default <span class="operator">=</span> <span class="number">0</span> <span class="keyword">where</span> uid <span class="operator">=</span> #&#123;uid&#125; <span class="keyword">and</span> is_delete <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>更新地址的默认值</span><br><span class="line"><span class="keyword">update</span> t_address <span class="keyword">set</span> is_default <span class="operator">=</span> <span class="number">1</span>,</span><br><span class="line">                     modified_user <span class="operator">=</span> #&#123;modifiedUser&#125;,</span><br><span class="line"> modified_time <span class="operator">=</span> #&#123;modifiedTime&#125;</span><br><span class="line">                     <span class="keyword">where</span> aid <span class="operator">=</span> #&#123;aid&#125;</span><br></pre></td></tr></table></figure><p>2.定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据地址aid查询某条地址</span></span><br><span class="line">Address <span class="title function_">queryUserAddressByAid</span><span class="params">(Integer aid)</span>;</span><br><span class="line"><span class="comment">// 根据用户uid将其关联的地址设置为非默认值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">setAllAddressNotDefault</span><span class="params">(Integer uid)</span>;</span><br><span class="line"><span class="comment">//根据地址aid将某条地址设为默认值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">setOneAddressDefault</span><span class="params">(Integer aid,String modifiedUser, Date modifiedTime)</span>;</span><br></pre></td></tr></table></figure><p>3.编写mapper映射文件</p><h4 id="后端-业务层-8"><a href="#后端-业务层-8" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.异常规划，数据不存在</p><p>2.定义service层抽象方法</p><p>3.编写具体的业务处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询某条地址的抽象方法</span></span><br><span class="line">Address <span class="title function_">queryAddressByAid</span><span class="params">(Integer aid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置用户所有地址为非默认地址的抽象方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">setNotDefaultAddress</span><span class="params">(Integer uid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置某个地址为默认地址的抽象方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">setOneAddressDefault</span><span class="params">(Integer aid,String modifiedUser, Date modifiedTime)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据aid查询地址的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">queryAddressByAid</span><span class="params">(Integer aid)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> addressMapper.queryUserAddressByAid(aid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置用户所有地址为非默认的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setNotDefaultAddress</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> addressMapper.setAllAddressNotDefault(uid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置某个地址为默认地址的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setOneAddressDefault</span><span class="params">(Integer aid,String modifiedUser, Date modifiedTime)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> addressMapper.setOneAddressDefault(aid,modifiedUser,modifiedTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后端-控制层-8"><a href="#后端-控制层-8" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.将异常加入全局处理</p><p>2.设计请求</p><p>请求路径：&#x2F;address&#x2F;setAddress</p><p>请求参数：Integer aid,HttpSession session</p><p>请求类型：post</p><p>响应类型：JsonResult&lt; void&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/setAddress&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">setUserDefaultAddress</span><span class="params">(Integer aid,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//查询要修改的地址是否存在</span></span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressService.queryAddressByAid(aid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (address == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressNotExistsException</span>(<span class="string">&quot;该地址不存在，设置失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从session中取出用户的uid和名字</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">modifiedUser</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line"></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将该用户的所有地址设为非默认值</span></span><br><span class="line">    addressService.setNotDefaultAddress(uid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将需要修改的地址设为默认值</span></span><br><span class="line">    addressService.setOneAddressDefault(aid,modifiedUser,date);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="前端页面-8"><a href="#前端页面-8" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li><p><font color='red'><strong>由于是直接通过拼接元素实现了数据展示，对于id的获取选择使用正则表达式进行替换</strong></font></p><p>使用正则表达式替换获取该地址的aid值，#{aid}只是一个占位符的含义，没其他含义</p><p>str &#x3D; str.replace(“#{aid}”,address.aid)</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为设为默认地址绑定点击事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setDefault</span>(<span class="params">aid</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(aid)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&quot;确定要这条收货地址设为默认地址吗？&quot;</span>))&#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/address/setAddress&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: <span class="string">&quot;aid=&quot;</span> + aid,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;设置成功&quot;</span>)</span><br><span class="line">                location.<span class="title function_">reload</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="删除地址"><a href="#删除地址" class="headerlink" title="删除地址"></a>删除地址</h3><h4 id="后端-持久层-9"><a href="#后端-持久层-9" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句的编写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_address <span class="keyword">set</span> is_delete <span class="operator">=</span> <span class="number">1</span>，</span><br><span class="line">modified_user <span class="operator">=</span> #&#123;modifiedUser&#125;,</span><br><span class="line"> modified_time <span class="operator">=</span> #&#123;modifiedTime&#125;</span><br><span class="line"> <span class="keyword">where</span> aid <span class="operator">=</span> #&#123;aid&#125;)</span><br></pre></td></tr></table></figure><p>2.定义mapper抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteAddressByAid</span><span class="params">(Integer aid,String modifiedUser, Date modifiedTime)</span>;</span><br></pre></td></tr></table></figure><p>3.编写mapper映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-9"><a href="#后端-业务层-9" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.异常控制，貌似没有</p><p>2.定义抽象方法</p><ul><li>与上方设置默认地址类上</li></ul><p>3.编写具体的处理逻辑</p><ul><li>与上方设置默认地址类上</li></ul><p>4.单元测试</p><h4 id="后端-控制层-9"><a href="#后端-控制层-9" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.异常处理，貌似没有</p><p>2.设计请求</p><ul><li>与上方设置默认地址类上</li></ul><p>3.处理请求</p><ul><li>与上方设置默认地址类上</li></ul><p>4.单元测试</p><h4 id="前端页面-9"><a href="#前端页面-9" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li><p>删除地址要考虑这条删除的地址是否为默认地址，</p><p>如果是默认地址不允许删除，提示修改其他地址才能删除</p></li></ul><p>js代码与上方的设置默认地址相似，就不浪费空间了</p><hr><h3 id="修改地址"><a href="#修改地址" class="headerlink" title="修改地址"></a>修改地址</h3><h4 id="后端-持久层-10"><a href="#后端-持久层-10" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句的编写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> t_address <span class="keyword">set</span>(除了uid、创建者和创建时间的字段) <span class="keyword">where</span> aid <span class="operator">=</span> #&#123;aid&#125; <span class="keyword">and</span> is_delete <span class="operator">=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>2.定义mapper抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新用户地址信息</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUserAddressByAid</span><span class="params">(Address address)</span>;</span><br></pre></td></tr></table></figure><p>3.编写mapper映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-10"><a href="#后端-业务层-10" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.异常控制，貌似没有</p><p>2.定义抽象方法</p><p>3.编写具体的处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改某个指定地址的抽象方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateOneAddress</span><span class="params">(Address address,String modifiedUser)</span>;</span><br><span class="line"><span class="comment">//修改指定地址的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateOneAddress</span><span class="params">(Address address,String modifiedUser)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取并设置其他三个地址为null的字段</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">provinceName</span> <span class="operator">=</span> districtService.getNameByCode(address.getProvinceCode());</span><br><span class="line">    <span class="type">String</span> <span class="variable">cityName</span> <span class="operator">=</span> districtService.getNameByCode(address.getCityCode());</span><br><span class="line">    <span class="type">String</span> <span class="variable">areaName</span> <span class="operator">=</span> districtService.getNameByCode(address.getAreaCode());</span><br><span class="line">    address.setProvinceName(provinceName);</span><br><span class="line">    address.setCityName(cityName);</span><br><span class="line">    address.setAreaName(areaName);</span><br><span class="line">    <span class="comment">//补全表单中没有的其他字段</span></span><br><span class="line">    address.setModifiedUser(modifiedUser);</span><br><span class="line">    address.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> addressMapper.updateUserAddressByAid(address);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-10"><a href="#后端-控制层-10" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.异常处理，貌似没有</p><p>2.设计请求</p><p>请求地址：&#x2F;address&#x2F;updateAddress</p><p>请求参数：Address address,HttpSession session</p><p>请求类型：post</p><p>响应类型：JsonResult&lt; void&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/updateAddress&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">updateOneAddress</span><span class="params">(Address address,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//取出session中用户名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">modifiedUser</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> addressService.updateOneAddress(address, modifiedUser);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;修改地址时，服务器或数据库异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="前端页面-10"><a href="#前端页面-10" class="headerlink" title="前端页面"></a>前端页面</h4><p>①在跳转到这个页面时，自动发送一个ajax请求，根据返回数据填充表单</p><p>②在用户修改省份时，城市、市县自动变为请选择城市或区县并根据选择发送对应的ajax请求查询</p><p>③在页面加载完成时，用户可根据自由选择城市或区县的单个修改</p><p>④修改按钮前端将整个表单以ajax请求进行发送，后端以实体类address接收并处理</p><p>⑤恢复原地址信息按钮实际上就是再次调用第一个中的ajax请求</p><ul><li><font color='red'><strong>javaScript代码长达200多行，不予展示，需要到项目于的&#x2F;web&#x2F;editAddress.html页面查看</strong></font></li></ul><hr><h2 id="商品管理"><a href="#商品管理" class="headerlink" title="商品管理"></a>商品管理</h2><h3 id="创建数据表-3"><a href="#创建数据表-3" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_product (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  category_id <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类id&#x27;</span>,</span><br><span class="line">  item_type <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品系列&#x27;</span>,</span><br><span class="line">  title <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品标题&#x27;</span>,</span><br><span class="line">  sell_point <span class="type">varchar</span>(<span class="number">150</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品卖点&#x27;</span>,</span><br><span class="line">  price <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品单价&#x27;</span>,</span><br><span class="line">  num <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存数量&#x27;</span>,</span><br><span class="line">  image <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图片路径&#x27;</span>,</span><br><span class="line">  status <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;商品状态  1：上架   2：下架   3：删除&#x27;</span>,</span><br><span class="line">  priority <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;显示优先级&#x27;</span>,</span><br><span class="line">  created_time datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  modified_time datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最后修改时间&#x27;</span>,</span><br><span class="line">  created_user <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">  modified_user <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;最后修改人&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="创建实体类-3"><a href="#创建实体类-3" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应数据表t_product的实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer categoryId ;</span><br><span class="line">    <span class="keyword">private</span> String itemType;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String sellPoint;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> String priority;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="热销排行"><a href="#热销排行" class="headerlink" title="热销排行"></a>热销排行</h3><h4 id="后端-持久层-11"><a href="#后端-持久层-11" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句编写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,title,price,image <span class="keyword">FROM</span> t_product  <span class="keyword">where</span> status <span class="operator">=</span> <span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> priority <span class="keyword">DESC</span> LIMIT <span class="number">0</span>,<span class="number">4</span></span><br></pre></td></tr></table></figure><p>2.定义mapper接口和抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询优先权前五的商品进行展示</span></span><br><span class="line">List&lt;Product&gt; <span class="title function_">queryPriorityProduct</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>3.编写mapper映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-11"><a href="#后端-业务层-11" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常</p><p>2.定义service接口和抽象方法</p><p>3.编写具体的处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询热销商品的前五项的抽象方法</span></span><br><span class="line">List&lt;Product&gt; <span class="title function_">queryPriorityProduct</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">queryPriorityProduct</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> productMapper.queryPriorityProduct();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-11"><a href="#后端-控制层-11" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.异常处理，无异常不需要处理</p><p>2.设计请求</p><p>请求路径：&#x2F;product</p><p>请求参数：无</p><p>请求类型：get</p><p>响应类型：JsonResult&lt;List&lt; Product&gt;&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理热销商品的请求</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;Product&gt;&gt; <span class="title function_">queryBestProduct</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询对应商品</span></span><br><span class="line">    List&lt;Product&gt; products = productService.queryPriorityProduct();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,products);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="前端页面-11"><a href="#前端页面-11" class="headerlink" title="前端页面"></a>前端页面</h4><p>①在页面加载完成自动发送ajax请求，根据返回信息填充热销排行信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询热销商品的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showHotProducts</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        url : <span class="string">&quot;http://localhost:8080/product&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.<span class="property">data</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">let</span> product = res.<span class="property">data</span>[i]</span><br><span class="line">                <span class="keyword">let</span> image = <span class="string">&quot;http://localhost:8080&quot;</span> + product.<span class="property">image</span> + <span class="string">&quot;collect.png&quot;</span></span><br><span class="line">                str = <span class="string">&quot;&lt;div class=&#x27;col-md-12&#x27;&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;div class=\&quot;col-md-7 text-row-2\&quot;&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;a href=&#x27;#&#x27;&gt;&quot;</span> + product.<span class="property">title</span> + <span class="string">&quot;&lt;/a&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;/div&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;div class=\&quot;col-md-2\&quot;&gt;¥23&lt;/div&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;div class=\&quot;col-md-3\&quot;&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;img src=&quot;</span> + image  + <span class="string">&quot; class=&#x27;img-responsive&#x27; /&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;/div&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;/div&gt;&quot;</span></span><br><span class="line">                $(<span class="string">&quot;#hot-list&quot;</span>).<span class="title function_">append</span>(str)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;查询错误，请等待攻城狮修复！！&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="最新产品"><a href="#最新产品" class="headerlink" title="最新产品"></a>最新产品</h3><ul><li>所有的逻辑跟热销排行 相似在此不再浪费空间书写，只书写部分</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">SELECT</span> id,title,price,image <span class="keyword">FROM</span> t_product </span><br><span class="line"><span class="keyword">WHERE</span> category_id <span class="operator">=</span> <span class="number">163</span> </span><br><span class="line"><span class="keyword">and</span> status <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> created_time <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">4</span> ;</span><br></pre></td></tr></table></figure><hr><h3 id="显示商品"><a href="#显示商品" class="headerlink" title="显示商品"></a>显示商品</h3><h4 id="后端-持久层-12"><a href="#后端-持久层-12" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句的编写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> title,sell_point,price,image <span class="keyword">from</span> t_product <span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;</span><br></pre></td></tr></table></figure><p>2.定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据指定商品id进行商品查询</span></span><br><span class="line">Product <span class="title function_">queryProductById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><p>3.编写mapper映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-12"><a href="#后端-业务层-12" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常，商品不存在,商品状态异常</p><p>2.定义抽象方法</p><p>3.编写具体的逻辑处理方法</p><p>4.单元测试</p><h4 id="后端-控制层-12"><a href="#后端-控制层-12" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.处理异常，将异常加入全局处理</p><p>2.设计请求</p><p>请求路径：&#x2F;product&#x2F;{id}</p><p>请求参数：Integet id</p><p>请求类型：get</p><p>响应类型：JsonResult&lt; Product&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理商品id查询该商品信息的请求</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Product&gt; <span class="title function_">queryProductById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.queryProductById(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-12"><a href="#前端页面-12" class="headerlink" title="前端页面"></a>前端页面</h4><p>①在页面加载完成自动发送ajax请求，把根据id查询的返回信息填充至页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">showInThisProductHtml</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//接收上一个页面传来的连接</span></span><br><span class="line">    <span class="keyword">var</span> hrefUrl = location.<span class="property">href</span>;</span><br><span class="line">    <span class="comment">//以url中的&quot;=&quot;为截断点，形成一个数组</span></span><br><span class="line">    <span class="keyword">var</span> param = hrefUrl.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">    <span class="comment">//decodeURI解码得到想要的参数</span></span><br><span class="line">    <span class="keyword">var</span> id = <span class="built_in">decodeURI</span>(param[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在页面加载完成时自动发送此ajax请求并填充表单</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/product/&quot;</span> + id,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> product = res.<span class="property">data</span>;</span><br><span class="line">            <span class="comment">//将普通的数据填充至页面</span></span><br><span class="line">            $(<span class="string">&quot;#product-title&quot;</span>).<span class="title function_">text</span>(product.<span class="property">title</span>)</span><br><span class="line">            $(<span class="string">&quot;#product-sell-point&quot;</span>).<span class="title function_">append</span>(product.<span class="property">sellPoint</span>)</span><br><span class="line">            $(<span class="string">&quot;#product-price&quot;</span>).<span class="title function_">text</span>(product.<span class="property">price</span>)</span><br><span class="line">            $(<span class="string">&quot;#stock&quot;</span>).<span class="title function_">text</span>(product.<span class="property">num</span>)</span><br><span class="line">            <span class="comment">//将数据库查询的图片进行替换</span></span><br><span class="line">            <span class="keyword">let</span> image = <span class="string">&quot;..&quot;</span> +  product.<span class="property">image</span></span><br><span class="line">            <span class="comment">//遍历填充图片数据</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                $(<span class="string">&quot;#product-image-&quot;</span> + i + <span class="string">&quot;-big&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,image + i + <span class="string">&quot;_big.png&quot;</span>)</span><br><span class="line">                $(<span class="string">&quot;#product-image-&quot;</span> + i).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,image + i + <span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//在页面加载完成时，填充页面数据</span></span><br><span class="line">    <span class="title function_">showInThisProductHtml</span>();</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="立即购买"><a href="#立即购买" class="headerlink" title="立即购买"></a>立即购买</h3><ul><li><font color='red'><strong>后端-持久层 、业务层、控制层大部分东西都在前面的 已经实现了</strong></font></li></ul><p>1.根据uid查询用户地址，在地址管理的获取收货地址 已经实现</p><p>2.根据pid查询商品信息，在显示商品 已经实现</p><p>业务层有所修改，添加一个新的方法对应从商品详情页进去确定订单界面的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理根据从商品界面进入创建orderItem订单的具体逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertOrderItemFromProductHtml</span><span class="params">(Integer oid,Integer pid, Integer num, String username)</span> &#123;</span><br><span class="line">    <span class="comment">//根据pid查询商品信息</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.queryProductById(pid);</span><br><span class="line">    <span class="comment">//创建一个用于向持久层传输的OrderItem实体类对象</span></span><br><span class="line">    <span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">    <span class="comment">//补全orderItem对象的空白字段</span></span><br><span class="line">    orderItem.setOid(oid);</span><br><span class="line">    orderItem.setPid(pid);</span><br><span class="line">    orderItem.setTitle(product.getTitle());</span><br><span class="line">    orderItem.setImage(product.getImage());</span><br><span class="line">    orderItem.setPrice(product.getPrice());</span><br><span class="line">    orderItem.setNum(num);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">createdTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    orderItem.setCreatedUser(username);</span><br><span class="line">    orderItem.setCreatedTime(createdTime);</span><br><span class="line">    orderItem.setModifiedUser(username);</span><br><span class="line">    orderItem.setModifiedTime(createdTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用持久层进行插入</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> orderMapper.insertOneOrderItem(orderItem);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;服务器出现错误，创建订单失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-13"><a href="#前端页面-13" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li><p>没办法，由于两个页面共用同一个创建订单的方法因此必须在前端页面判断是由哪个界面</p><p>进入的确认订单支付界面</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给在线支付按钮绑定单击事件</span></span><br><span class="line">$(<span class="string">&quot;#btn-create-order&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//获取用户选择的是哪一个地址的value值</span></span><br><span class="line">    <span class="keyword">let</span> aid = <span class="title function_">getSelectOption</span>();</span><br><span class="line">    <span class="keyword">let</span> totalPrice = <span class="title class_">JSON</span>.<span class="title function_">parse</span>($(<span class="string">&quot;#all-price&quot;</span>).<span class="title function_">html</span>());</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/order/createOrder&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;<span class="attr">aid</span>:aid,<span class="attr">totalPrice</span>:totalPrice&#125;,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="comment">//获取已经创建的order的订单号</span></span><br><span class="line">            <span class="keyword">let</span> oid = res.<span class="property">data</span>.<span class="property">oid</span></span><br><span class="line">            <span class="comment">//获取地址栏上的参数</span></span><br><span class="line">            <span class="keyword">let</span> urlParam = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>)<span class="comment">//截取地址栏url?后的第二个元素</span></span><br><span class="line">            <span class="comment">//判断是否携带了cids，不等于-1代表是从购物车进入这个界面</span></span><br><span class="line">            <span class="keyword">if</span>(urlParam.<span class="title function_">search</span>(<span class="string">&quot;cids&quot;</span>) !== -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//获取每个cid取创建orderItem数据</span></span><br><span class="line">                <span class="title function_">useCidSentAjaxCreateOrderItem</span>(oid);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">//等于1代表不是从购物车进入这个界面</span></span><br><span class="line">                <span class="comment">//实现商品界面的立即购买创建订单</span></span><br><span class="line">                <span class="title function_">fromProductSentAjaxCreateOrderItem</span>(oid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示这是从商品界面进入的确认订单界面</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fromProductSentAjaxCreateOrderItem</span>(<span class="params">oid</span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/order/createOrderItem&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;<span class="attr">oid</span>:oid,<span class="attr">pid</span>:pid,<span class="attr">num</span>:num&#125;,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//跳转到指定页面</span></span><br><span class="line">                location.<span class="property">href</span> = <span class="string">&quot;payment.html?oid=&quot;</span> + oid</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;创建orderItem订单失败&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;服务器内部异常！&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="购物车管理"><a href="#购物车管理" class="headerlink" title="购物车管理"></a>购物车管理</h2><h3 id="创建数据表-4"><a href="#创建数据表-4" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_cart (</span><br><span class="line">    cid <span class="type">INT</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;购物车数据id&#x27;</span>,</span><br><span class="line">    uid <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    pid <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">    price <span class="type">BIGINT</span> COMMENT <span class="string">&#x27;加入时商品单价&#x27;</span>,</span><br><span class="line">    num <span class="type">INT</span> COMMENT <span class="string">&#x27;商品数量&#x27;</span>,</span><br><span class="line">    created_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    created_time DATETIME COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    modified_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;修改人&#x27;</span>,</span><br><span class="line">    modified_time DATETIME COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (cid)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="创建实体类-4"><a href="#创建实体类-4" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cart</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Integer pid  ; </span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="加入购物车"><a href="#加入购物车" class="headerlink" title="加入购物车"></a>加入购物车</h3><h4 id="后端-持久层-13"><a href="#后端-持久层-13" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.编写sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>根据用户uid和商品pid查询某条购物车cid数据</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_cart <span class="keyword">where</span> uid <span class="operator">=</span> #&#123;uid&#125; <span class="keyword">and</span> pid <span class="operator">=</span> #&#123;pid&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>更新cid数据</span><br><span class="line"><span class="keyword">update</span> t_cart <span class="keyword">set</span> price <span class="operator">=</span> #&#123;price&#125;,num <span class="operator">=</span> #&#123;num&#125;,</span><br><span class="line">  modified_user <span class="operator">=</span> #&#123;modifiedUser&#125;,modified_time <span class="operator">=</span> #&#123;modifiedTime&#125;</span><br><span class="line">  <span class="keyword">where</span> cid <span class="operator">=</span> #&#123;cid&#125;</span><br><span class="line">  </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>插入新的cart的数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_cart(uid,pid,price,num,created_user,created_time,modified_user,modified_time)</span><br><span class="line">                          <span class="keyword">values</span>(#&#123;uid&#125;,#&#123;pid&#125;,#&#123;price&#125;,#&#123;num&#125;,</span><br><span class="line">                                 #&#123;createdUser&#125;,#&#123;createdTime&#125;,</span><br><span class="line">                                 #&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;</span><br><span class="line">                                )</span><br></pre></td></tr></table></figure><p>2.定义mapper接口和抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类Cart对应的mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CartMapper</span> &#123;</span><br><span class="line"><span class="comment">//根据用户uid和商品pid查询某条购物车cid数据</span></span><br><span class="line">Cart <span class="title function_">queryCartByUidAndPid</span><span class="params">(Integer uid, <span class="meta">@Param(&quot;pid&quot;)</span> Integer pid)</span>;</span><br><span class="line"><span class="comment">//更新cart数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateCartInfo</span><span class="params">(Cart cart)</span>;</span><br><span class="line"><span class="comment">//新增cart数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addCart</span><span class="params">(Cart cart)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写mapper映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-13"><a href="#后端-业务层-13" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常。没想到异常</p><p>2.定义service接口和抽象方法</p><p>3.编写具体逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据uid和pid查询Cart信息的抽象方法</span></span><br><span class="line">Cart <span class="title function_">queryCartByUidAndPid</span><span class="params">(Integer uid,Integer pid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新数据的抽象方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">UpdateCartInfo</span><span class="params">(Cart cart,String modifiedUser, Date modifiedTime)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增数据的抽象方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addCart</span><span class="params">(Cart cart,String createdUser,Date createdTime,String modifiedUser, Date modifiedTime)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理购物车管理接口的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ICartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ICartService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CartMapper cartMapper;</span><br><span class="line">    <span class="comment">//根据uid和aid查询数据的具体逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Cart <span class="title function_">queryCartByUidAndPid</span><span class="params">(Integer uid, Integer pid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cartMapper.queryCartByUidAndPid(uid,pid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新cart数据的具体逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">UpdateCartInfo</span><span class="params">(Cart cart, String modifiedUser, Date modifiedTime)</span> &#123;</span><br><span class="line">        <span class="comment">//更改修改人和修改时间的字段</span></span><br><span class="line">        cart.setModifiedUser(modifiedUser);</span><br><span class="line">        cart.setModifiedTime(modifiedTime);</span><br><span class="line">        <span class="comment">//执行修改</span></span><br><span class="line">        <span class="keyword">return</span> cartMapper.updateCartInfo(cart);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新增cart数据的抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addCart</span><span class="params">(Cart cart,String createdUser,Date createdTime,String modifiedUser, Date modifiedTime)</span> &#123;</span><br><span class="line">        <span class="comment">//取得当前商品的pid和用户uid</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">pid</span> <span class="operator">=</span> cart.getPid();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> cart.getUid();</span><br><span class="line">        <span class="comment">//查询当前pid在当前用户的购物车中是否存在</span></span><br><span class="line">        <span class="type">Cart</span> <span class="variable">destCart</span> <span class="operator">=</span> cartMapper.queryCartByUidAndPid(uid, pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据查询的结果做出不同动作</span></span><br><span class="line">        <span class="keyword">if</span> (destCart == <span class="literal">null</span>)&#123; <span class="comment">//表示不存在，则直接添加</span></span><br><span class="line">            <span class="comment">//补全其他四个字段</span></span><br><span class="line">            cart.setCreatedUser(createdUser);</span><br><span class="line">            cart.setCreatedTime(createdTime);</span><br><span class="line">            cart.setModifiedUser(modifiedUser);</span><br><span class="line">            cart.setModifiedTime(modifiedTime);</span><br><span class="line">            <span class="comment">//执行插入操作</span></span><br><span class="line">            <span class="keyword">return</span> cartMapper.addCart(cart);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; <span class="comment">//表示该用户已存在该产品的数据</span></span><br><span class="line">            <span class="comment">//取出查询的数据数量</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">destNum</span> <span class="operator">=</span> destCart.getNum();</span><br><span class="line">            <span class="comment">//取出新添加产品的数量</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">cartNum</span> <span class="operator">=</span> cart.getNum();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//计算最终的数量</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">endNum</span> <span class="operator">=</span> destNum + cartNum;</span><br><span class="line">            <span class="comment">//并更新需要更新的字段</span></span><br><span class="line">            destCart.setNum(endNum);</span><br><span class="line">            destCart.setModifiedUser(modifiedUser);</span><br><span class="line">            destCart.setModifiedTime(modifiedTime);</span><br><span class="line">            <span class="comment">//执行更新操作</span></span><br><span class="line">            <span class="keyword">return</span> cartMapper.updateCartInfo(destCart);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-13"><a href="#后端-控制层-13" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.无异常，不需要处理</p><p>2.设计请求</p><p>请求地址：&#x2F;cart&#x2F;addCart</p><p>请求参数：Cart cart, HttpSession session</p><p>请求类型：post</p><p>响应类型：JsonResult&lt; void&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/addCart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">addCart</span><span class="params">(Cart cart, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//从session中区域uid和用户名</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    cart.setUid(uid);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> cartService.addCart(cart, username, date, username, date);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;服务器或数据库异常，加入购物车失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-14"><a href="#前端页面-14" class="headerlink" title="前端页面"></a>前端页面</h4><p>①给加入购物车绑定点击事件，点击就发送ajax请求，成功则提示添加成功，在购物车等您结算！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addProductToCart</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> pid = <span class="title function_">getPidFromLastHtml</span>();</span><br><span class="line">    $(<span class="string">&quot;.go-cart&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> price = $(<span class="string">&quot;#product-price&quot;</span>).<span class="title function_">text</span>()</span><br><span class="line">        <span class="keyword">let</span> num = $(<span class="string">&quot;#num&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/cart/addCart&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;<span class="attr">pid</span>:pid,<span class="attr">price</span>:price,<span class="attr">num</span>:num&#125;,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;已成功加入购物车，在购物车等您结算哟！&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            error : <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;服务器出现错误，加入购物车失败！&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="展示购物车"><a href="#展示购物车" class="headerlink" title="展示购物车"></a>展示购物车</h3><h4 id="后端-持久层-14"><a href="#后端-持久层-14" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.编写sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>根据用户uid查询信息</span><br><span class="line"><span class="keyword">SELECT</span> c.cid,c.pid,c.`uid`,c.price,c.num,p.title,p.image,p.`price` <span class="keyword">AS</span> real_price</span><br><span class="line">                    <span class="keyword">FROM</span> t_cart c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_product p</span><br><span class="line">                    <span class="keyword">ON</span> c.pid <span class="operator">=</span> p.`id`</span><br><span class="line">                    <span class="keyword">WHERE</span> c.`uid` <span class="operator">=</span> #&#123;uid&#125;</span><br><span class="line">                    <span class="keyword">order</span> <span class="keyword">by</span> c.created_time <span class="keyword">desc</span>                   </span><br></pre></td></tr></table></figure><p>2.在对应的mapper接口定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据uid查询用户购物车信息</span></span><br><span class="line">List&lt;CartVo&gt; <span class="title function_">queryAllCartsByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><p>3.编写mapper的映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-14"><a href="#后端-业务层-14" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常</p><p>2.定义抽象方法</p><p>3.编写具体业务处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据uid查询用户CartVo信息的抽象方法</span></span><br><span class="line">List&lt;CartVo&gt; <span class="title function_">queryCartByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line"><span class="comment">//根据uid查询用户购物车信息的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CartVo&gt; <span class="title function_">queryCartByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cartMapper.queryAllCartsByUid(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-14"><a href="#后端-控制层-14" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.无异常，不需要处理</p><p>2.设计请求</p><p>请求地址：&#x2F;cart&#x2F;showCarts</p><p>请求参数：HttpSession session</p><p>请求类型：get</p><p>响应类型：JsonResult&lt; List&lt; Cart&gt;&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理查询用户购物车信息的请求</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/showCarts&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;CartVo&gt;&gt; <span class="title function_">showCarts</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line">    List&lt;CartVo&gt; carts = cartService.queryCartByUid(uid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,carts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-15"><a href="#前端页面-15" class="headerlink" title="前端页面"></a>前端页面</h4><p>①用户点击了购物车，自动发送ajax请求，根据返回的内容填充购物车的内容</p><ul><li>代码量过大，需要到cart.html的script标签中查看</li></ul><hr><h3 id="删除商品"><a href="#删除商品" class="headerlink" title="删除商品"></a>删除商品</h3><h4 id="后端-持久层-15"><a href="#后端-持久层-15" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句编写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>根据cid删除指定商品</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_cart <span class="keyword">where</span> cid <span class="operator">=</span> #&#123;cid&#125;</span><br></pre></td></tr></table></figure><p>2.定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据cid删除指定商品</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteCartByCid</span><span class="params">(Integer cid)</span>;</span><br></pre></td></tr></table></figure><p>3.编写mapper映射文件</p><h4 id="后端-业务层-15"><a href="#后端-业务层-15" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.异常规划，删除失败</p><p>2.定义抽象方法</p><p>3.编写具体的业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据cid删除指定的购物车商品</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteCartByCid</span><span class="params">(Integer cid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据cids删除cart信息的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteCartByCid</span><span class="params">(Integer cid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> cartMapper.deleteCartByCid(cid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeleteException</span>(<span class="string">&quot;服务器异常，删除失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-15"><a href="#后端-控制层-15" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.已将异常加入过，不需要重复</p><p>2.设计请求</p><p>请求路径：&#x2F;cart&#x2F;deleteCart</p><p>请求参数：Integer[ ] cids</p><p>请求方式：post</p><p>响应类型：JsonResult&lt; Void&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理根据cids内的指定cid删除cart的请求</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/deleteCart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">deleteCartByCid</span><span class="params">(Integer[] cids)</span>&#123;</span><br><span class="line">    <span class="comment">//遍历执行删除操作</span></span><br><span class="line">    <span class="keyword">for</span> (Integer cid: cids) &#123;</span><br><span class="line">        cartService.deleteCartByCid(cid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="前端页面-16"><a href="#前端页面-16" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li>考虑到提高代码复用性，决定前端无论单个还是多个cid都以参数传递，后端以数组接受</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给每个删除按钮绑定点击事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delCartItem</span>(<span class="params">cids</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&quot;确定要删除这条商品吗？&quot;</span>))&#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/cart/deleteCart&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: <span class="string">&quot;cids=&quot;</span> + cids,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;删除成功&quot;</span>)</span><br><span class="line">                <span class="title function_">showUserCarts</span>();</span><br><span class="line">                $(<span class="string">&quot;#selectCount&quot;</span>).<span class="title function_">empty</span>().<span class="title function_">html</span>(<span class="number">0</span>)</span><br><span class="line">                $(<span class="string">&quot;#selectTotal&quot;</span>).<span class="title function_">empty</span>().<span class="title function_">html</span>(<span class="number">0</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;删除失败&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给批量删除按钮绑定点击事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selDelCart</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//获取页面中购物车的商品数量</span></span><br><span class="line">    <span class="keyword">let</span> trNum = $(<span class="string">&quot;#cart-list tr&quot;</span>).<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> chooseNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> deletedCids = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">let</span> char = <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; trNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">&quot;#cid&quot;</span>+ i).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>))&#123;</span><br><span class="line">            chooseNum += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">let</span> cids = <span class="title class_">JSON</span>.<span class="title function_">parse</span>($(<span class="string">&quot;#cid&quot;</span>+i).<span class="title function_">val</span>());</span><br><span class="line">            <span class="keyword">let</span> str = <span class="string">&quot;cids=&quot;</span> + cids</span><br><span class="line">            <span class="keyword">if</span> (i === trNum -<span class="number">1</span>)&#123;</span><br><span class="line">                deletedCids += str</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                deletedCids += str + char</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (chooseNum === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请先选择需要删除的购物车商品！！！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&quot;确定要删除这些商品吗？&quot;</span>))&#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/cart/deleteCart&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: deletedCids,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;批量删除成功&quot;</span>)</span><br><span class="line">                <span class="title function_">showUserCarts</span>();</span><br><span class="line">                $(<span class="string">&quot;#selectCount&quot;</span>).<span class="title function_">html</span>(<span class="number">0</span>)</span><br><span class="line">                $(<span class="string">&quot;#selectTotal&quot;</span>).<span class="title function_">html</span>(<span class="number">0</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;删除失败&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="数量增减"><a href="#数量增减" class="headerlink" title="数量增减"></a>数量增减</h3><h4 id="后端-持久层-16"><a href="#后端-持久层-16" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.编写sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>根据cid更新用户商品数量</span><br><span class="line"><span class="keyword">update</span> t_cart <span class="keyword">set</span> num <span class="operator">=</span> #&#123;num&#125;,modified_user <span class="operator">=</span> #&#123;modifiedUser&#125;,modified_time <span class="operator">=</span> #&#123;modifiedTime&#125;</span><br><span class="line">                          <span class="keyword">where</span> cid <span class="operator">=</span> #&#123;cid&#125;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>根据cid查询用户cart信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_cart <span class="keyword">where</span> cid <span class="operator">=</span> #&#123;cid&#125;;</span><br></pre></td></tr></table></figure><p>2.定义抽象方法</p><p>3.编写mapper映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-16"><a href="#后端-业务层-16" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常，更新失败,数据不存在</p><p>2.定义service接口的抽象方法</p><p>3.编写具体的处理逻辑(已开发过无需重复)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据cid查询用户cart信息</span></span><br><span class="line">Cart <span class="title function_">queryCartByCid</span><span class="params">(Integer cid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateCartNumByCid</span><span class="params">(Integer num, String modifiedUser, Date modifiedTime, Integer cid)</span> &#123;</span><br><span class="line">    <span class="comment">//现根据cid查询此数据是否存在</span></span><br><span class="line">    <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> cartMapper.queryCartByCid(cid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cart == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CartInfoNotExistsException</span>(<span class="string">&quot;购物车内无这条数据，增加失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cartMapper.UpdateCartNumByCid(num,modifiedUser,modifiedTime,cid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-16"><a href="#后端-控制层-16" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.处理异常，将异常加入到异常处理</p><p>2.设计请求</p><p>请求地址：&#x2F;cart&#x2F;updateCart</p><p>请求参数：Integer num,Integer cid,HttpSession session</p><p>请求类型：post</p><p>响应类型：JsonResult&lt; void&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/updateCart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">updateCateByCid</span><span class="params">(Integer num,Integer cid,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">modifiedUser</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">modifiedTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    cartService.updateCartNumByCid(num,modifiedUser,modifiedTime,cid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="前端页面-17"><a href="#前端页面-17" class="headerlink" title="前端页面"></a>前端页面</h4><p>① 给增加和减少按钮绑定点击事件，在发送ajax请求之前先把数据减少或增加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按加号数量增，减号的逻辑同理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addNum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="built_in">parseInt</span>($(<span class="string">&quot;#goodsCount&quot;</span>+num).<span class="title function_">val</span>());</span><br><span class="line">    $(<span class="string">&quot;#goodsCount&quot;</span>+num).<span class="title function_">val</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">calcRow</span>(num);</span><br><span class="line">    <span class="keyword">let</span> cid = $(<span class="string">&quot;#cid&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    <span class="keyword">let</span> updateNum = $(<span class="string">&quot;#goodsCount&quot;</span>+num).<span class="title function_">val</span>()</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        url : <span class="string">&quot;http://localhost:8080/cart/updateCart&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;<span class="attr">cid</span>:cid,<span class="attr">num</span>:updateNum&#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;增加失败，请等待攻城狮修复！！&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算单行小计价格的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calcRow</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="comment">//取单价</span></span><br><span class="line">    <span class="keyword">var</span> vprice = <span class="built_in">parseFloat</span>($(<span class="string">&quot;#goodsPrice&quot;</span>+num).<span class="title function_">html</span>());</span><br><span class="line">    <span class="comment">//取数量</span></span><br><span class="line">    <span class="keyword">var</span> vnum = <span class="built_in">parseFloat</span>($(<span class="string">&quot;#goodsCount&quot;</span>+num).<span class="title function_">val</span>());</span><br><span class="line">    <span class="comment">//小计金额</span></span><br><span class="line">    <span class="keyword">var</span> vtotal = vprice * vnum;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    $(<span class="string">&quot;#goodsCast&quot;</span>+num).<span class="title function_">html</span>(<span class="string">&quot;¥&quot;</span> + vtotal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="商品结算"><a href="#商品结算" class="headerlink" title="商品结算"></a>商品结算</h3><h4 id="后端-持久层-17"><a href="#后端-持久层-17" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><ul><li>关于展示用户收货地址所需要的在前面写好了因此在这不再重复</li></ul><p>1.sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>根据用户cid查询对应的cartVo信息</span><br><span class="line"><span class="keyword">SELECT</span> c.cid,c.pid,c.`uid`,c.price,c.num,p.title,p.image,p.`price` <span class="keyword">AS</span> real_price</span><br><span class="line">                               <span class="keyword">FROM</span> t_cart c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_product p</span><br><span class="line">                               <span class="keyword">ON</span> c.pid <span class="operator">=</span> p.`id`</span><br><span class="line">                               <span class="keyword">WHERE</span> c.`cid` <span class="operator">=</span> #&#123;cid&#125;</span><br><span class="line">                               <span class="keyword">order</span> <span class="keyword">by</span> c.created_time <span class="keyword">desc</span>             </span><br></pre></td></tr></table></figure><p>2.mapper抽象接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据cid查询返回CartVo对象</span></span><br><span class="line">CartVo <span class="title function_">queryCartVoByCid</span><span class="params">(Integer cid)</span>;</span><br></pre></td></tr></table></figure><p>3.编写mapper的映射文件</p><h4 id="后端-业务层-17"><a href="#后端-业务层-17" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常。没有异常</p><p>2.定义抽象接口</p><p>3.编写具体逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据cid查询返回CartVo对象</span></span><br><span class="line">CartVo <span class="title function_">queryCartVoByCid</span><span class="params">(Integer cid)</span>;</span><br><span class="line"><span class="comment">//根据cids数组批量查询对应订单信息</span></span><br><span class="line">List&lt;Cart&gt; <span class="title function_">queryCartByCids</span><span class="params">(Integer[] cids)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据cid返回CartVo对象的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CartVo <span class="title function_">queryCartVoByCid</span><span class="params">(Integer cid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cartMapper.queryCartVoByCid(cid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据cids数组的内容查询cart信息的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CartVo&gt; <span class="title function_">queryCartByCids</span><span class="params">(Integer[] cids)</span> &#123;</span><br><span class="line">    List&lt;CartVo&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Integer cid : cids) &#123;</span><br><span class="line">        <span class="type">CartVo</span> <span class="variable">destCartVo</span> <span class="operator">=</span> cartMapper.queryCartVoByCid(cid);</span><br><span class="line">        list.add(destCartVo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后端-控制层-17"><a href="#后端-控制层-17" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.没有异常需要处理</p><p>2.设计请求</p><p>请求地址：&#x2F;cart&#x2F;queryCids</p><p>请求参数：Integer[] cids</p><p>请求类型：get</p><p>响应类型：JsonResult&lt;List&lt; Cart&gt; &gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理cids数组的内容查询cart信息的请求</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/queryCids&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;Cart&gt;&gt; <span class="title function_">queryCids</span><span class="params">(Integer[] cids)</span>&#123;</span><br><span class="line">    List&lt;Cart&gt; list = cartService.queryCartByCids(cids);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-18"><a href="#前端页面-18" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">showOrderItem</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//自动发送ajax请求查询url地址上的cid信息</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        url : <span class="string">&quot;http://localhost:8080/cart/queryCids&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>),</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">empty</span>()</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.<span class="property">data</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">let</span> cartVo = res.<span class="property">data</span>[i]</span><br><span class="line">                <span class="keyword">let</span> totalPrice = cartVo.<span class="property">price</span> * cartVo.<span class="property">num</span></span><br><span class="line">                str =   <span class="string">&quot;&lt;tr&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;td&gt;&lt;img src=..&quot;</span> + cartVo.<span class="property">image</span> + <span class="string">&quot;collect.png&quot;</span> + <span class="string">&quot; class=&#x27;img-responsive&#x27; /&gt;&lt;/td&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;td&gt;&quot;</span> + cartVo.<span class="property">title</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;td&gt;¥&lt;span&gt;&quot;</span> + cartVo.<span class="property">price</span> + <span class="string">&quot;&lt;/span&gt;&lt;/td&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;td&gt;&quot;</span> + cartVo.<span class="property">num</span> + <span class="string">&quot;&lt;/td&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;td&gt;&lt;span&gt;&quot;</span> + totalPrice + <span class="string">&quot;&lt;/span&gt;&lt;/td&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&lt;/tr&gt;&quot;</span></span><br><span class="line">                $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">append</span>(str)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;增加失败，请等待攻城狮修复！！&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//页面加载完成时自动发送</span></span><br><span class="line">    <span class="title function_">showOrderItem</span>();</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="订单管理"><a href="#订单管理" class="headerlink" title="订单管理"></a>订单管理</h2><h3 id="创建数据表-5"><a href="#创建数据表-5" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order (</span><br><span class="line">oid <span class="type">INT</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">uid <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">recv_name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;收货人姓名&#x27;</span>,</span><br><span class="line">recv_phone <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;收货人电话&#x27;</span>,</span><br><span class="line">recv_province <span class="type">VARCHAR</span>(<span class="number">15</span>) COMMENT <span class="string">&#x27;收货人所在省&#x27;</span>,</span><br><span class="line">recv_city <span class="type">VARCHAR</span>(<span class="number">15</span>) COMMENT <span class="string">&#x27;收货人所在市&#x27;</span>,</span><br><span class="line">recv_area <span class="type">VARCHAR</span>(<span class="number">15</span>) COMMENT <span class="string">&#x27;收货人所在区&#x27;</span>,</span><br><span class="line">recv_address <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;收货详细地址&#x27;</span>,</span><br><span class="line">total_price <span class="type">BIGINT</span> COMMENT <span class="string">&#x27;总价&#x27;</span>,</span><br><span class="line">status <span class="type">INT</span> COMMENT <span class="string">&#x27;状态：0-未支付，1-已支付，2-已取消，3-已关闭，4-已完成&#x27;</span>,</span><br><span class="line">order_time DATETIME COMMENT <span class="string">&#x27;下单时间&#x27;</span>,</span><br><span class="line">pay_time DATETIME COMMENT <span class="string">&#x27;支付时间&#x27;</span>,</span><br><span class="line">created_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">created_time DATETIME COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">modified_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;修改人&#x27;</span>,</span><br><span class="line">modified_time DATETIME COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (oid)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order_item (</span><br><span class="line">id <span class="type">INT</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;订单中的商品记录的id&#x27;</span>,</span><br><span class="line">oid <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;所归属的订单的id&#x27;</span>,</span><br><span class="line">pid <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品的id&#x27;</span>,</span><br><span class="line">title <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品标题&#x27;</span>,</span><br><span class="line">image <span class="type">VARCHAR</span>(<span class="number">500</span>) COMMENT <span class="string">&#x27;商品图片&#x27;</span>,</span><br><span class="line">price <span class="type">BIGINT</span> COMMENT <span class="string">&#x27;商品价格&#x27;</span>,</span><br><span class="line">num <span class="type">INT</span> COMMENT <span class="string">&#x27;购买数量&#x27;</span>,</span><br><span class="line">created_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">created_time DATETIME COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">modified_user <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;修改人&#x27;</span>,</span><br><span class="line">modified_time DATETIME COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="创建实体类-5"><a href="#创建实体类-5" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应数据表t_order的实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer oid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String recvName;</span><br><span class="line">    <span class="keyword">private</span> String recvPhone;</span><br><span class="line">    <span class="keyword">private</span> String recvProvince;</span><br><span class="line">    <span class="keyword">private</span> String recvCity;</span><br><span class="line">    <span class="keyword">private</span> String recvArea;</span><br><span class="line">    <span class="keyword">private</span> String recvAddress;</span><br><span class="line">    <span class="keyword">private</span> Long totalPrice;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> Date orderTime;</span><br><span class="line">    <span class="keyword">private</span> Date payTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应数据表t_order_item的实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer oid;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建订单"><a href="#创建订单" class="headerlink" title="创建订单"></a>创建订单</h3><h4 id="后端-持久层-18"><a href="#后端-持久层-18" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句编写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>向<span class="keyword">order</span>表中插入一条<span class="keyword">order</span>数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_order(uid,recv_name,recv_phone,recv_province,recv_city,recv_area,recv_address,</span><br><span class="line">                   total_price,status,order_time,pay_time,created_user,created_time,modified_user,modified_time)</span><br><span class="line">                   <span class="keyword">values</span>(</span><br><span class="line">                       #&#123;uid&#125;,#&#123;recvName&#125;,#&#123;recvPhone&#125;,#&#123;recvProvince&#125;,#&#123;recvCity&#125;,#&#123;recvArea&#125;,#&#123;recvAddress&#125;,</span><br><span class="line">                       #&#123;totalPrice&#125;,#&#123;status&#125;,#&#123;orderTime&#125;,#&#123;payTime&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,</span><br><span class="line">                       #&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;)</span><br><span class="line">                       </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>向order_item表中插入一条orderItem数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_order_item(oid,pid,title,image,price,num,</span><br><span class="line">                        created_user,created_time,modified_user,modified_time)</span><br><span class="line">                        <span class="keyword">values</span>(#&#123;oid&#125;,#&#123;pid&#125;,#&#123;title&#125;,#&#123;image&#125;,#&#123;price&#125;,</span><br><span class="line">                               #&#123;num&#125;,#&#123;createdUser&#125;,#&#123;createdTime&#125;,#&#123;modifiedUser&#125;,#&#123;modifiedTime&#125;</span><br><span class="line">                          )</span><br></pre></td></tr></table></figure><p>2.定义mapper接口和抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类Order对应的mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    <span class="comment">//插入一条order订单数据</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertOneOrder</span><span class="params">(Order order)</span>;</span><br><span class="line">    <span class="comment">//向order_item表中插入一条orderItem数据</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertOneOrderItem</span><span class="params">(OrderItem orderItem)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写mapper的映射文件</p><p>设置自定义的结果集映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-18"><a href="#后端-业务层-18" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常，插入失败</p><p>2.定义service层接口和抽象方法</p><p>3.编写具体的处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理添加order订单数据的抽象方法</span></span><br><span class="line">Order <span class="title function_">insertOrder</span><span class="params">(Integer aid, Long totalPrice, Integer uid, String username)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理添加orderItem数据的抽象方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertOrderItem</span><span class="params">(Integer oid, Integer cid, Integer num, String username)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的处理逻辑</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IOrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> IAddressService addressService;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> ICartService cartService;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> IProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">insertOrder</span><span class="params">(Integer aid,Long totalPrice,Integer uid,String username)</span> &#123;</span><br><span class="line">        <span class="comment">//根据控制层传入的aid进行查询</span></span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressService.queryAddressByAid(aid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个用于向持久层传输的Order实体类对象</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//补全order对象的空白字段</span></span><br><span class="line">        order.setUid(uid);</span><br><span class="line">        order.setRecvName(address.getName());</span><br><span class="line">        order.setRecvPhone(address.getPhone());</span><br><span class="line">        order.setRecvProvince(address.getProvinceName());</span><br><span class="line">        order.setRecvCity(address.getCityName());</span><br><span class="line">        order.setRecvArea(address.getAreaName());</span><br><span class="line">        order.setRecvAddress(address.getAddress());</span><br><span class="line">        order.setTotalPrice(totalPrice);</span><br><span class="line">        order.setStatus(<span class="number">0</span>); <span class="comment">//表示未支付</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">createdTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        order.setOrderTime(createdTime);</span><br><span class="line">        order.setPayTime(<span class="literal">null</span>);</span><br><span class="line">        order.setCreatedUser(username);</span><br><span class="line">        order.setModifiedUser(username);</span><br><span class="line">        order.setCreatedTime(createdTime);</span><br><span class="line">        order.setModifiedTime(createdTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用持久层进行插入</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> orderMapper.insertOneOrder(order);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;服务器出现错误，创建订单失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//根据oid查询指定的订单，并返回给控制层</span></span><br><span class="line">        <span class="keyword">return</span> orderMapper.queryOrderByOid(order.getOid());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertOrderItem</span><span class="params">(Integer oid, Integer cid, Integer num, String username)</span> &#123;</span><br><span class="line">        <span class="comment">//根据cid查询订单获取pid</span></span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> cartService.queryCartByCid(cid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出pid的值</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">pid</span> <span class="operator">=</span> cart.getPid();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据pid查询商品信息</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.queryProductById(pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个用于向持久层传输的OrderItem实体类对象</span></span><br><span class="line">        <span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//补全orderItem对象的空白字段</span></span><br><span class="line">        orderItem.setOid(oid);</span><br><span class="line">        orderItem.setPid(pid);</span><br><span class="line">        orderItem.setTitle(product.getTitle());</span><br><span class="line">        orderItem.setImage(product.getImage());</span><br><span class="line">        orderItem.setPrice(product.getPrice());</span><br><span class="line">        orderItem.setNum(num);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">createdTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        orderItem.setCreatedUser(username);</span><br><span class="line">        orderItem.setCreatedTime(createdTime);</span><br><span class="line">        orderItem.setModifiedUser(username);</span><br><span class="line">        orderItem.setModifiedTime(createdTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用持久层进行插入</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> orderMapper.insertOneOrderItem(orderItem);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;服务器出现错误，创建订单失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-18"><a href="#后端-控制层-18" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.处理异常，已添加无需再重复</p><p>2.设计请求</p><p>请求路径： ①&#x2F;order&#x2F;createOrder  ②&#x2F;order&#x2F;createOrderItem</p><p>请求参数：①Integer aid,Long totalPrice,HttpSession session</p><p>​②Integer oid,Integer cid,Integer pid,Integer num,HttpSession session</p><p>请求类型：post</p><p>响应类型：①JsonResult&lt; Order&gt; ②①JsonResult&lt; Void&gt;</p><p>3.创建一个新的控制器处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/createOrder&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Order&gt; <span class="title function_">createOrder</span><span class="params">(Integer aid,Long totalPrice,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//从session中取出用户名和uid</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    <span class="comment">//调用业务层方法执行插入操作</span></span><br><span class="line">    orderService.insertOrder(aid,totalPrice,uid,username);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/createOrderItem&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">createOrderItem</span><span class="params">(Integer oid,Integer cid,Integer num,HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//从session中取出用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用业务层方法执行插入操作</span></span><br><span class="line">        orderService.insertOrderItem(oid,cid,num,username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-19"><a href="#前端页面-19" class="headerlink" title="前端页面"></a>前端页面</h4><p>①在用户选择了商品来到确认订单页面之后</p><p>②确认商品无误之后，点击在线支付按钮，那么在点击之后就要生成order订单，</p><p>​生成order订单项就应该发送一个ajax请求，且这个ajax请求生成的oid订单号需要返回给前端</p><p>​在前端需要时带着这个订单号跳转到下一个指定页面</p><p>③且将oid传入另一个方法中，在这个方法内获取客户所勾选的商品的数量，</p><p>​并根据这个数量将获取每一个商品cid，发送与商品个数一致的次数的ajax请求</p><p>​并且每个ajax都需要带着cid和num和oid</p><ul><li><font color='red'><strong>javaScript代码太长，不予展示，需要到项目于的&#x2F;web&#x2F;orderConfirm.htmll页面查看</strong></font></li></ul><hr><h3 id="集成支付宝沙箱支付"><a href="#集成支付宝沙箱支付" class="headerlink" title="集成支付宝沙箱支付"></a>集成支付宝沙箱支付</h3><p>①引入依赖到pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入支付宝沙箱支付依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alipay-sdk-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.23.26.ALL<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②编写alipayConfig用于设置请求属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支付宝沙箱支付配置类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayConfig</span> &#123;</span><br><span class="line">    <span class="comment">//自己的appId</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">appId</span> <span class="operator">=</span> <span class="string">&quot;2021000121634026&quot;</span>;</span><br><span class="line">    <span class="comment">//应用私有秘钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">appPrivateKey</span> <span class="operator">=</span> <span class="string">&quot;MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDDnIWV/KsE+T3hpSr7+H//GdKsTbVcc/fpsp/RI9Aqfg0z009TrUI+NQ9+6mI4YxQUZnnUM1sRcnAQI4ivnGu2qkZFoot7gv50jwvZD8amIe6b3Joed2DBOKps2IJuyOwjV4Ae+WBJW5bSNiuuYu6UjanX69nK8TU6y6K39p02YnDqC47Z0veKVbAmpbsOnks1gGd+Cgcm5fSsdcx+aGKSt6YEJuYkqri9lUExHSYkZLNfzzAXRujyLCk0lLHdzUNDoatIyukk1HhCyvLosg3oaCtvIzqGC8/XHCEQ5r8JD4nKd/gGoyolWzhJvFcFkKmHjPZA8vT8TP1ZC1z1m1DvAgMBAAECggEBAI0C7JnvByoSsrVTZ+U0grDXYLOtYSxAvVrO1b7iXlIDhGjzz5+2qqZFgeIv/JZBdlwuc2yxiNjO8lHwC7zsugl4Pig8wOhMyjokVJopcT6Z/3SEVuXXkPw5aUIF4iES3oersESj6PF5AQSQ4HRaBTs51FI/R0WxFHpKCgcr1LE6inEn862CvZlbh2Cqh6rqBxB1ESi4eRhAj+FsJlczqWDCLn2dG1Ki7IhkuApdNFs9lurGeXGu/FBphaaprAiTVWuxyBWIdW5TYACjkNZ+oXrzCJK6t0DWsmxAbaZHMiLIVIAypZ6p8/kf/b70zXRYhkXQ6KUKpo983G6dBBPUF0ECgYEA7ta+jK3OZvzwZQeaBXYS4vi28jgpLg/v/DFpdcwaAShKEms/R7XZ8wZ9y4jabQKOuyJX69NS7dhfNv4wdW976BkIevwANM6haFSh5bJsq+EK8fwXEPez2uKPLsIdSgBwwh6En4vClOUTOOprLuyTXM7mQNqSW+AsaLmlaGYDuhcCgYEA0aqkcJMysXnGIc7nbJDiWvsRihe5WMsMCOY6vtjVPMh/qEasT9Hxhv4Gs+Pso15MNxhDuRddp+qgXyuUXGkeii8h+p2MgO5O5tA1T74APaDclmyiuc27Rj27Cc9mbFTWOk5txrXgzqEJjw9HudUHTJmpKoqI2aVEK73X6AdB3ukCgYAqHwk/+i8ajqU+zBZnvCkcikyJb0oj63+hdH1q3vH/HkHh+bQRS4sChzSMPrh23Sqa6jWjS4OmmrBAHJgjPeQWTMPoHKVUqtRgd/yNa+gqb+fkQVc4ENdRVP93eZh8wpMgSQ2OrbFFXRkEwqLghax/g6Wr7mA9f82VMphvTv59RQKBgA3YnxNwJSDjUdpZt57L0qb/faEJAAyFHD5aNfb0iuCAvS13vVloG/M2Q2sN2krPp2jcCVzn1h+Itx6R2jJgHswxYKUUUnsRQdSsW1jwy0NGpEqq0fRDSeLRoNB9Cd6Nm7guBcHhsP70U5VHBQ2Yq+q7GxjcHT2CVIYu+1svX4JBAoGARyBB9IjgM9dH0cH8djojC2qlH7Qar9bbvl55i9EQY51d1J/bC5JBE/CAYu0s1MmIatigcJ6A7FyvJ+nnow+qr4tegi5CG76v+Ue/IrgZXJZyDqMBrHorn/SwRXleOj2gjfxkQ8mh0OkrIntbdD6SDnvtXkxcVkfX9ICY5VIA4DA=&quot;</span>;</span><br><span class="line">    <span class="comment">//支付宝公钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">alipayPublicKey</span> <span class="operator">=</span> <span class="string">&quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjtedJ8C1NIO3r4vuMThcvTMZxqO3Jki5VYPfkmnraA/PIKXXgsfOdoSWxCsiqPMIBMRT3Oyk1EsxgAeFBKTFaSM5LC8oinTXFbkv+3XEuOjtfqbp0oIgu9pWfJQDL2gIVSbm3VKmdE4UtJ36nu3hyuTT3U19QQsKVgxMDWHCOIw0eCHcJm1xDPj0zmagL3jC7576sXHcnFxEKARGugMpP9bkBgvFkjKrnkQfMAz3OO8vUSC0lCGo2UrSwhyD6zqXVz39sIduVpKTTg+wpAJQ/RhBhLXNw4JW3UaZpX2BZbmqEx91Hpr+O/95Z90cTqT+rwyu6uW612B5bCPnKa+BCQIDAQAB&quot;</span>;</span><br><span class="line">    <span class="comment">//异步回调地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">notifyUrl</span> <span class="operator">=</span> <span class="string">&quot;http://h64hsr.natappfree.cc/alipay/notifyNotice&quot;</span>;</span><br><span class="line">    <span class="comment">//同步回调地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">returnUrl</span> <span class="operator">=</span> <span class="string">&quot;http://h64hsr.natappfree.cc/alipay/returnNotice&quot;</span>;</span><br><span class="line">    <span class="comment">//推荐使用这个秘钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">signType</span> <span class="operator">=</span> <span class="string">&quot;RSA2&quot;</span>;</span><br><span class="line">    <span class="comment">//使用的编码格式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">charset</span> <span class="operator">=</span> <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line">    <span class="comment">//支付宝默认网关</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">gatewayUrl</span> <span class="operator">=</span> <span class="string">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③创建alipayController，并编写pay接口、异步回调接口、同步回调接口</p><ul><li><p>由于<font color='red'><strong>在异步回调会出现session失效</strong></font>的问题，解决方法 —&gt; <a href="https://blog.csdn.net/woniu__/article/details/105320823?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-2-105320823-null-null.pc_agg_new_rank&utm_term=%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F&spm=1000.2123.3001.4430">如何解决异步回调session失效</a></p></li><li><p>异步接口方法一般用于在支付后进行数据库的修改操作，</p><p>而同步接口方法一般是用于向用户显示已支付完成的作用，</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理支付宝沙箱支付的接口</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/alipay&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliPayController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IOrderService orderService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 处理在线支付的请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/7/25</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oid 订单id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> totalPrice 订单总金额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/pay&quot;,produces = &quot;text/html;charset=UTF-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">goAlipay</span><span class="params">(String oid,String totalPrice,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得初始化的AlipayClient</span></span><br><span class="line">        <span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(AlipayConfig.gatewayUrl, AlipayConfig.appId,</span><br><span class="line">                AlipayConfig.appPrivateKey, <span class="string">&quot;json&quot;</span>, AlipayConfig.charset, AlipayConfig.alipayPublicKey,</span><br><span class="line">                AlipayConfig.signType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置请求参数</span></span><br><span class="line">        <span class="type">AlipayTradePagePayRequest</span> <span class="variable">alipayRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradePagePayRequest</span>();</span><br><span class="line">        alipayRequest.setReturnUrl(AlipayConfig.returnUrl);</span><br><span class="line">        alipayRequest.setNotifyUrl(AlipayConfig.notifyUrl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 商户订单号，商户网站订单系统中唯一订单号，必填</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">out_trade_no</span> <span class="operator">=</span> oid;</span><br><span class="line">        <span class="comment">// 付款金额，必填</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">total_amount</span> <span class="operator">=</span> totalPrice;</span><br><span class="line">        <span class="comment">// 订单名称，必填</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="string">&quot;支付宝沙箱测试商品支付&quot;</span>;</span><br><span class="line">        <span class="comment">// 商品描述，可空</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 该笔订单允许的最晚付款时间，逾期将关闭交易。取值范围：1m～15d。m-分钟，h-小时，d-天，1c-当天（1c-当天的情况下，无论交易何时创建，都在0点关闭）。</span></span><br><span class="line">        <span class="comment">// 该参数数值不接受小数点， 如 1.5h，可转换为 90m。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">timeout_express</span> <span class="operator">=</span> <span class="string">&quot;1c&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从session中取出异步需要用的uid</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">str</span> <span class="operator">=</span> (Integer) request.getSession().getAttribute(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">passback_params</span> <span class="operator">=</span> String.valueOf(str);</span><br><span class="line">        <span class="comment">//对取得的数据进行URLEncoder编码，这一步不做会报错</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uidStr</span> <span class="operator">=</span> URLEncoder.encode(passback_params,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将编码后的数据封装在alipayRequest对象中，参数名字一定要是passback_params才能在异步通知时返回</span></span><br><span class="line">        <span class="comment">//至于参数的变量值这没有要求，只需要与上方编码后的一样即可</span></span><br><span class="line">        alipayRequest.setBizContent(<span class="string">&quot;&#123;\&quot;out_trade_no\&quot;:\&quot;&quot;</span> + out_trade_no + <span class="string">&quot;\&quot;,&quot;</span> + <span class="string">&quot;\&quot;total_amount\&quot;:\&quot;&quot;</span> + total_amount</span><br><span class="line">                + <span class="string">&quot;\&quot;,&quot;</span> + <span class="string">&quot;\&quot;subject\&quot;:\&quot;&quot;</span> + subject + <span class="string">&quot;\&quot;,&quot;</span> + <span class="string">&quot;\&quot;body\&quot;:\&quot;&quot;</span> + body + <span class="string">&quot;\&quot;,&quot;</span> + <span class="string">&quot;\&quot;timeout_express\&quot;:\&quot;&quot;</span></span><br><span class="line">                + timeout_express + <span class="string">&quot;\&quot;,&quot;</span> + <span class="string">&quot;\&quot;passback_params\&quot;:\&quot;&quot;</span> + uidStr + <span class="string">&quot;\&quot;,&quot;</span></span><br><span class="line">                + <span class="string">&quot;\&quot;product_code\&quot;:\&quot;FAST_INSTANT_TRADE_PAY\&quot;&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个是请求支付宝后台获取的数据，实际上获取是一个表单，然后他会附带一个自动执行的js方法</span></span><br><span class="line">        <span class="comment">//自动替你执行表单，然后进入表单中支付宝生成的页面</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> alipayClient.pageExecute(alipayRequest).getBody();</span><br><span class="line">        log.info(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 处理异步回调的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/7/25</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/notifyNotice&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alipayNotifyNotice</span><span class="params">(HttpServletRequest request, HttpServletRequest response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;支付成功, 进入异步通知接口...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取支付宝POST过来反馈信息</span></span><br><span class="line">        Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String, String[]&gt; requestParams = request.getParameterMap();</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;String&gt; iter = requestParams.keySet().iterator(); iter.hasNext();) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) iter.next();</span><br><span class="line">            String[] values = (String[]) requestParams.get(name);</span><br><span class="line">            <span class="type">String</span> <span class="variable">valueStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                valueStr = (i == values.length - <span class="number">1</span>) ? valueStr + values[i] : valueStr + values[i] + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 乱码解决，这段代码在出现乱码时使用</span></span><br><span class="line">            <span class="comment">// valueStr = new String(valueStr.getBytes(&quot;ISO-8859-1&quot;), &quot;utf-8&quot;);</span></span><br><span class="line">            params.put(name, valueStr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">signVerified</span> <span class="operator">=</span> AlipaySignature.rsaCheckV1(params, AlipayConfig.alipayPublicKey, AlipayConfig.charset,</span><br><span class="line">                AlipayConfig.signType); <span class="comment">// 调用SDK验证签名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ——请在这里编写您的程序（以下代码仅作参考）——</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 实际验证过程建议商户务必添加以下校验： 1、需要验证该通知数据中的out_trade_no是否为商户系统中创建的订单号，</span></span><br><span class="line"><span class="comment">         * 2、判断total_amount是否确实为该订单的实际金额（即商户订单创建时的金额）， 3、校验通知中的seller_id（或者seller_email)</span></span><br><span class="line"><span class="comment">         * 是否为out_trade_no这笔单据的对应的操作方（有的时候，一个商户可能有多个seller_id/seller_email）</span></span><br><span class="line"><span class="comment">         * 4、验证app_id是否为该商户本身。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (signVerified) &#123;<span class="comment">// 验证成功</span></span><br><span class="line">            <span class="comment">// 商户订单号</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">out_trade_no</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;out_trade_no&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 支付宝交易号</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">trade_no</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;trade_no&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 交易状态</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">trade_status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;trade_status&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 付款金额</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">total_amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;total_amount&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在支付接口中保存在session中uid</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">passback_params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;passback_params&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            <span class="comment">//对传回的数据进行编码的逆过程，对参数进行解码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">uidStr</span> <span class="operator">=</span> URLDecoder.decode(passback_params,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (trade_status.equals(<span class="string">&quot;TRADE_FINISHED&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 判断该笔订单是否在商户网站中已经做过处理</span></span><br><span class="line">                <span class="comment">// 如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序</span></span><br><span class="line">                <span class="comment">// 如果有做过处理，不执行商户的业务程序</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 注意： 尚自习的订单没有退款功能, 这个条件判断是进不来的, 所以此处不必写代码</span></span><br><span class="line">                <span class="comment">// 退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (trade_status.equals(<span class="string">&quot;TRADE_SUCCESS&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 判断该笔订单是否在商户网站中已经做过处理</span></span><br><span class="line">                <span class="comment">// 如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序</span></span><br><span class="line">                <span class="comment">// 如果有做过处理，不执行商户的业务程序</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 注意：</span></span><br><span class="line">                <span class="comment">// 付款完成后，支付宝系统发送该交易状态通知</span></span><br><span class="line">                <span class="comment">// 编写自己的订单支付成功的业务逻辑</span></span><br><span class="line">                <span class="comment">//将上方取到的uid和将订单号转换为包装类</span></span><br><span class="line">                <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> Integer.valueOf(uidStr);</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">oid</span> <span class="operator">=</span> Integer.valueOf(out_trade_no);</span><br><span class="line">                <span class="comment">//调用订单业务层修改订单状态信息</span></span><br><span class="line">                orderService.updateOrderStatusByOid(oid,uid,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                log.info(<span class="string">&quot;********************** 支付成功(支付宝异步通知) **********************&quot;</span>);</span><br><span class="line">                log.info(<span class="string">&quot;* 当前支付用户的id: &#123;&#125;&quot;</span>, passback_params);</span><br><span class="line">                log.info(<span class="string">&quot;* 订单号: &#123;&#125;&quot;</span>, out_trade_no);</span><br><span class="line">                log.info(<span class="string">&quot;* 支付宝交易号: &#123;&#125;&quot;</span>, trade_no);</span><br><span class="line">                log.info(<span class="string">&quot;* 实付金额: &#123;&#125;&quot;</span>, total_amount);</span><br><span class="line">                log.info(<span class="string">&quot;***************************************************************&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;支付成功...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 验证失败</span></span><br><span class="line">            log.info(<span class="string">&quot;支付, 验签失败...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 同步回调方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/7/25</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/returnNotice&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alipayReturnNotice</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;支付成功, 进入同步通知接口...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取支付宝GET过来反馈信息</span></span><br><span class="line">        Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String, String[]&gt; requestParams = request.getParameterMap();</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;String&gt; iter = requestParams.keySet().iterator(); iter.hasNext();) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) iter.next();</span><br><span class="line">            String[] values = (String[]) requestParams.get(name);</span><br><span class="line">            <span class="type">String</span> <span class="variable">valueStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                valueStr = (i == values.length - <span class="number">1</span>) ? valueStr + values[i] : valueStr + values[i] + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 乱码解决，这段代码在出现乱码时使用</span></span><br><span class="line">            valueStr = <span class="keyword">new</span> <span class="title class_">String</span>(valueStr.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            params.put(name, valueStr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">signVerified</span> <span class="operator">=</span> AlipaySignature.rsaCheckV1(params, AlipayConfig.alipayPublicKey, AlipayConfig.charset,</span><br><span class="line">                AlipayConfig.signType); <span class="comment">// 调用SDK验证签名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ——请在这里编写您的程序（以下代码仅作参考）——</span></span><br><span class="line">        <span class="keyword">if</span> (signVerified) &#123;</span><br><span class="line">            <span class="comment">// 商户订单号</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">out_trade_no</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;out_trade_no&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 支付宝交易号</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">trade_no</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;trade_no&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 付款金额</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">total_amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;total_amount&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//同步调用方法中返回到指定的界面</span></span><br><span class="line">            <span class="comment">//携带订单号并跳转到支付成功的界面</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/web/paySuccess.html?oid=&quot;</span> + out_trade_no);</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;********************** 支付成功(支付宝同步通知) **********************&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;* 订单号: &#123;&#125;&quot;</span>, out_trade_no);</span><br><span class="line">            log.info(<span class="string">&quot;* 支付宝交易号: &#123;&#125;&quot;</span>, trade_no);</span><br><span class="line">            log.info(<span class="string">&quot;* 实付金额: &#123;&#125;&quot;</span>, total_amount);</span><br><span class="line">            log.info(<span class="string">&quot;***************************************************************&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;支付, 验签失败...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="支付订单"><a href="#支付订单" class="headerlink" title="支付订单"></a>支付订单</h3><h4 id="后端-持久层-19"><a href="#后端-持久层-19" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#根据订单号查询订单</span><br><span class="line">select * from t_order where oid = #&#123;oid&#125;</span><br><span class="line"></span><br><span class="line">#根据订单号修改状态</span><br><span class="line">update t_order set status = #&#123;status&#125;,pay_time = #&#123;payTime&#125; where oid = #&#123;oid&#125;</span><br><span class="line"></span><br><span class="line">#根据oid能从order_item表中找到对应的orderItem信息</span><br><span class="line">SELECT * FROM t_order_item WHERE oid = #&#123;oid&#125;</span><br><span class="line"></span><br><span class="line">#根据uid和pid删除对应的t_cart表中的数据</span><br><span class="line">DELETE FROM t_cart WHERE uid = #&#123;uid&#125; AND pid = #&#123;pid&#125; </span><br></pre></td></tr></table></figure><p>2.定义mapper接口的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据订单号查询订单</span></span><br><span class="line">Order <span class="title function_">queryOrderByOid</span><span class="params">(Integer oid)</span>;</span><br><span class="line"><span class="comment">//根据订单号修改支付状态和支付时间</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateStatusByOidInt</span><span class="params">(Integer oid, Integer status, Date payTime)</span>;</span><br><span class="line"><span class="comment">//根据oid能从order_item表中找到对应的pid信息</span></span><br><span class="line">List&lt;OrderItem&gt; <span class="title function_">queryOrderItemByOid</span><span class="params">(Integer oid)</span>;</span><br><span class="line"><span class="comment">//根据uid和pid删除对应的t_cart表中的数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteCartByUidAndPid</span><span class="params">(Integer uid,Integer pid)</span>;</span><br></pre></td></tr></table></figure><p>3.编写对应的映射文件</p><ul><li>篇幅较长，就不放这了</li></ul><p>4.单元测试</p><h4 id="后端-业务层-19"><a href="#后端-业务层-19" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常，查询订单不存在，修改订单失败</p><p>2.定义service层的抽象方法</p><p>3.编写具体的业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在ICartService业务层接口编写这个根据uid和pid删除对应的t_cart表中的数据的抽象方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteCartByUidAndPid</span><span class="params">(Integer uid,Integer pid)</span>;</span><br><span class="line"><span class="comment">//在IOrderService业务层接口编写这个根据oid能从order_item表中找到对应的OrderItem信息的抽象方法</span></span><br><span class="line">List&lt;OrderItem&gt; <span class="title function_">queryOrderItemByOid</span><span class="params">(Integer oid)</span>;</span><br><span class="line"><span class="comment">//根据oid修改oid的订单状态的抽象方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateOrderStatusByOid</span><span class="params">(Integer oid,Integer uid,Integer status)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据uid和pid删除对应的t_cart表中的数据的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteCartByUidAndPid</span><span class="params">(Integer uid, Integer pid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> cartMapper.deleteCartByUidAndPid(uid, pid);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeleteException</span>(<span class="string">&quot;服务器异常，删除购物车商品失败!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据订单oid查询orderItem信息的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title function_">queryOrderItemByOid</span><span class="params">(Integer oid)</span> &#123;</span><br><span class="line">    List&lt;OrderItem&gt; orderItems = orderMapper.queryOrderItemByOid(oid);</span><br><span class="line">    <span class="keyword">if</span> (orderItems.size() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrderNotExistsException</span>(<span class="string">&quot;订单不存在！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> orderItems;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据订单oid修改订单状态的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateOrderStatusByOid</span><span class="params">(Integer oid, Integer uid, Integer status)</span> &#123;</span><br><span class="line">    <span class="comment">//先查询一下订单信息</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.queryOrderByOid(oid);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//status == 0代表刚刚创建</span></span><br><span class="line">    <span class="keyword">if</span> (order.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//修改支付时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">payTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        result = orderMapper.updateStatusByOidInt(oid, status,payTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据oid查找具体的OrderItem信息</span></span><br><span class="line">        List&lt;OrderItem&gt; orderItems = orderMapper.queryOrderItemByOid(oid);</span><br><span class="line">        <span class="keyword">for</span> (OrderItem o: orderItems) &#123;</span><br><span class="line">            <span class="comment">//从OrderItem中取得pid</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">pid</span> <span class="operator">=</span> o.getPid();</span><br><span class="line">            <span class="comment">//根据pid和uid删除购物车中的商品</span></span><br><span class="line">            cartService.deleteCartByUidAndPid(uid, pid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//除了status == 0的状况其他的都可以直接修改其状态</span></span><br><span class="line">        <span class="comment">//修改订单状态</span></span><br><span class="line">        result = orderMapper.updateStatusByOidInt(oid,status,order.getPayTime());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;服务器异常，修改订单状态失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-19"><a href="#后端-控制层-19" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.控制异常，将异常加入全局管理</p><p>2.设计请求</p><p>请求地址：①&#x2F;order&#x2F;queryOrder ②&#x2F;order&#x2F;updateStatus</p><p>请求参数：①Integer oid ；②Integet oid，HttpSession session,Integer status</p><p>请求类型：①get ②post</p><p>响应类型：①JsonResult&lt; Order&gt;   ②JsonResult&lt; Void&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理根据订单oid查询order信息的请求</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/queryOrder&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Order&gt; <span class="title function_">queryOrderByOid</span><span class="params">(Integer oid)</span>&#123;</span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.queryOrderByOid(oid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,order);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理根据订单oid修改订单状态的请求</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/updateStatus&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">updateStatusByOid</span><span class="params">(Integer oid,Integer status)</span>&#123;</span><br><span class="line">    <span class="comment">//修改订单状态</span></span><br><span class="line">    orderService.updateOrderStatusByOid(oid,status);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-20"><a href="#前端页面-20" class="headerlink" title="前端页面"></a>前端页面</h4><p>①在页面加载完成的时候根据上个页面传递的参数查询order</p><p>②给确认付款按钮绑定单击事件，发送修改订单状态ajax请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getOrderByOid</span>(<span class="params">oid</span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        url : <span class="string">&quot;/order/queryOrder&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&quot;oid=&quot;</span> + oid,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//修改订单号和支付金额</span></span><br><span class="line">                <span class="keyword">let</span> order = res.<span class="property">data</span></span><br><span class="line">                $(<span class="string">&quot;#orderId&quot;</span>).<span class="title function_">html</span>(order.<span class="property">oid</span>)</span><br><span class="line">                $(<span class="string">&quot;#orderPrice&quot;</span>).<span class="title function_">html</span>(order.<span class="property">totalPrice</span>)</span><br><span class="line">                $(<span class="string">&quot;#rightPrice&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;¥&quot;</span> + order.<span class="property">totalPrice</span> + <span class="string">&quot;&amp;nbsp;&quot;</span>)</span><br><span class="line">                <span class="comment">//给隐藏域的属性赋值</span></span><br><span class="line">                $(<span class="string">&quot;#oid&quot;</span>).<span class="title function_">val</span>(order.<span class="property">oid</span>)</span><br><span class="line">                $(<span class="string">&quot;#totalPrice&quot;</span>).<span class="title function_">val</span>(order.<span class="property">totalPrice</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">3000</span>)&#123;</span><br><span class="line">                location.<span class="property">href</span> = <span class="string">&quot;500.html&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error.<span class="property">status</span> === <span class="number">400</span> )&#123;</span><br><span class="line">                location.<span class="property">href</span> = <span class="string">&quot;500.html&quot;</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;服务器出现故障，请等待攻城狮修复！！&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//引入公共头部、中间导航条以及页脚</span></span><br><span class="line">    $(<span class="string">&quot;.header&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;components/head.html&quot;</span>)</span><br><span class="line">    $(<span class="string">&quot;.footer&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;components/footer.html&quot;</span>)</span><br><span class="line">    $(<span class="string">&quot;.middleNavigation&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;components/middleNavigationBar.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取上个网页传来的参数</span></span><br><span class="line">    <span class="keyword">let</span> oid = <span class="title function_">getPidFromLastHtml</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动发送ajax请求查询订单信息</span></span><br><span class="line">    <span class="title function_">getOrderByOid</span>(oid);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="查看订单详情"><a href="#查看订单详情" class="headerlink" title="查看订单详情"></a>查看订单详情</h3><h4 id="后端-持久层-20"><a href="#后端-持久层-20" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#根据oid查询order信息</span><br><span class="line">SELECT od.`oid`,od.`aid`,od.`recv_name`,od.`total_price`,</span><br><span class="line">       od.`status`,od.`created_time`,</span><br><span class="line">       orm.`image`,orm.`title`,</span><br><span class="line">       orm.`price`,orm.`num`</span><br><span class="line">FROM t_order od </span><br><span class="line">LEFT JOIN t_order_item orm</span><br><span class="line">ON od.`oid` = orm.`oid`</span><br><span class="line">WHERE od.oid = #&#123;oid&#125;</span><br><span class="line">ORDER BY orm.`price` DESC;</span><br></pre></td></tr></table></figure><p>2.定义mapper接口的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据oid查询值对象</span></span><br><span class="line">List&lt;OrderVo&gt; <span class="title function_">queryOrderVoByOid</span><span class="params">(Integer oid)</span>;</span><br></pre></td></tr></table></figure><p>3.编写对应的映射文件</p><h4 id="后端-业务层-20"><a href="#后端-业务层-20" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常，没有新异常</p><p>2.定义service层的抽象接口和创建值对象OrderVo</p><p>3.编写具体的业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据订单oid查询订单的抽象方法</span></span><br><span class="line">List&lt;OrderVo&gt; <span class="title function_">queryOrderVoByOid</span><span class="params">(Integer oid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据订单oid查询订单的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;OrderVo&gt; <span class="title function_">queryOrderVoByOid</span><span class="params">(Integer oid)</span> &#123;</span><br><span class="line">    List&lt;OrderVo&gt; orderVos = orderMapper.queryOrderVoByOid(oid);</span><br><span class="line">    <span class="keyword">for</span> (OrderVo vo: orderVos) &#123;</span><br><span class="line">        <span class="comment">//根据每个订单的oid查询地址信息</span></span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressService.queryAddressByAid(vo.getAid());</span><br><span class="line">        <span class="comment">//补全OrderVo值对象中的空白字段</span></span><br><span class="line">        vo.setZip(address.getZip());</span><br><span class="line">        vo.setPhone(address.getPhone());</span><br><span class="line">        vo.setProvinceName(address.getProvinceName());</span><br><span class="line">        vo.setCityName(address.getCityName());</span><br><span class="line">        vo.setAreaName(address.getAreaName());</span><br><span class="line">        vo.setAddress(address.getAddress());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> orderVos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后端-控制层-20"><a href="#后端-控制层-20" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.无异常，不需要处理</p><p>2.设计请求</p><p>请求路径：&#x2F;order&#x2F;queryOrderVo</p><p>请求参数：Integer oid</p><p>请求方式：get</p><p>响应类型：JsonResult&lt;List&lt; OrderVo&gt;&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理根据oid查询订单的请求</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/queryOrderVo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;OrderVo&gt;&gt;  <span class="title function_">queryOrderVo</span><span class="params">(Integer oid)</span>&#123;</span><br><span class="line">    List&lt;OrderVo&gt; orderVos = orderService.queryOrderVoByOid(oid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,orderVos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-21"><a href="#前端页面-21" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li>在这个页面加载完成之前需要先根据上个页面传来的参数查询订单信息</li></ul><p><font color='red'><strong>篇幅过长，不做展示，在&#x2F;web&#x2F;orderInfo.html页面下可查看</strong></font> </p><h3 id="查看所有订单"><a href="#查看所有订单" class="headerlink" title="查看所有订单"></a>查看所有订单</h3><h4 id="后端-持久层-21"><a href="#后端-持久层-21" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT od.`oid`,od.`aid`,od.`recv_name`,od.`total_price`,</span><br><span class="line">       od.`status`,od.`order_time`,</span><br><span class="line">       orm.`image`,orm.`title`,</span><br><span class="line">       orm.`price`,orm.`num`</span><br><span class="line">FROM t_order od </span><br><span class="line">LEFT JOIN t_order_item orm</span><br><span class="line">ON od.`oid` = orm.`oid`</span><br><span class="line">WHERE od.uid = #&#123;uid&#125;</span><br><span class="line">ORDER BY od.`order_time` DESC;</span><br></pre></td></tr></table></figure><p>2.定义抽象接口的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据uid查询值对象</span></span><br><span class="line">List&lt;OrderVo&gt; <span class="title function_">queryOrderVoByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure><p>3.编写对应的mapper映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-21"><a href="#后端-业务层-21" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.无新异常</p><p>2.定义接口的抽象方法</p><p>3.编写具体业务逻辑</p><ul><li>由于与上个 的逻辑相似，就不再重复了</li></ul><h4 id="后端-控制层-21"><a href="#后端-控制层-21" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><ul><li>与上个 相似</li></ul><h4 id="前端页面-22"><a href="#前端页面-22" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li>糙，这一个页面的js代码写的是真折磨人，写了快3个小时还有各种bug！</li><li><strong>订单 的其余查看其他项所用的持久层、业务层、控制层已经在支付订单 中写好了</strong></li></ul><p><font color='red'><strong>篇幅过长，不做展示，在&#x2F;web&#x2F;orders.html页面下可查看</strong></font> </p><hr><h2 id="收藏管理"><a href="#收藏管理" class="headerlink" title="收藏管理"></a>收藏管理</h2><h3 id="创建数据表-6"><a href="#创建数据表-6" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t_favorites(</span><br><span class="line">fid INT PRIMARY KEY AUTO_INCREMENT COMMENT &#x27;收藏商品在数据表的id&#x27;,</span><br><span class="line">uid INT COMMENT &#x27;归属的用户id&#x27;,</span><br><span class="line">pid INT COMMENT &#x27;归属的商品id&#x27;,</span><br><span class="line">image VARCHAR(255) COMMENT &#x27;商品图片保存地址&#x27;,</span><br><span class="line">price BIGINT COMMENT &#x27;商品的价格&#x27;,</span><br><span class="line">title VARCHAR(255) COMMENT &#x27;商品的标题&#x27;,</span><br><span class="line">sell_point VARCHAR(255) COMMENT &#x27;商品的卖点&#x27;,</span><br><span class="line">status INT COMMENT &#x27;商品的收藏状态&#x27;</span><br><span class="line">); </span><br></pre></td></tr></table></figure><h3 id="创建实体类-6"><a href="#创建实体类-6" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对应数据表t_favorites的实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Favorites</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer fid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String sellPoint;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Springboot中如何使用pageHelper插件"><a href="#在Springboot中如何使用pageHelper插件" class="headerlink" title="在Springboot中如何使用pageHelper插件"></a>在Springboot中如何使用pageHelper插件</h3><ul><li><p>因为商品数据有可能有多条，因此决定使用分页插件进行过滤查询，下面的商品搜索也用得上</p><p>也由于我不怎么熟悉springboot使用pageHelper分页插件，也正好记录一下</p><p><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md">github官方参考资料</a></p><p><a href="https://blog.csdn.net/qq_43469899/article/details/100119116?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-100119116-blog-119714502.pc_relevant_multi_platform_whitelistv2_exp3w&spm=1001.2101.3001.4242.1&utm_relevant_index=3">csdn参考资料</a></p></li></ul><p>①从github上引入分页插件的依赖到项目的pom文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;version&gt;最新版本&lt;/version&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②在yml配置文件中进行部分内容配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">top.year21.computerstore.entity</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#开启在mybatis处理过程中打印出对应的sql语句功能</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment">#开启数据库字段自动转换为驼峰命名</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#配置分页插件 </span></span><br><span class="line"><span class="comment">#照着写就行，别问为什么</span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">  <span class="attr">dialect:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">reasonable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">support-methods-arguments:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">params:</span> <span class="string">count=countSql</span></span><br></pre></td></tr></table></figure><p>③<font color='red'><strong>在程序启动类中注册一个Pagehelper类，否则会报错或者取不到数据，这一步很关键！&gt;</strong></font></p><p>​或者是在配置类(标注了@Configuration的类)中进行注册也可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PageHelper <span class="title function_">pageHelper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">PageHelper</span> <span class="variable">pageHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageHelper</span>();</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.setProperty(<span class="string">&quot;offsetAsPageNum&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;rowBoundsWithCount&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;reasonable&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    properties.setProperty(<span class="string">&quot;dialect&quot;</span>, <span class="string">&quot;mysql&quot;</span>);</span><br><span class="line">    pageHelper.setProperties(properties);</span><br><span class="line">    <span class="keyword">return</span> pageHelper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④控制层调用业务层，业务层调用持久层查询，且分页功能必须在select查询语句之前开启，</p><p>​所以在service层的实现类调用持久层的方法之前使用pagehelper.start方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IFavoritesServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IFavoritesService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FavoritesMapper favoritesMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IProductService productService;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//根据uid和商品收藏状态查询收藏数据的具体逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageInfo&lt;Favorites&gt; <span class="title function_">queryFavorites</span><span class="params">(Integer uid, Integer pageNum,Integer pageSize,Integer status)</span> &#123;</span><br><span class="line">        <span class="comment">//开启分页功能，pageNum是当前页，pageSize是每页显示的数据量，这两个值都可以选择让前端传或者自己调整</span></span><br><span class="line">         PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">        List&lt;Favorites&gt; favorites = favoritesMapper.queryFavoritesByUidAndStatus(uid, status);</span><br><span class="line">        PageInfo&lt;Favorites&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(favorites);</span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>⑤控制层将数据返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/favorites&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FavoritesController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IFavoritesService favoritesService;</span><br><span class="line">    <span class="comment">//处理查询收藏商品的请求</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryFavorites&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;PageInfo&lt;Favorites&gt;&gt; <span class="title function_">queryFavorites</span><span class="params">(HttpSession session, Integer pageNum,Integer pageSize,Integer status)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line">        PageInfo&lt;Favorites&gt; favorites = favoritesService.queryFavorites(uid, pageNum,pageSize,status);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,favorites);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑥分页功能如何使用到此结束</p><hr><h3 id="加入收藏"><a href="#加入收藏" class="headerlink" title="加入收藏"></a>加入收藏</h3><h4 id="后端-持久层-22"><a href="#后端-持久层-22" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句编写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into t_favorite(uid,pid,image,price,title,sell_point,status)</span><br><span class="line">values(#&#123;uid&#125;,#&#123;pid&#125;,#&#123;image&#125;,#&#123;price&#125;,#&#123;sellPoint&#125;,#&#123;status&#125;)</span><br></pre></td></tr></table></figure><p>2.定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增收藏商品的抽象方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addFavorites</span><span class="params">(Favorites favorites)</span>;</span><br></pre></td></tr></table></figure><p>3.编写对应的mapper映射文件</p><h4 id="后端-业务层-22"><a href="#后端-业务层-22" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.异常规划，添加失败</p><p>2.定义抽象方法</p><p>3.编写具体业务处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加收藏商品的抽象方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addFavorites</span><span class="params">(Favorites favorites)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加收藏商品的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addFavorites</span><span class="params">(Integer uid,Integer pid)</span> &#123;</span><br><span class="line">    <span class="type">Favorites</span> <span class="variable">favorites</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Favorites</span>();</span><br><span class="line">    <span class="comment">//根据pid查询商品信息</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.queryProductById(pid);</span><br><span class="line">    <span class="comment">//填充favorites对象空白字段</span></span><br><span class="line">    favorites.setUid(uid);</span><br><span class="line">    favorites.setPid(pid);</span><br><span class="line">    favorites.setImage(product.getImage());</span><br><span class="line">    favorites.setPrice(product.getPrice());</span><br><span class="line">    favorites.setTitle(product.getTitle());</span><br><span class="line">    favorites.setSellPoint(product.getSellPoint());</span><br><span class="line">    favorites.setStatus(<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> favoritesMapper.addFavorites(favorites);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;服务器异常，收藏商品失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取出fid返回给前端页面，以便在搜索界面取消收藏使用</span></span><br><span class="line">    <span class="keyword">return</span> favorites.getFid();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-22"><a href="#后端-控制层-22" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.异常已添加过</p><p>2.设计请求</p><p>请求路径：&#x2F;favorites&#x2F;addFavorites</p><p>请求类型： HttpSession session,Integer pid</p><p>请求方式：post</p><p>响应类型：JsonResult&lt; Integer&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/addFavorites&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Integer&gt; <span class="title function_">addFavorites</span><span class="params">(HttpSession session,Integer pid)</span>&#123;</span><br><span class="line">    <span class="comment">//从session中取出uid</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line">    <span class="comment">//执行插入操作并返回fid</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">fid</span> <span class="operator">=</span> favoritesService.addFavorites(uid, pid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,fid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-23"><a href="#前端页面-23" class="headerlink" title="前端页面"></a>前端页面</h4><p>①给加入收藏按钮绑定单击事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给加入收藏按钮绑定点击事件</span></span><br><span class="line">$(<span class="string">&quot;#btn-add-to-collect&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/favorites/addFavorites&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;<span class="attr">pid</span>:pid&#125;,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;收藏成功！&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        error : <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;服务器出现错误，加入购物车失败！&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="收藏商品展示"><a href="#收藏商品展示" class="headerlink" title="收藏商品展示"></a>收藏商品展示</h3><h4 id="后端-持久层-23"><a href="#后端-持久层-23" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句编写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#根据uid和收藏商品状态查询收藏的商品信息</span><br><span class="line">select * from t_favorites where uid= #&#123;uid&#125; and status =#&#123;status&#125;</span><br></pre></td></tr></table></figure><p>2.创建mapper文件和定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据uid和收藏商品状态查询收藏的商品信息</span></span><br><span class="line">List&lt;Favorites&gt; <span class="title function_">queryFavoritesByUidAndStatus</span><span class="params">(Integer uid,Integer status)</span>;</span><br></pre></td></tr></table></figure><p>3.编写对应的映射文件</p><p>4.单元测试</p><h4 id="后端-业务层-23"><a href="#后端-业务层-23" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常，无异常</p><p>2.创建service层接口和定义抽象方法</p><p>3.编写具体的业务处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询收藏商品的抽象方法</span></span><br><span class="line">PageInfo&lt;Favorites&gt; <span class="title function_">queryFavorites</span><span class="params">(Integer uid, Integer pageNum, Integer pageSize,Integer status)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据uid和商品收藏状态查询收藏数据的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageInfo&lt;Favorites&gt; <span class="title function_">queryFavorites</span><span class="params">(Integer uid, Integer pageNum,Integer pageSize,Integer status)</span> &#123;</span><br><span class="line">        <span class="comment">//开启分页功能，pageNum是当前页，pageSize是每页显示的数据量，这两个值都可以选择让前端传或者自己调整</span></span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">        List&lt;Favorites&gt; favorites = favoritesMapper.queryFavoritesByUidAndStatus(uid, status);</span><br><span class="line">        PageInfo&lt;Favorites&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(favorites);</span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="后端-控制层-23"><a href="#后端-控制层-23" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.不需要处理异常</p><p>2.设计请求</p><p>请求路径：&#x2F;favorites&#x2F;queryFavorites</p><p>请求类型：Httpsession session,Integer status</p><p>请求方式：get</p><p>响应类型：JsonResult&lt; Favorites&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理查询收藏商品的请求</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/queryFavorites&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;PageInfo&lt;Favorites&gt;&gt; <span class="title function_">queryFavorites</span><span class="params">(HttpSession session, Integer pageNum,Integer pageSize,Integer status)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line">        PageInfo&lt;Favorites&gt; favorites = favoritesService.queryFavorites(uid, pageNum,pageSize,status);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,favorites);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-24"><a href="#前端页面-24" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li><font color='red'><strong>js代码较长，到&#x2F;web&#x2F;favorites.html下可以查看</strong></font></li></ul><hr><h3 id="取消收藏"><a href="#取消收藏" class="headerlink" title="取消收藏"></a>取消收藏</h3><ul><li>可以选择直接将数据库对应数据删除，但为了测试方便，决定添加一个字段status表示收藏状态</li></ul><h4 id="后端-持久层-24"><a href="#后端-持久层-24" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句编写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update t_favorites set status = #&#123;status&#125; where fid = #&#123;fid&#125; and uid = #&#123;uid&#125;</span><br></pre></td></tr></table></figure><p>2.定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据收藏商品pid和用户uid取消对应商品收藏</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateFavoritesStatus</span><span class="params">(Integer status,Integer fid,Integer uid)</span>;</span><br></pre></td></tr></table></figure><p>3.编写对应的mapper映射文件</p><h4 id="后端-业务层-24"><a href="#后端-业务层-24" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.规划异常，修改状态失败</p><p>2.定义抽象方法</p><p>3.编写具体业务处理逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据收藏商品pid和用户uid取消对应商品收藏的抽象方法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateFavoritesStatus</span><span class="params">(Integer status,Integer fid,Integer uid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据收藏商品pid和用户uid取消对应商品收藏的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateFavoritesStatus</span><span class="params">(Integer status, Integer fid, Integer uid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> favoritesMapper.updateFavoritesStatus(status, fid, uid);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;服务器异常，取消收藏失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="后端-控制层-24"><a href="#后端-控制层-24" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.异常无需进行处理，前面已经处理过</p><p>2.设计请求</p><p>请求路径：&#x2F;favorites&#x2F;updateStatus</p><p>请求参数：HttpSession session，Integer fid，Integer status</p><p>请求类型：post</p><p>响应类型：JsonResult&lt; void&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理取消收藏的请求</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/updateStatus&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">cancelFavorites</span><span class="params">(HttpSession session,Integer status,Integer fid)</span>&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUserIdFromSession(session);</span><br><span class="line">    favoritesService.updateFavoritesStatus(status,fid,uid);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-25"><a href="#前端页面-25" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取消收藏</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stopCollect</span>(<span class="params">fid</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&quot;确定要取消对该商品的收藏吗？&quot;</span>))&#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/favorites/updateStatus&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;<span class="attr">fid</span>:fid,<span class="attr">status</span>:<span class="number">0</span>&#125;,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;取消成功&quot;</span>)</span><br><span class="line">                location.<span class="title function_">reload</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">            error : <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;服务器出现错误，取消失败！&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="加入购物车-1"><a href="#加入购物车-1" class="headerlink" title="加入购物车"></a>加入购物车</h3><ul><li>持久层、业务层、控制层在购物车管理模块已经全部实现</li></ul><h4 id="前端页面-26"><a href="#前端页面-26" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li>前端页面只需要将product.html页面的ajax请求进行cv，修改一下传递的参数即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加入购物车</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addCollectToCart</span>(<span class="params">pid,price</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">confirm</span>(<span class="string">&quot;确定要将此商品加入购物车吗？&quot;</span>))&#123;</span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/cart/addCart&quot;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;<span class="attr">pid</span>:pid,<span class="attr">price</span>:price,<span class="attr">num</span>:<span class="number">1</span>&#125;,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;已成功加入购物车，在购物车等您结算哟！&quot;</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            error : <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;服务器出现错误，加入购物车失败！&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="商品搜索"><a href="#商品搜索" class="headerlink" title="商品搜索"></a>商品搜索</h2><h3 id="模糊搜索"><a href="#模糊搜索" class="headerlink" title="模糊搜索"></a>模糊搜索</h3><h4 id="后端-持久层-25"><a href="#后端-持久层-25" class="headerlink" title="后端-持久层"></a>后端-持久层</h4><p>1.sql语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,title,sell_point,price,image</span><br><span class="line">FROM t_product </span><br><span class="line">WHERE STATUS = 1</span><br><span class="line">AND title LIKE &#x27;%$&#123;title&#125;%&#x27; </span><br><span class="line">ORDER BY priority DESC;</span><br></pre></td></tr></table></figure><p>2.定义抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据指定的名称关键字进行模糊查询</span></span><br><span class="line">List&lt;Product&gt; <span class="title function_">queryProductByTitle</span><span class="params">(String title)</span>;</span><br></pre></td></tr></table></figure><p>3.编写映射文件</p><p>4.单元检测</p><h4 id="后端-业务层-25"><a href="#后端-业务层-25" class="headerlink" title="后端-业务层"></a>后端-业务层</h4><p>1.简单查询无异常不需要规划</p><p>2.定义抽象方法</p><p>3.编写具体逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据名称进行模糊查询的抽象方法</span></span><br><span class="line">PageInfo&lt;Product&gt; <span class="title function_">queryProductByTitle</span><span class="params">(Integer pageNum, Integer pageSize,String title)</span>;</span><br><span class="line"><span class="comment">//根据名称进行模糊查询的具体逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PageInfo&lt;Product&gt; <span class="title function_">queryProductByTitle</span><span class="params">(Integer pageNum, Integer pageSize,String title)</span> &#123;</span><br><span class="line">    <span class="comment">//开启分页功能</span></span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);、</span><br><span class="line">    <span class="comment">//调用持久层方法进行查询</span></span><br><span class="line">    List&lt;Product&gt; products = productMapper.queryProductByTitle(title);</span><br><span class="line">    <span class="comment">//返回分页数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(products);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.单元测试</p><h4 id="后端-控制层-25"><a href="#后端-控制层-25" class="headerlink" title="后端-控制层"></a>后端-控制层</h4><p>1.无异常需要处理</p><p>2.设计请求</p><p>请求路径：&#x2F;product&#x2F;queryByTitle</p><p>请求参数：Integer pageNum，Integer pageSize，String title</p><p>请求类型：get</p><p>响应类型：JsonResult&lt;PageInfo&lt; Product&gt;&gt;</p><p>3.处理请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理根据产品关键字进行模糊查询的请求</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;pageNum&#125;/&#123;pageSize&#125;/&#123;title&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;PageInfo&lt;Product&gt;&gt; <span class="title function_">quertByTitle</span><span class="params">(<span class="meta">@PathVariable(&quot;pageNum&quot;)</span> Integer pageNum,</span></span><br><span class="line"><span class="params">                                                  <span class="meta">@PathVariable(&quot;pageSize&quot;)</span> Integer pageSize,</span></span><br><span class="line"><span class="params">                                                  <span class="meta">@PathVariable(&quot;title&quot;)</span> String title)</span>&#123;</span><br><span class="line">    PageInfo&lt;Product&gt; lists = productService.queryProductByTitle(pageNum, pageSize, title);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,lists);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面-27"><a href="#前端页面-27" class="headerlink" title="前端页面"></a>前端页面</h4><ul><li><font color='red'><strong>前端页面搜索数据的展示、加入购物车、加入收藏基于其他页面疯狂copy，稍微改动即可完成</strong></font></li><li><font color='red'><strong>同样js代码过长，放在了&#x2F;web&#x2F;search.html页面下</strong></font></li></ul><hr><h2 id="抽离公共页面"><a href="#抽离公共页面" class="headerlink" title="抽离公共页面"></a>抽离公共页面</h2><ul><li>抽离头部、页面、中间导航条</li></ul><p>①新建一个名为head.html(简称head)的文件，将需要抽离页面的head标签内的全部内容粘贴到</p><p>head文件中，并且在抽离页面的原处使用一个div进行占位，可以在任意地方js的load方法进行引入</p><p>②新建一个名为middleNavigation.html(简称middle)的文件，将需要抽离页面的导航标签内的内容粘贴到</p><p>middle文件中，并且在抽离页面的原处使用一个div进行占位，可以在任意地方js的load方法进行引入</p><p>③新建一个名为footer.html(简称footer)的文件，将需要抽离页面的footer标签内的全部内容粘贴到</p><p>footer文件中，并且在抽离页面的原处使用一个div进行占位，可以在任意地方js的load方法进行引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--头部开始--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--头部结束--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--中间导航条开始 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middleNavigation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--中间导航条结束--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--页脚开始--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--页脚结束--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>)  &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//引入公共头部、中间导航条以及页脚</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;.header&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;components/head.html&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;.footer&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;components/footer.html&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;.middleNavigation&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;components/middleNavigationBar.html&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color='red'><strong>PS：因为是把整体都抽离了，因此有些页面需要一开始就要加载的功能可以使用js代码在</strong></font></p><p><font color='red'><strong>head或者footer文件进行加载，如下完整的head.html页面所示：</strong></font></p><ul><li>这个部分最为棘手，需要谨慎操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--完整的head.html页面代码--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--电脑商城logo--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/index/stumalllogo.png&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--快捷选项--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9 top-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;topMenu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-inline pull-right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;favorites.html&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>收藏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-split&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;orders.html&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-file-text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-split&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;cart.html&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-cart-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-split&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--下列列表按钮 ：管理--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-link dropdown-toggle&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;top-dropdown-btn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-gears&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>管理 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;menuCaret&quot;</span> <span class="attr">class</span>=<span class="string">&quot;caret&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;uiMenu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dropdown-menu top-dropdown-ul&quot;</span> <span class="attr">role</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;password.html&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;userdata.html&quot;</span>&gt;</span>个人资料<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;upload.html&quot;</span>&gt;</span>上传头像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;address.html&quot;</span>&gt;</span>收货管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;li-split&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;login.html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loginStatus&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//必须随着页面加载先执行，不然有缓存界面会显示bug</span></span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//未登录状态下改变最上面的管理行</span></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">if</span> (sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>) === <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//设置显示登录</span></span></span><br><span class="line"><span class="language-javascript">         $(<span class="string">&quot;#loginStatus&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&amp;nbsp;&amp;nbsp;&quot;</span> + <span class="string">&quot;登录&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//移除管理模块的class样式并清空元素</span></span></span><br><span class="line"><span class="language-javascript">         $(<span class="string">&quot;#menuCaret&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;caret&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">         $(<span class="string">&quot;#uiMenu&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;dropdown-menu top-dropdown-ul&quot;</span>).<span class="title function_">empty</span>()</span></span><br><span class="line"><span class="language-javascript">         &#125;<span class="keyword">else</span>&#123; <span class="comment">//不为空则已经登录</span></span></span><br><span class="line"><span class="language-javascript">             $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                 url : <span class="string">&quot;http://localhost:8080/user/queryUser&quot;</span> ,</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="comment">//用户登录了则改变最上面的导航条</span></span></span><br><span class="line"><span class="language-javascript">                     <span class="title function_">changeMenu</span>(res)</span></span><br><span class="line"><span class="language-javascript">                 &#125;</span></span><br><span class="line"><span class="language-javascript">             &#125;);</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//登录状态下改变最上面的管理行</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">function</span> <span class="title function_">changeMenu</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">let</span> user = res.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//不为空代表已经登录</span></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">if</span> (user.<span class="property">username</span> != <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="comment">//修改为登录的用户名</span></span></span><br><span class="line"><span class="language-javascript">             $(<span class="string">&quot;#loginStatus&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&amp;nbsp;&quot;</span> + user.<span class="property">username</span>)</span></span><br><span class="line"><span class="language-javascript">             <span class="comment">//添加退出按钮</span></span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">let</span> exitStr = <span class="string">&quot;&lt;li class=\&quot;li-split\&quot;&gt;|&lt;/li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                 + <span class="string">&quot;&lt;li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                 + <span class="string">&quot;&lt;span class=\&quot;fa fa-sign-out\&quot;&gt;&lt;/span&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                 + <span class="string">&quot;&lt;a href=\&quot;javascript:void(0)\&quot; onclick=\&quot;exitLogin()\&quot;&gt;&amp;nbsp;退出&lt;/a&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                 + <span class="string">&quot;&lt;/li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">             $(<span class="string">&quot;#topMenu&quot;</span>).<span class="title function_">append</span>(exitStr)</span></span><br><span class="line"><span class="language-javascript">             <span class="comment">//移除跳转属性</span></span></span><br><span class="line"><span class="language-javascript">             <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;loginStatus&quot;</span>).<span class="title function_">removeAttribute</span>(<span class="string">&quot;href&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//退出功能</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">function</span> <span class="title function_">exitLogin</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">if</span> (sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>) == <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="title function_">alert</span>(<span class="string">&quot;尚未登录，请先登录！&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">         &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">             $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/user/exit&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                         <span class="title function_">alert</span>(<span class="string">&quot;退出成功!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                         sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&quot;user&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                         location.<span class="property">href</span> = <span class="string">&quot;index.html&quot;</span></span></span><br><span class="line"><span class="language-javascript">                     &#125;</span></span><br><span class="line"><span class="language-javascript">                 &#125;,</span></span><br><span class="line"><span class="language-javascript">                 <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                     <span class="title function_">alert</span>(<span class="string">&quot;服务器出现未知异常，退出登录失败&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                 &#125;</span></span><br><span class="line"><span class="language-javascript">             &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="引入kaptcha验证码"><a href="#引入kaptcha验证码" class="headerlink" title="引入kaptcha验证码"></a>引入kaptcha验证码</h2><ul><li>参考资料  —&gt; <a href="https://blog.csdn.net/qq_40065776/article/details/101481607">csdn引入kaptcha</a></li></ul><p>①引入依赖包到pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入验证码 kaptcha的依赖  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②创建并编写kaptcha的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.year21.computerstore.config;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hcxs1986</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: kaptcha配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/24 1:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KaptchaConfig</span> &#123;</span><br><span class="line">    <span class="comment">//kaptcha</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultKaptcha <span class="title function_">getKaptcheCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultKaptcha</span> <span class="variable">defaultKaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultKaptcha</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border&quot;</span>, <span class="string">&quot;no&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.color&quot;</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.width&quot;</span>, <span class="string">&quot;100&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.height&quot;</span>, <span class="string">&quot;36&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.size&quot;</span>, <span class="string">&quot;30&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.obscurificator.impl&quot;</span>, <span class="string">&quot;com.google.code.kaptcha.impl.ShadowGimpy&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.session.key&quot;</span>, <span class="string">&quot;code&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.noise.impl&quot;</span>, <span class="string">&quot;com.google.code.kaptcha.impl.NoNoise&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.background.clear.from&quot;</span>, <span class="string">&quot;232,240,254&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.background.clear.to&quot;</span>, <span class="string">&quot;232,240,254&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.names&quot;</span>, <span class="string">&quot;彩云,宋体,楷体,微软雅黑&quot;</span>);</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>③创建并编写kaptcha控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.year21.computerstore.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.Constants;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.Producer;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hcxs1986</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: kaptcha的控制层,kaptcha调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/24 1:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/kaptcha&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KaptchaController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Producer producer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/kaptcha-image&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getKaptchaImage</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        response.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-store, no-cache, must-revalidate&quot;</span>);</span><br><span class="line">        response.addHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;post-check=0, pre-check=0&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">capText</span> <span class="operator">=</span> producer.createText();</span><br><span class="line">        log.info(<span class="string">&quot;******************当前验证码为：&#123;&#125;******************&quot;</span>, capText);</span><br><span class="line">        <span class="comment">// 将验证码存于session中</span></span><br><span class="line">        request.getSession().setAttribute(Constants.KAPTCHA_SESSION_KEY, capText);</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">bi</span> <span class="operator">=</span> producer.createImage(capText);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="comment">// 向页面输出验证码</span></span><br><span class="line">        ImageIO.write(bi, <span class="string">&quot;jpg&quot;</span>, out);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 清空缓存区</span></span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭输出流</span></span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④在前端调用kaptcha的控制层接口</p><ul><li><p>给图片绑定点击事件进行刷新时一定要在请求接口完整的地址上带上一个时间参数</p><p>如下图所示</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;img id=<span class="string">&quot;kaptcha&quot;</span> src=<span class="string">&quot;http://localhost:8080/kaptcha/kaptcha-image&quot;</span> onclick=<span class="string">&quot;reFlashImg(&#x27;kaptcha&#x27;)&quot;</span> /&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//给图片验证码绑定点击事件，刷新验证码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reFlashImg</span>(<span class="params">imgId</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> kaptcha = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(imgId)</span><br><span class="line">    kaptcha.<span class="property">src</span> = <span class="string">&quot;http://localhost:8080/kaptcha/kaptcha-image?time=&quot;</span>+ <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><hr><h2 id="统计业务方法耗时"><a href="#统计业务方法耗时" class="headerlink" title="统计业务方法耗时"></a>统计业务方法耗时</h2><ul><li><p>如果想要对某些方法同时添加相同 需求，且在不改变原有的业务逻辑 的基础上进行完成</p><p>那么就是可以使用AOP的切面编程进行处理</p></li></ul><h3 id="切面方法"><a href="#切面方法" class="headerlink" title="切面方法"></a>切面方法</h3><p><font color='red'><strong>切面方法就是在切面类的方法，所谓的切面类就是增强类</strong></font></p><p>1.切面方法修饰符必须是public</p><p>2.切面方法的返回值可以是void或Object，但如果这个方法被@Around环绕通知注解所修饰，那么</p><p>​这个方法必须声明为Object类型，除此之外，随意。</p><p>3.切面方法的方法名可以自定义</p><p>4.切面方法可以接受参数，参数是ProccedingJoinPoint接口类型的参数，但是被@Around环绕通知</p><p>   注解所修饰的方法必须要传递这个参数，除此之外，随意。</p><h3 id="怎么实现AOP操作？"><a href="#怎么实现AOP操作？" class="headerlink" title="怎么实现AOP操作？"></a>怎么实现AOP操作？</h3><p><font color='red'><strong>怎么做？</strong></font></p><p>①导入aop的依赖到pom文件中，不需要版本，springboot会自动进行版本仲裁</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    引入aspectj的依赖    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②创建切面类(增强类)，并在这个类中定义切面方法（编写增强逻辑）</p><p>③进行通知的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是用于统计业务方法执行的事件的增强类</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//将当前类标记为切面类，并生成代理对象，底层使用的是动态代理</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//将当前类对象的创建和管理交由spring容器维护</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerAspect</span> &#123;</span><br><span class="line">    <span class="comment">//ProceedingJoinPoint接口表示指向目标方法的对象</span></span><br><span class="line">    <span class="comment">//切入点表达式解析</span></span><br><span class="line">    <span class="comment">// 第一个*表示不关注方法返回值</span></span><br><span class="line">    <span class="comment">//第二个* top.year21.computerstore.service.impl.* 表示包下的哪个实现类也不关注</span></span><br><span class="line">    <span class="comment">//第三个* 表示哪个方法名字也不关注</span></span><br><span class="line">    <span class="comment">//第四个(..)表示哪个方法中的参数列表也不关注</span></span><br><span class="line">    <span class="comment">//&quot;execution(* top.year21.computerstore.service.*.*(..))&quot;</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* top.year21.computerstore.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//先记录业务执行前的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">startedTime</span>  <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> pjp.proceed(); <span class="comment">//调用目标方法，例如login方法</span></span><br><span class="line">         <span class="comment">//还可以在这个位置记录一下每个方法的执行名字和时间，并建议一张数据表记录</span></span><br><span class="line">        <span class="comment">//插入数据库</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//先记录业务执行前的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span>  <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//计算耗时</span></span><br><span class="line">        System.out.println(<span class="string">&quot;业务方法总共耗时：&quot;</span> + (endTime - startedTime));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④启动项目，随机访问一个 进行测试</p><h2 id="汇总信息"><a href="#汇总信息" class="headerlink" title="汇总信息"></a>汇总信息</h2><p>1.注册 单元测试报错提示：Invalid bound statement (not found)</p><p>说明：本次是由于没有在yml配置文件中设置mapper映射文件对应的位置</p><p>解决方法：将mapper映射文件的位置在yml配置文件中进行对应的设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>2.注册 单元测试报错：nested exception is org.apache.ibatis.binding.BindingException: Parameter ‘xxx‘ not found</p><p>说明：由于传参的是实体类对象，因此实体类对象不需要用@Param修饰</p><p>3.登录 由于还没设计表单就使用postman测试后端业务层接口时，报错提示状态码415，Unsupported Media Type</p><p>说明：业务层的控制器方法的形参加了 @RequestBody注解 ，只能解析json类型的数据，而在postman中</p><p>​测试发送的请求Content-Type类型是multipart&#x2F;form-data; 所以才导致了这个错误</p><p>解决方法：将对应的控制器方法形参的 @RequestBody注解去掉即可</p><p>4.登录 写完js代码后发现点击事件没有绑定成功</p><p>解决方法：原因在于js代码没有设置为在页面加载完成后执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在网页加载完成后执行</span></span><br><span class="line"> $(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><p>5.修改个人资料 的js代码不是很熟悉</p><p>val()用于获取标签中的value属性的值</p><p>6.在上传头像页面，<font color='red'><strong>表单使用sumbit提交知道action默认跳转行为如何阻止？</strong></font> —&gt;<a href="https://blog.csdn.net/u013992330/article/details/80085678?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3-80085678-blog-88689411.pc_relevant_multi_platform_whitelistv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3-80085678-blog-88689411.pc_relevant_multi_platform_whitelistv2&utm_relevant_index=4">解决表单默认提交跳转行为</a></p><p>7.关于@PathVariable、@RequestParam、@Param注解</p><p>@PathVariable、@RequestParam用于后端控制层与前端页面交互时获取请求参数使用</p><p>@Param是用于后端业务层和持久层交互时，sql语句填充占位符所用</p><p>8.js中的serialize()方法、FormData类</p><p>serialize()方法：可以将表单数据自动拼接成key&#x3D;value的形式提交给服务器，但一般提交的都是</p><p>​普通控件类型中的数据(text&#x2F;password&#x2F;radio&#x2F;checkbox)等等</p><p>FormData类：将表单中的数据保持原有结构的形式进行提交。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先要创建一个Data对象，通过js的选择器找到对应的表单</span></span><br><span class="line"><span class="comment">//[0]是将jquery对象转为dom对象，其中的0表示form表单中的第一个控件，每个标签代表一个控件</span></span><br><span class="line"><span class="comment">//FormData对象能够存储文件类型的数据</span></span><br><span class="line"><span class="title class_">Data</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>($(<span class="string">&quot;#form&quot;</span>)[<span class="number">0</span>]); </span><br><span class="line"></span><br><span class="line"><span class="comment">//使用formdata发送ajax请求如下</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/test&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>($(<span class="string">&quot;#form&quot;</span>)[<span class="number">0</span>]),</span><br><span class="line">    <span class="attr">processData</span>: <span class="literal">false</span>, <span class="comment">//处理数据的形式，关闭处理数据</span></span><br><span class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>,<span class="comment">//表示提交数据的形式，关闭默认提交数据的形式</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(res.<span class="property">status</span><span class="string">&quot;,修改成功&quot;</span>)</span><br><span class="line">        <span class="comment">//因为它这里后端返回的数据是图片的访问地址</span></span><br><span class="line">        $(<span class="string">&quot;#img&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,res.<span class="property">data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;修改失败&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>9.<font color='red'><strong>如果后端持久层接收的是一个实体类对象的参数，必须在标签中使用parameterType&#x3D;”实体类对象”，</strong></font></p><p>​这样才能根据前端传值和实体类对象的属性匹配自动完成注入，不然保存</p><p>10.给当一个方法的参数是必须在标签内填写，怎么解决？</p><p>使用正则表达式替换，<font color='red'>能够替换的前提是str这个串中必须包含对应的占位符信息</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;&lt;a href=&#x27;javascript:void(0);&#x27; onclick=&#x27;deleteAddress(#&#123;deleteAid&#125;,#&#123;isDefault&#125;)&#x27; &quot;</span></span><br><span class="line"><span class="comment">//使用正则表达式替换获取该地址的aid值，#&#123;deleteAid&#125;只是一个占位符的含义，没其他含义</span></span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;deleteAid&#125;&quot;</span>,address.<span class="property">aid</span>)</span><br><span class="line">str = str.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;isDefault&#125;&quot;</span>,address.<span class="property">isDefault</span>)</span><br></pre></td></tr></table></figure><p>11.如何给a标签绑定事件并携带参数呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&lt;a href=&#x27;javascript:void(0);&#x27; onclick=&#x27;updateAddress(#&#123;editAid&#125;)&#x27; &gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为修改绑定点击事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateAddress</span>(<span class="params">aid</span>)&#123;</span><br><span class="line">    <span class="comment">//执行跳转到指定页面</span></span><br><span class="line">    <span class="title function_">jumpWithParam</span>(aid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//携带数据进行跳转</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jumpWithParam</span>(<span class="params">param</span>)&#123;</span><br><span class="line">    <span class="comment">//拼接跳转连接并带上需要查询的aid值</span></span><br><span class="line">    url = <span class="string">&quot;editAddress.html?aid=&quot;</span> + param;</span><br><span class="line">    location.<span class="property">href</span> = url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定页面这么接收</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showThisUserAddress</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//接收上一个页面传来的连接</span></span><br><span class="line">    <span class="keyword">var</span> hrefUrl = location.<span class="property">href</span>;</span><br><span class="line">    <span class="comment">//以url中的&quot;=&quot;为截断点，形成一个数组</span></span><br><span class="line">    <span class="keyword">var</span> param = hrefUrl.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">    <span class="comment">//decodeURI解码得到想要的参数</span></span><br><span class="line">    <span class="keyword">var</span> aid = <span class="built_in">decodeURI</span>(param[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>12.<font color='red'><strong>当在进行多表查询之后，查询的结果集无法和任何实体类进行映射怎么办？</strong></font></p><ul><li>重新创建一个Value Object(值对象)与查询出来的结果集形成映射关系</li></ul><p>VO(Value Object)：用于接收无法和任何实体类形成映射关系的vo对象，实际上就是根据结果集的字段，</p><pre><code>                              对应创建一个有相对应属性的一个实体类</code></pre><p>13.<font color='red'><strong>当前端发送的值是多个同名属性时，后端应该怎么接收？</strong></font></p><blockquote><p>根本没想到前端可以直接在ajax请求的data直接发送cids&#x3D;5&amp;cids&#x3D;4&amp;cids&#x3D;6这样的数据，惊呆了</p></blockquote><p>e.g. http:localhost:8080&#x2F;cart&#x2F;queryCids?cids&#x3D;5&amp;cids&#x3D;4</p><p>后端可以以一个同参数名的数组进行接收</p><p>e.g. public JsonResult&lt;List&lt; Cart&gt;&gt; queryCids(Integer[] cids){}</p><p>14.持久层需要的数据，如果在业务层的逻辑中可以手动生成，那么在业务层的形参列表中就不必要求输入</p><p>15.业务层需要的数据可以根据持久层的抽象方法的形参列表进行对比得出</p><p>16.如何阻止form表单使用sumbit默认跳转的解决方式二</p><ul><li>通过给form表单设置一个id，并使用id选择器给这个form表单绑定一个onsumbit提交事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用id选择器给这个form表单绑定一个onsumbit提交事件</span></span><br><span class="line"><span class="comment">//检测用户是否已经选择了商品来决定是否放行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkIsNotChoose</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> chooseNum = $(<span class="string">&quot;input[type=&#x27;checkbox&#x27;]:checked&quot;</span>).<span class="property">length</span></span><br><span class="line">    <span class="comment">//如果chooseNum的值等于0代表用户没任何选择商品不允许跳转</span></span><br><span class="line">    <span class="keyword">if</span> (chooseNum === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请先选择需要结算的购物车商品！！！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参考案例二</span></span><br><span class="line">&lt;form  id=<span class="string">&quot;searchForm&quot;</span></span><br><span class="line">        onsubmit=<span class="string">&quot;return checkIfHaveVal()&quot;</span></span><br><span class="line">        action= <span class="string">&quot;http://localhost:8080/web/search.html&quot;</span></span><br><span class="line">        <span class="keyword">class</span>=<span class="string">&quot;form-inline pull-right&quot;</span></span><br><span class="line">        role=<span class="string">&quot;form&quot;</span>&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">checkIfHaveVal</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> val = $(<span class="string">&quot;#search&quot;</span>).<span class="title function_">val</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (val === <span class="string">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&quot;请先输入搜索内容！&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="17"><li>.children(expr)  例如：children(“:eq(4)”)</li></ol><pre><code>children()是一个筛选器，顾名思义就是筛选孩子，筛选那些符合条件的孩子。  其中children是筛选器的名称，expr是表达式，所有选择器中的表达式都可以用在这，比如按标签名&quot;div&quot;,按类名&quot;.class&quot;,按序号&quot;:first&quot;等等，如果表达式为空，那么返回的是所有的孩子，返回的结果仍为jQuery对象。</code></pre><p>18.模糊查询报错<font color='red'><strong>Could not set parameters for mapping</strong></font></p><p>模糊查询,只能使用${},若使用#{}，占位符会被解析成？，当中参数里面的一部分，导致报错</p><p>如果想要强行使用#{}，只能这么写  like concat(‘%’,#{username},’%’) ；</p><p>或者 like “%”#{username}”%”;</p><p>19.<font color='red'><strong>拦截器白名单失效假象</strong></font></p><p>表现是在拦截中配置了对某些资源和接口放行，但发现使用浏览器请求还被重定向拦截器指定页面</p><p>原因如下：我们访问一个页面时候 <strong>springboot发现我们这个页面不存在自动会跳转至error页面</strong>，</p><p>这个时候跳转至error页面其实是被拦截器拦截了，所以会觉得是excludePathPatterns失效了。</p><p>我们只需要白名单放行的路径中把error页面排除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册拦截器并添加拦截规则</span></span><br><span class="line">registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">    .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">    <span class="comment">//也可以用一个List&lt;String&gt; 来设置排除拦截的资源</span></span><br><span class="line">    <span class="comment">//放行静态资源</span></span><br><span class="line">    .excludePathPatterns(<span class="string">&quot;/web/login.html&quot;</span>,<span class="string">&quot;/web/index.html&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;/web/register.html&quot;</span>,<span class="string">&quot;/web/product.html&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;/web/components/**&quot;</span>,<span class="string">&quot;/web/search.html&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;/user/**&quot;</span>,<span class="string">&quot;/address/**&quot;</span>,<span class="string">&quot;/file/**&quot;</span>,<span class="string">&quot;/district/**&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>)</span><br><span class="line">    .excludePathPatterns(<span class="string">&quot;/error&quot;</span>); <span class="comment">//不放行error页面有可能导致白名单失效假象</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> BootStrap </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Linux上部署个人项目？</title>
      <link href="/2022/07/07/DeployPersonalProjectsOnLinux/"/>
      <url>/2022/07/07/DeployPersonalProjectsOnLinux/</url>
      
        <content type="html"><![CDATA[<h2 id="部署前的准备工作"><a href="#部署前的准备工作" class="headerlink" title="部署前的准备工作"></a>部署前的准备工作</h2><p>1.服务器：服务器选择的是腾讯云centos7系统的轻量服务器</p><p><img src="https://s1.ax1x.com/2022/07/07/j0yUrq.png" alt="服务器配置"></p><p>2.通过xshell + xftp 连接linux服务器和上传所需的软件包</p><p>①上传jdk8的linux安装包并解压安装 –&gt;  <a href="https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html">官方下载网址</a></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//解压安装包</span><br><span class="line">tar -zxvf jdk-8u291-linux-x64.tar.gz </span><br><span class="line"></span><br><span class="line">//重命名解压出来的文件</span><br><span class="line">mv jdk1.8.0<span class="built_in">_</span>291/ jdk1.8</span><br><span class="line"></span><br><span class="line">//移动到别的地方</span><br><span class="line">mv jdk1.8 /usr/local/</span><br><span class="line"></span><br><span class="line">//修改配置文件</span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">//进行jdk的环境配置</span><br><span class="line">export JAVA<span class="built_in">_</span>HOME=/usr/local/jdk1.8</span><br><span class="line">export CLASSPATH=<span class="built_in">$</span>:CLASSPATH:<span class="built_in">$</span>JAVA<span class="built_in">_</span>HOME/lib/</span><br><span class="line">export PATH=<span class="built_in">$</span>PATH:<span class="built_in">$</span>JAVA<span class="built_in">_</span>HOME/bin/</span><br><span class="line"></span><br><span class="line">//配置完成之后需要重新刷新配置 否则java-version是没提示的</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>②安装docker 参考菜鸟教程  –&gt; <a href="https://www.runoob.com/docker/centos-docker-install.html">centos7安装docker</a></p><p>可以使用自动或手动安装，这里选择手动安装</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">//清除docker旧版本信息</span><br><span class="line">sudo yum remove docker <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>                  docker-client <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>                  docker-client-latest <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>                  docker-common <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>                  docker-latest <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>                  docker-latest-logrotate <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>                  docker-logrotate <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>                  docker-engine</span><br><span class="line">                  </span><br><span class="line"> //设置docker仓库</span><br><span class="line"> sudo yum install -y yum-utils <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>  device-mapper-persistent-data <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>  lvm2</span><br><span class="line">  </span><br><span class="line"> //可以再利用下面的命令设置稳定的仓库源</span><br><span class="line"> //阿里云源</span><br><span class="line"> sudo yum-config-manager <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>    --add-repo <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">//安装最新版本的 Docker Engine-Community 无脑y就完事了</span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line">//启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">//验证是否启动成功</span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line">//出现下列信息代表安装成功</span><br><span class="line">[root@5583880182<span class="built_in">_</span>woiden etc]<span class="params">#</span> docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.17</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.17.11</span><br><span class="line"> Git commit:        100c701</span><br><span class="line"> Built:             Mon Jun  6 23:05:12 2022</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.17</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.17.11</span><br><span class="line">  Git commit:       a89b842</span><br><span class="line">  Built:            Mon Jun  6 23:03:33 2022</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.6</span><br><span class="line">  GitCommit:        10c12954828e7c7c9b6e0ea9b0c02b01407d3ae1</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.2</span><br><span class="line">  GitCommit:        v1.1.2-0-ga916309</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br><span class="line"></span><br><span class="line">//Docker需要用户具有sudo权限，为了便捷 可以将用户加入docker用户组</span><br><span class="line">sudo usermod -aG docker <span class="built_in">$</span>USER</span><br><span class="line"></span><br><span class="line">//查看docker的镜像</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">//设置docker开机自启</span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line">//至此docker安装完成</span><br></pre></td></tr></table></figure><p>③使用docker安装mysql</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//安装mysql 拉取指定版本的mysql镜像</span><br><span class="line">docker pull mysql:8.0.26</span><br><span class="line"></span><br><span class="line">//设置mysql</span><br><span class="line">docker run -p 3306:3306 --name mysql -e MYSQL<span class="built_in">_</span>ROOT<span class="built_in">_</span>PASSWORD=chen  -d mysql:8.0.26</span><br><span class="line"></span><br><span class="line">//如果是已经存在的容器 可以通过这个命令启动</span><br><span class="line">docker start 容器id</span><br><span class="line"></span><br><span class="line">//进入容器e675e2f0643aa3af3c54653383ddb1244bc90186a19bbfdd0f64dd2d6e662671是mysql的id </span><br><span class="line">//可以通过docker ps -a 可以查看得到 </span><br><span class="line">docker exec -it e675e2f0643a /bin/bash</span><br><span class="line"></span><br><span class="line">//想进入mysql必须先进入docker容器</span><br><span class="line">mysql -uroot -pchen</span><br></pre></td></tr></table></figure><p>③nginx的linux安装包  –&gt;  <a href="http://nginx.org/en/download.html">官方下载网址</a></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//安装nginx之前需要先安装相关的依赖和库</span><br><span class="line">yum -y install gcc-c++ zlib-devel openssl-devel libtool</span><br><span class="line"></span><br><span class="line">//进入usr/local目录</span><br><span class="line">cd /usr/local</span><br><span class="line"></span><br><span class="line">//通过命令下载nginx安装包</span><br><span class="line">wget http://nginx.org/download/nginx-1.22.0.tar.gz</span><br><span class="line"></span><br><span class="line">//解压nginx安装包</span><br><span class="line">tar -zxvf nginx-1.22.0.tar.gz</span><br><span class="line"></span><br><span class="line">//删除nginx安装包 可选择的</span><br><span class="line">rm -rf nginx-1.22.0.tar.gz</span><br><span class="line"></span><br><span class="line">//进入nginx目录</span><br><span class="line">cd /usr/local/nginx-1.22.0</span><br><span class="line"></span><br><span class="line">//配置nginx</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line"></span><br><span class="line">//安装nginx</span><br><span class="line">make <span class="built_in">&amp;</span><span class="built_in">&amp;</span> make install</span><br><span class="line"></span><br><span class="line">//返回上级目录就能看到一个nginx文件夹所有东西都安装在这个文件夹中</span><br><span class="line">//此时可以将之前解压出来的文件夹删除掉</span><br><span class="line">rm -rf nginx-1.22.0</span><br><span class="line"></span><br><span class="line">//进入/usr/local/nginx/sbin目录，输入./nginx即可启动nginx</span><br><span class="line">./nginx</span><br><span class="line"></span><br><span class="line">//通过命令查看是否启动</span><br><span class="line">ps -ef |grep nginx</span><br></pre></td></tr></table></figure><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><p>1.打包后端项目</p><p>进入后端项目所在的文件夹 进行打包 打包方式可以 war或者jar包 视情况而定</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//打包项目</span><br><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure><p>2.将打包的jar先通过xftp上传到服务器中</p><p>①cd进入jar包所在的目录，使用java -jar springboot-0.0.1-SNAPSHOT 检查后台是否正常</p><p>②检查正常则设置该jar为后台启动</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//设置后台启动</span><br><span class="line">nohup java -jar springboot-0.0.1-SNAPSHOT.jar <span class="built_in">&amp;</span></span><br><span class="line"></span><br><span class="line">//通过nohup的日常查看是否启动成功</span><br><span class="line">tail -f nohup.out</span><br><span class="line"></span><br><span class="line">//查看当前jar运行的端口号与如何结束进程</span><br><span class="line">ps -ef | grep java</span><br><span class="line"></span><br><span class="line">kill -p pid进程号</span><br></pre></td></tr></table></figure><p>3.后端一切正常，则开始打包前端vue项目</p><p>①进入前端项目所在的文件夹 进行打包</p><p><font color='red'><strong>PS:在打包之前需要将所有跟本地相关的东西替换成线上的东西</strong></font></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//打包项目</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">//在cmd中使用前端插件 测试项目</span><br><span class="line">anywhere -p 8080</span><br></pre></td></tr></table></figure><p>②再通过xftp将打包的dist文件夹上传至服务器</p><p>③在服务器上nginx进行代理设置</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//进入nginx文件夹的conf文件</span><br><span class="line">//修改nginx.conf的内容</span><br><span class="line">//[root@5583880182<span class="built_in">_</span>woiden conf]<span class="params">#</span> vim nginx.conf</span><br><span class="line">location / &#123;</span><br><span class="line">root /home/server/dist;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">try<span class="built_in">_</span>files <span class="built_in">$</span>uri <span class="built_in">$</span>uri/ /index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//配置跨域代理</span><br><span class="line">location /api/ &#123;</span><br><span class="line">proxy<span class="built_in">_</span>pass http://localhost:9090/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//修改完成后需要将nginx重新启动</span><br><span class="line">[root@5583880182<span class="built_in">_</span>woiden conf]<span class="params">#</span> cd ..</span><br><span class="line">[root@5583880182<span class="built_in">_</span>woiden nginx]<span class="params">#</span> cd sbin</span><br><span class="line">[root@5583880182<span class="built_in">_</span>woiden sbin]<span class="params">#</span> ./nginx -s reload</span><br></pre></td></tr></table></figure><p>④至此，前端部署完成</p><h2 id="部署途中的问题"><a href="#部署途中的问题" class="headerlink" title="部署途中的问题"></a>部署途中的问题</h2><p>1.查询linux服务器开放的端口发现<strong>防火墙尚未开启</strong></p><p>需要在dos窗口中通过linux 基础指令进行开启</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">查看防火墙某个端口是否开放</span><br><span class="line">firewall-cmd --query-port=3306/tcp</span><br><span class="line"></span><br><span class="line">开放防火墙端口80</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line">关闭80端口</span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent  </span><br><span class="line"></span><br><span class="line">配置立即生效</span><br><span class="line">firewall-cmd --reload </span><br><span class="line"></span><br><span class="line">查看防火墙状态</span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line">关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">打开防火墙</span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line">开放一段端口</span><br><span class="line">firewall-cmd --zone=public --add-port=8121-8124/tcp --permanent</span><br><span class="line"></span><br><span class="line">查看开放的端口列表</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><p>2.提示<font color='red'><strong>Unit firewalld.service could not be found</strong> </font></p><p>这是说明服务器防火墙没有安装，需要进行安装</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install firewalld firewall-config</span><br></pre></td></tr></table></figure><p>3.提示<font color='red'> <strong>java.sql.SQLNonTransientConnectionException: Public Key Retrieval is not allowed</strong></font></p><p>解决方法：</p><p>mysql8.x版本的数据库在连接的时候报错java.sql.SQLNonTransientConnectionException: Public Key Retrieval is not allowed</p><p>只要在url的后边加上allowPublicKeyRetrieval&#x3D;true重启即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_vue?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;allowPublicKeyRetrieval=true</span></span><br></pre></td></tr></table></figure><p>4.提示 <font color='red'><strong>java.sql.SQLException: Access denied for user ‘root‘@’172.17.0.1’ (using password: YES)</strong></font></p><p>说明：数据库是通过 docker 部署的。容器的 IP 就是这个网段的。根本不用去修改，直接使用localhost就行</p><p>解决方法：排查所有代码中关于数据库密码的地方，修改成正确的密码。 通常都是因为密码问题导致的</p><p>5.在linux服务器中试图后台运行jar包时，提示Unable to access jarfile springboot-0.0.1-SNAPSHOT</p><p>说明：原因未详 如果仅仅使用nohup java -jar springboot-0.0.1-SNAPSHOT.jar 就会报错</p><p>解决方法：使用  nohup java -jar springboot-0.0.1-SNAPSHOT.jar –server.port&#x3D;9090 &amp;</p><p>6.远程连接MYSQL错误<font color='red'><strong>PLUGIN CACHING_SHA2_PASSWORD COULD NOT BE LOADED</strong></font></p><p>说明：这是由于mysql在8.0版本之后修改了密码校验规则导致的，使用下方方法可以解决</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> 远程mysql（linux，docker中）</span><br><span class="line"><span class="params">#</span> 如果你需要使用远程登录，将localhost 改为 <span class="comment">%，下面的‘xxxx’使用你自己的密码</span></span><br><span class="line"><span class="params">#</span> 修改加密规则（非必须）</span><br><span class="line">alter user &#x27;root&#x27;@&#x27;<span class="comment">%&#x27; identified by &#x27;chen&#x27; password expire never;</span></span><br><span class="line"><span class="params">#</span> 更新用户的密码</span><br><span class="line">alter user &#x27;root&#x27;@&#x27;<span class="comment">%&#x27; identified with mysql_native_password by &#x27;xxxx&#x27;;</span></span><br><span class="line"><span class="params">#</span> 刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="params">#</span> 重置密码（==非必须==）</span><br><span class="line">alter user &#x27;root&#x27;@&#x27;<span class="comment">%&#x27; identified by &#x27;xxxx&#x27;;</span></span><br></pre></td></tr></table></figure><p>7.在linux上的<font color='red'><strong>docker中连接mysql发现表中的中文都是？</strong></font>问号显示，sqlyog的客户端则显示正常。</p><p>说明：character_set_connection 是我们通过workbench等客户端连接的时候指定的编码。外部访问数据乱码的问题就出在这个connection连接层上</p><p>解决方法：在docker中进入mysql容器，使用这个命令修改即可 —&gt; SET NAMES ‘utf8’;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES &#x27;utf8&#x27;; </span><br><span class="line"></span><br><span class="line">//上面的这个命令等于下面这三个</span><br><span class="line">SET character<span class="built_in">_</span>set<span class="built_in">_</span>client = utf8;</span><br><span class="line">SET character<span class="built_in">_</span>set<span class="built_in">_</span>results = utf8;</span><br><span class="line">SET character<span class="built_in">_</span>set<span class="built_in">_</span>connection = utf8;</span><br></pre></td></tr></table></figure><p>9.前端页面经过nginx代理后能正常访问，但<font color='red'><strong>登录提示 Json解析异常</strong></font></p><p>​SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data</p><p>说明 ：<font color='red'><strong>这一步大坑，发现是nginx的跨域配置配错了 把&#x2F;api&#x2F; 写成了&#x2F;api</strong></font>，需要格外注意(也有写出&#x2F;api部署成功的，因此解决原因尚未明确)</p><p>10.在登录问题解决后，发现图片上传，存在跨域问题</p><p>解决方法 后端处理上传的controller类上 匹配@CrossOrigin(origins &#x3D; “*”,maxAge &#x3D; 3600) </p><p>11.图片部署在项目文件夹无法访问</p><p>说明： 一开始项目文件保存的位置是在项目工作的src目录下的，但是经过打包之后路径就变了 导致访问不到</p><p>解决方法： ①找到打包后的项目路径</p><p>经后续排查得知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//获取项目在服务器上的绝对路径</span></span><br><span class="line">    <span class="comment">//System.getProperty(&quot;user.dir&quot;)这个命令可以获取springboot_vue_demo在服务器上的绝对路径</span></span><br><span class="line">   <span class="comment">//这里的地址很关键，别写错了 大坑属实</span></span><br><span class="line"> String  photoPath= System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/springboot/src/main/resources/static/img/&quot;</span> + filename;</span><br><span class="line"><span class="comment">//保存到项目目录的静态资源如图片等，在经过mvn clean package 打包之后在生成的jar中的static目录下</span></span><br><span class="line"><span class="comment">//具体访问路径如下 ：http://ip:端口号/目录/文件名</span></span><br><span class="line"><span class="comment">// e.g. : http://localhost:9090/img/8aa5aad5-242d-476d-b526-b775a431bd6c.jpg</span></span><br></pre></td></tr></table></figure><p>​②这里选择重新修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;*&quot;,maxAge = 3600)</span>  <span class="comment">//origins = &quot;*&quot;表示允许所有的请求跨域，处理前端跨域问题，允许value设定的请求进行跨域</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从配置文件中进行取值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;1.14.176.219&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;files.upload.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String filePath;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 处理普通文件上传</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">fileUpload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传文件的原始名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取上传文件的后缀名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffixName</span> <span class="operator">=</span> filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用时间戳作为文件的新名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重命名，即为保存服务器上的文件名字</span></span><br><span class="line">        filename = name + suffixName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先判断要保存图片的文件夹是否存在</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">pictureDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不存在就创建</span></span><br><span class="line">        <span class="comment">//mkdirs() 和 mkdir()的区别就是前者无论上级目录是否存在都会创建，后者如何发现上级目录不存在就不会创建</span></span><br><span class="line">        <span class="keyword">if</span> (!pictureDir.exists())&#123;</span><br><span class="line">            pictureDir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建要保存的图片</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">uploadFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath + filename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行保存</span></span><br><span class="line">        <span class="comment">//可以直接将文件写入到服务器硬盘上</span></span><br><span class="line">        file.transferTo(uploadFile);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Message.success().add(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;http://&quot;</span> + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/file/down/&quot;</span> + filename); <span class="comment">//返回文件下载的url</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 处理文件的下载</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/down/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; down(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath + name);</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span>  file.getAbsolutePath();</span><br><span class="line">        <span class="keyword">if</span> (realPath != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//创建输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">            <span class="comment">//创建字节数组</span></span><br><span class="line">            <span class="comment">//is.available() 这个方法可以在读写操作前先得知数据流里有多少个字节可以读取</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">            <span class="comment">//将流读到字节数组中</span></span><br><span class="line">            is.read(bytes);</span><br><span class="line">            <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">            <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">            <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">            headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(name,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">//设置响应状态码</span></span><br><span class="line">            <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">            <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">            ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">            <span class="comment">//关闭输入流</span></span><br><span class="line">            is.close();</span><br><span class="line">            <span class="keyword">return</span> responseEntity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="随便写点东西"><a href="#随便写点东西" class="headerlink" title="随便写点东西"></a>随便写点东西</h2><ul><li><strong>留给以后自己需要的时候可以看看</strong></li></ul><p>关于这个项目部署到服务器上的操作，可谓是挫折不断，主要是由于本身对linux系统这些也不是很精通，</p><p>导致出现问题后解决花费的时间超乎想象，不过通过这个也算熟悉一下流程吧。</p><p>关于部署这个管理系统尝试了两套部署方案，在努力之下终于都部署成功。</p><p><strong>方案一：腾讯云的Centos7 + Docker + Mysql + Nginx + 通过前端和后端分别打包部署</strong></p><p>上面通篇讲的就是这种部署的过程，就不再说明了。</p><p><strong>方案二：Woiden的Centos7 + Docker + Mysql + Apache  通过前端和后端分别打包部署</strong></p><p>这个方案是由于在woiden使用nginx发现80端口无法正常访问，尝试装过宝塔，提示有其他web环节存在，</p><p>原因可能是woiden预装了apache，所以有冲突，因此只能被迫选择apache。</p><p>粗略记录一下我的部署过程 ：</p><p>由于apache的所有网站资源都存放在<font color='red'>&#x2F;var&#x2F;www&#x2F;html</font>目录下，可以选择将dist打包后的文件统一放在这个文件目录下，</p><p>再通过apache的httpd.conf文件修改网站的根目录。但我选择的是直接将dist打包好的文件放进html文件夹中，</p><p>省去一部分环节，来节省一些时间，但是前端的部署中要解决一个非常重要的环节，</p><p>就是如何解决在除了index的页面刷新报404错误问题，经过查阅资料，也最终解决。</p><p>贴一下有帮助的资料连接 –&gt;  <a href="https://www.freesion.com/article/72721294265/">资料1</a>  |  <a href="t.zoukankan.com/sxshaolong-p-10219527.html">资料2</a>  当时参考这个解决的 | <a href="https://jingyan.baidu.com/article/ea24bc39adfbeb9b63b3314d.html">资料3</a></p><p>后端的部署和 方案一的部署是一样的，就不说了。至此，部署就完成了。</p><hr><p>其实还有第三套方案想尝试部署的，直接将前端打包好的dist文件直接放入后端工程的static文件夹下，</p><p>直接和整个后端一起部署。但是时间有限，这个项目的编写和部署花费了不少的时间，也许是我比较愚笨吧。</p><p>很多事情还没有做，至于这方案三的部署可以留到以后再试试，希望有机会。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Vue的前后端分离项目</title>
      <link href="/2022/07/07/ManagementSystem/"/>
      <url>/2022/07/07/ManagementSystem/</url>
      
        <content type="html"><![CDATA[<h2 id="管理系统"><a href="#管理系统" class="headerlink" title="管理系统"></a>管理系统</h2><p>项目介绍：前端采用Vue3.0 + element-plus，后端采用Springboot + MyBatis-plus的前后端分离项目</p><h3 id="Vue前端"><a href="#Vue前端" class="headerlink" title="Vue前端"></a>Vue前端</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p><img src="https://s1.ax1x.com/2022/07/07/j0risx.png"></p><p>public ：</p><p>​index.html ：将vue文件进行编译后展示出来</p><p>src ：</p><p>​assets ：存储静态资源(CSS样式、图片资源等)</p><p>​componments：公共组件(把一些代码通过组件的方式进行打包，变成一个vue文件，以达到在别的界面进行引入的作用)</p><p>​router(路由)：将页面请求路径与vue文件形成映射关系</p><p>​store：储存页面定义的变量</p><p>​views：存储视图</p><h4 id="第一个页面"><a href="#第一个页面" class="headerlink" title="第一个页面"></a>第一个页面</h4><p>页面主要由 头部导航栏 + 侧边菜单栏 + 主体展示内容组成 ，每个部分都是一个单独的vue组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 头部--&gt;</span><br><span class="line">  &lt;Header/&gt;</span><br><span class="line">  &lt;!-- 主体--&gt;</span><br><span class="line">  &lt;div style=&quot;display:flex&quot;&gt;</span><br><span class="line">    &lt;!-- 侧边栏 --&gt;</span><br><span class="line">    &lt;AsideMenu/&gt;</span><br><span class="line">    &lt;!--   内容区域   --&gt;</span><br><span class="line">    &lt;router-view style=&quot;flex: 1&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//import需要使用的组件，并且在下面进行局部注册，才能在当前文件使用组件标签调用该组件</span><br><span class="line">import Header from &quot;../components/Header&quot;;</span><br><span class="line">import AsideMenu from &quot;../components/AsideMenu&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;layout&quot;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    AsideMenu,</span><br><span class="line">    Header,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>页面功能说明：支持模糊查询(仅支持通过用户名进行查询)、新增、查看用户图书列表、修改用户、删除用户的功能</p><ul><li><p>查看用户图书列表的功能补充说明：</p><p>通过对这个按钮绑定点击事件发起axios异步查询，通过多表联查将得到的数据填充值表格当中，详细代码参考后端项目springboot的UserMapper.xml</p></li></ul><p><img src="https://s1.ax1x.com/2022/07/07/j0rFL6.png" alt="第一个页面"></p><h4 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h4><ul><li><p>基于<strong>旧页面</strong>模块完成了<strong>书籍管理、个人信息查看、注册页面、找回密码</strong> 等其他页面</p></li><li><p><strong>权限控制</strong>，通过在登录成功后，在页面加载完成之前异步查询当前用户的role值判断用户身份，以决定侧边菜单的显示</p></li></ul><blockquote><p> (PS:有一说一，权限控制这部分逻辑过于简单，应该使用更为成熟的后端框架进行权限控制</p><p>  但由于是一个练手的小Demo项目，也就这么粗略的进行控制)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    name: &quot;Aside&quot;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        user :  &#123;&#125;,</span><br><span class="line">        path : this.$route.path, //设置默认高亮的菜单项</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">//获得存储在session中的用户信息</span><br><span class="line">  this.user = JSON.parse(sessionStorage.getItem(&quot;user&quot;) || &quot;&#123;&#125;&quot;)</span><br><span class="line">      request.get(&quot;/user/&quot; + this.user.id).then(res =&gt; &#123;</span><br><span class="line">//将查询后返回的user信息覆盖掉原来的用户信息</span><br><span class="line">        if(res.code === 100 )</span><br><span class="line">        this.user = res.extend.user</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理员界面</p><p><img src="https://s1.ax1x.com/2022/07/07/j0rAeK.png"></p><p>普通用户界面</p><p><img src="https://s1.ax1x.com/2022/07/07/j0rEdO.png"></p><ul><li><p>前端采用简单逻辑实现检测是否<strong>登录的拦截</strong>，通过判断vue的sessionStorage中是否以及存储登录信息来决定是否拦截</p><p>以及通过<strong>配置验证码</strong>功能防止机器人自动操作的恶意行为，在登录页面除了登录还可以选择注册账户、找回账户等功能</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request 拦截器</span></span><br><span class="line"><span class="comment">// 可以自请求发送前对请求做一些处理</span></span><br><span class="line"><span class="comment">// 比如统一加token，对请求参数统一加密</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//取出sessionStorage的信息判断是否已经登录</span></span><br><span class="line">    <span class="keyword">let</span> userStr = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (userStr == <span class="literal">null</span>)&#123;<span class="comment">//为空，代表没有登录 跳转到login界面</span></span><br><span class="line">        router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/07/07/j0rVoD.png"></p><ul><li><p>在书籍管理界面实现了上传和下载的功能</p><ul><li>可以自由上传书籍的封面图片，下载功能的体现在于图片的显示是通过下载呈现的 ，后端配置了一个用于处理上传和下载功能的Controller</li></ul><p><img src="https://s1.ax1x.com/2022/07/07/j0raSs.png"></p></li><li><p>在新闻管理界面集成了富文本编辑框架WangEditor，可以以一个弹窗的形式编辑文本内容</p><p><img src="https://s1.ax1x.com/2022/07/07/j0rI0K.png"></p></li><li><p><font color='red'><strong>剩下的就是一些小的功能啥的了，小项目也没啥好介绍的，随便写写</strong></font></p></li></ul><h3 id="Springboot后端"><a href="#Springboot后端" class="headerlink" title="Springboot后端"></a>Springboot后端</h3><p>1.使用spring Initialzr快速创建项目后 引入mybatis-puls的场景启动器，并注册拦截器以及分页插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis-plus启动器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;top.year21.springboot.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="type">PaginationInnerInterceptor</span> <span class="variable">paginationInnerInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);</span><br><span class="line">        interceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.分别创建controller视图层、service业务层、dao(mapper)持久层、数据库表对应的实体类entity以及用于各种包和类</p><ul><li>后端目录结构</li></ul><p><img src="https://s1.ax1x.com/2022/07/07/j0roTO.png"></p><p>3.进行yml配置文件的基础配置</p><p>注意：<font color='red'><strong>default-enum-type-handler、type-enums-package这两个配置必须在yml配置文件中开启否则枚举类无法正常工作</strong></font></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置数据源</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_vue?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改默认端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 开启数据库字段名自动转换为驼峰，指定实体类的包地址</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">top.year21.springboot.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 在控制台打印mybatis-plus生成的sql查询语句</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">org.apache.ibatis.type.EnumOrdinalTypeHandler</span></span><br><span class="line">  <span class="comment">#扫描通用枚举的包</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">top.year21.springboot.enums</span></span><br></pre></td></tr></table></figure><p>4.编写对应的请求处理Controller</p><ul><li>由于service业务层和dao持久层使用mybatis-plus提供通用service和通用mapper，故不需要写基础sql语句，可直接进行CRUD</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">/*可以区分多个类中的有相同的请求地址</span></span><br><span class="line"><span class="comment">这个controller下的所有请求地址都是以localhost:9090/user/...开始的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 增加新的用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/6/22</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 新增的用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> top.year21.springboot.entity.Message</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span> <span class="comment">//例如这个，完整地址是localhost:9090/user/save</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">savaUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (user.getPassWord() == <span class="literal">null</span>)&#123;</span><br><span class="line">            user.setPassWord(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> Message.success().add(<span class="string">&quot;插入结果&quot;</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/6/23</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 待更新的用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> top.year21.springboot.entity.Message</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span> <span class="comment">//例如这个，完整地址是localhost:9090/user/update</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> userService.updateById(user);</span><br><span class="line">        <span class="keyword">return</span> Message.success().add(<span class="string">&quot;更新结果&quot;</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span> <span class="comment">//例如这个，完整地址是localhost:9090/user/update</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@RequestParam</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> userService.removeById(id);</span><br><span class="line">        <span class="keyword">return</span> Message.success().add(<span class="string">&quot;更新结果&quot;</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/6/22</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum 当前页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页展示的数据量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> search 模糊查询的关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">getPageData</span><span class="params">(<span class="meta">@RequestParam(&quot;pageNum&quot;)</span> Integer pageNum,</span></span><br><span class="line"><span class="params">                               <span class="meta">@RequestParam(&quot;pageSize&quot;)</span>  Integer pageSize,</span></span><br><span class="line"><span class="params">                               <span class="meta">@RequestParam(&quot;search&quot;)</span>  String search)</span>&#123;</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum, pageSize);</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        userQueryWrapper.like(StringUtils.isNotBlank(<span class="string">&quot;search&quot;</span>),<span class="string">&quot;username&quot;</span>,search);</span><br><span class="line">        userService.page(page,userQueryWrapper);</span><br><span class="line">        <span class="keyword">return</span> Message.success().add(<span class="string">&quot;data&quot;</span>,page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.文件上传下载功能</p><ul><li>补充一个<strong>微妙</strong>的点 ：在文件<strong>上传成功</strong>之后<font color='red'><strong>会返回该文件下载的url</strong></font>，实现前端页面展示需要使用这个文件的功能</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin(value = &quot;http://localhost:8080/&quot;,maxAge = 3600)</span>  <span class="comment">//处理前端跨域问题，允许value设定的请求进行跨域</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从配置文件中进行取值</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;http://localhost&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">fileUpload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传文件的原始名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取上传文件的后缀名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffixName</span> <span class="operator">=</span> filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用时间戳作为文件的新名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重命名，即为保存服务器上的文件名字</span></span><br><span class="line">        filename = name + suffixName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取项目在服务器上的绝对路径</span></span><br><span class="line">        <span class="comment">//System.getProperty(&quot;user.dir&quot;)这个命令可以获取springboot_vue_demo在服务器上的绝对路径</span></span><br><span class="line">        <span class="comment">//这里的地址很关键，别写错了 大坑属实</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/springboot/src/main/resources/static/img/&quot;</span> + filename;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行保存</span></span><br><span class="line">        <span class="comment">//可以直接将文件写入到服务器硬盘上</span></span><br><span class="line">        file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">        <span class="comment">//返回下载此文件访问的url</span></span><br><span class="line">        <span class="keyword">return</span> Message.success().add(<span class="string">&quot;url&quot;</span>,ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/file/down/&quot;</span> + filename); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/down/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; down(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/springboot/src/main/resources/static/img/&quot;</span> + name;</span><br><span class="line">        <span class="keyword">if</span> (realPath != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//创建输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">            <span class="comment">//创建字节数组</span></span><br><span class="line">            <span class="comment">//is.available() 这个方法可以在读写操作前先得知数据流里有多少个字节可以读取</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">            <span class="comment">//将流读到字节数组中</span></span><br><span class="line">            is.read(bytes);</span><br><span class="line">            <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">            <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">            <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">            headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(name,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">//设置响应状态码</span></span><br><span class="line">            <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">            <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">            ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">            <span class="comment">//关闭输入流</span></span><br><span class="line">            is.close();</span><br><span class="line">            <span class="keyword">return</span> responseEntity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Demo问题总结"><a href="#Demo问题总结" class="headerlink" title="Demo问题总结"></a>Demo问题总结</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>1.前端往后端传值是采用封装后的axios发起请求的</p><p>创建一个utils文件夹并创建一个js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,  <span class="comment">// 注意！！ 这里是全局统一加上了 &#x27;/api&#x27; 前缀，也就是说所有接口都会加上&#x27;/api&#x27;前缀在，页面里面写接口的时候就不要加 &#x27;/api&#x27;了，否则会出现2个&#x27;/api&#x27;，类似 &#x27;/api/api/user&#x27;这样的报错，切记！！！</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request 拦截器</span></span><br><span class="line"><span class="comment">// 可以自请求发送前对请求做一些处理</span></span><br><span class="line"><span class="comment">// 比如统一加token，对请求参数统一加密</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// config.headers[&#x27;token&#x27;] = user.token;  // 设置请求头</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line"><span class="comment">// 可以在接口响应后统一处理结果</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> res = response.<span class="property">data</span>;</span><br><span class="line">        <span class="comment">// 如果是返回的文件</span></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">config</span>.<span class="property">responseType</span> === <span class="string">&#x27;blob&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 兼容服务端返回的字符串数据</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            res = res ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res) : res</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span> + error) <span class="comment">// for debug</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure><p>在需要使用的页面导入request.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;../utils/request&quot;</span>;</span><br></pre></td></tr></table></figure><p>2.<strong>跨域问题</strong></p><p><font color='red'><strong>在同源策略中，要求 域名、协议、端口 这3部分都要相同</strong></font></p><p>何为跨域问题？跨域是指从一个域名的网页去请求另一个域名的资源。由于有<strong>同源策略</strong>的关系，一般是不允许这么直接访问的。</p><p>Vue中是这么处理跨域问题的，通过创建一个vue.config.js的文件进行下面的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跨域配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;                <span class="comment">//记住，别写错了devServer</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">8080</span>,<span class="comment">//设置前端页面本地默认端口  选填</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123;                 <span class="comment">//设置代理，必须填</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;              <span class="comment">//设置拦截器  拦截器格式   斜杠+拦截器名字，名字可以自己定</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:9090&#x27;</span>,     <span class="comment">//代理的目标地址</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,              <span class="comment">//是否设置同源，输入是的</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;                   <span class="comment">//路径重写</span></span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>                     <span class="comment">//选择忽略拦截器里面的内容</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.<strong>前端axios之get和post请求</strong>  <a href="https://blog.csdn.net/m0_50442138/article/details/123769672">–&gt;参考1</a>   <a href="http://year21.top/2022/04/08/JavaWebNew/">个人博客的参考</a></p><p>get请求建议使用params进行传值，使用data后端会收不到值</p><p>post请求params或者data都行，使用params后端需要用注解@RequestParam 进行接收。使用data后端需要使用@RquestBody接收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="title function_">handleDelete</span>(<span class="params">id</span>)&#123;</span><br><span class="line">  request.<span class="title function_">delete</span>(<span class="string">&quot;/user/delete/&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">      <span class="attr">id</span>:id</span><br><span class="line">    &#125;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&quot;删除成功&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">load</span>();</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"> </span><br><span class="line"><span class="title function_">load</span>(<span class="params"></span>)&#123;</span><br><span class="line">  request.<span class="title function_">get</span>(<span class="string">&quot;/user/query&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">params</span>:&#123;</span><br><span class="line">    <span class="attr">pageNum</span>: <span class="variable language_">this</span>.<span class="property">currentPage</span>,</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="variable language_">this</span>.<span class="property">pageSize</span>,</span><br><span class="line">    <span class="attr">search</span>: <span class="variable language_">this</span>.<span class="property">search</span></span><br><span class="line">  &#125;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">extend</span>.<span class="property">data</span>.<span class="property">records</span> <span class="comment">//将查询的数据在table中展示</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">total</span> = res.<span class="property">extend</span>.<span class="property">data</span>.<span class="property">total</span><span class="comment">//显示数据总条数</span></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">handleEdit</span>(<span class="params">row</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dialogVisible</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">form</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(row))</span><br><span class="line">&#125;,  </span><br></pre></td></tr></table></figure><p>4.<strong>vue语法部分</strong></p><p>①关于Vue 的 export、export default、import <a href="https://blog.csdn.net/harry5508/article/details/84025146"> —&gt; 点击这个</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Header from &quot;@/components/Header&quot;;</span><br><span class="line">import AsideMenu from &quot;@/components/AsideMenu&quot;;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">  name: &quot;Layout&quot;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    Header,</span><br><span class="line">    AsideMenu</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>②关于vue的组件中为什么data必须是一个函数？<a href="https://zhuanlan.zhihu.com/p/190859741"> —&gt; 点击这个</a></p><p>解释：因为如果data是一个对象则会造成数据共享，在多次使用该组件时，改变其中一个组件的值会影响全部该组件的值。</p><p>而如果是通过函数的形式返回出一个对象的话，在每次使用该组件时返回出的对象的地址指向都是不一样的，</p><p>这样就能让各个组件的数据独立。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;Home&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      search: &#x27;&#x27;,</span><br><span class="line">      currentPage: 1,</span><br><span class="line">      pageSize:10,</span><br><span class="line">      total: 10,</span><br><span class="line">      tableData: [</span><br><span class="line">        &#123;</span><br><span class="line">          date: &#x27;2016-05-03&#x27;,</span><br><span class="line">          name: &#x27;Tom&#x27;,</span><br><span class="line">          address: &#x27;No. 189, Grove St, Los Angeles&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleEdit()&#123;</span><br><span class="line">      alert(&quot;测试成功&quot;)</span><br><span class="line">    &#125;,  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>③关于在.vue文件中为什么要在script中使用一个export default  <a href="https://learning.dcloud.io/#/?vid=14">—&gt; vue.js官网的视频解释</a></p><p>export default 可以定义一个组件的属性、数据、函数等内容，同时将该组件声明为公共的，方便复用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;js&quot;</span> &gt;</span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//定义组件名字</span></span><br><span class="line">  name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">  <span class="comment">//局部注册其他地方的组件</span></span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//定义该组件的私有数据</span></span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      form: &#123;&#125;,</span><br><span class="line">      dialogVisible: <span class="literal">false</span>,</span><br><span class="line">      search: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      currentPage: <span class="number">1</span>,</span><br><span class="line">      pageSize:<span class="number">10</span>,</span><br><span class="line">      total: <span class="number">10</span>,</span><br><span class="line">      tableData: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//定义该组件的业务处理方法</span></span><br><span class="line">  methods:&#123;</span><br><span class="line">    add:function () &#123;</span><br><span class="line">      <span class="built_in">this</span>.dialogVisible = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">this</span>.form = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>④关于有些文件为什么import和export default同时存在 <a href="https://cn.vuejs.org/v2/guide/components-registration.html">—&gt; 单组件注册和全局注册</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//import需要使用的组件，并且在下面进行局部注册，才能在当前文件使用组件标签调用该组件</span></span><br><span class="line"><span class="keyword">import</span> Header from <span class="string">&quot;./components/Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> AsideMenu from <span class="string">&quot;./components/AsideMenu&quot;</span>;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="comment">//局部注册以下组件</span></span><br><span class="line">  <span class="comment">//这里的AsideMenu是缩写，完整写法是 AsideMenu：AsideMenu</span></span><br><span class="line">  components:&#123;</span><br><span class="line">    AsideMenu,</span><br><span class="line">    Header,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><font color='red'><strong>5.组件注册问题</strong></font></p><p>在某个vue组件中引入自定义的组件时，控制台报错组件未能被解析：Failed to resolve component:XXX IF this is a native custom element,</p><p>​make sure to exclude it from component resolution via cpmpilerOptions.isCustomElement at xxx </p><blockquote><p>不知道是我的操作顺序有问题，先在组件的components中注册再引入对应的自定义组件之后，就会出现这个错误</p></blockquote><p><strong>个人的解决方法是按照这个顺序：</strong>①先在对应的vue文件中import xxx from  ‘组件的路径 ’  </p><p>​   ②再在compones中进行局部注册</p><p>​   ③最后在页面的template标签中进行使用 </p><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><p>1.后端接收前端传值</p><p><font color='red'><strong>JSON parse error（JSON解析错误）: Cannot deserialize value of type</strong> </font></p><p><img src="https://s1.ax1x.com/2022/07/07/j0r7kD.png"></p><p>针对这次异常解析：后端这个实体类属性使用的是<strong>枚举类型</strong>，前端<a href="https://element.eleme.cn/#/zh-CN/component/radio">单选框radio</a>中label标签中传的值与枚举类中所有对象的value值没有一个匹配。</p><p>​而且在mybatis-plus中，使用枚举类则必须在yml配置文件中将这两个配置**default-enum-type-handler、type-enums-package **开启</p><p>​否则枚举类无法取值和赋值</p><p><font color='red'><strong>实际上，大部分的JSON parse error这个异常都是由于前端传到后端的值与后端所需要的类型不一致所导致的，可以重点排查这个问题</strong></font></p><p> 2.关于实现在用户管理界面异步查询当前行用户所关联的图书数据问题</p><p>程序调用的流程：</p><ul><li><p>点击查看图书列表 –&gt; 发起axios请求 –&gt; 后端接口(&#x2F;user&#x2F;userBookList) 处理该请求  –&gt; userService调用serviceFindPage(id) 方法</p><p>–&gt; userMapper调用findPage(id) 方法 –&gt; UserMapper接口 –&gt; UserMapper接口对应的映射文件UserMapper.xml –&gt;  调用该xml的sql语句进行查询</p><p>–&gt;  返回查询结果(这里是返回了一个User对象，内包含要的数据) –&gt; 将需要的数据填充到弹出的弹窗表格内</p></li></ul><p>这里的sql语句查询的类型是一对多，查询的结果是个集合，因此使用List包装，此外一对多查询字段不一致要使用resultMap包装</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;top.year21.springboot.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userBookList&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;nickName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;nick_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;role&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;bookList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;book&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里是b_id字段要和下方保存一致是因为 查询后的结果起了别名，也就是字段名发生了变化，要根据字段进行赋值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;b_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;b_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span> <span class="attr">column</span>=<span class="string">&quot;b_price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--    Page&lt;User&gt; findPage(Page&lt;User&gt; page);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userBookList&quot;</span>&gt;</span></span><br><span class="line">            SELECT u.*,b.`id` b_id,b.`name` b_name,b.`price` b_price</span><br><span class="line">            FROM `user` u LEFT JOIN `book` b</span><br><span class="line">            ON u.id = b.`user_id`</span><br><span class="line">            WHERE u.`id` = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus</title>
      <link href="/2022/07/07/MyBatis-plus/"/>
      <url>/2022/07/07/MyBatis-plus/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis-plus"><a href="#MyBatis-plus" class="headerlink" title="MyBatis-plus"></a>MyBatis-plus</h2><p><a href="https://www.yuque.com/docs/share/0112fd84-de5f-433b-996a-b9d9cd87dd36#%20%E3%80%8AMyBatisPlus(SpringBoot%E7%89%88)--2022%E3%80%8B">MyBatis-plus</a>的框架结构</p><p>通过扫描指定的实体类 –&gt; 反射抽取实体类的属性 –&gt; 分析是对应哪张表已经查询的字段 </p><p>–&gt; 最终形成查询的sql语句 –&gt; 将sql语句注入mybatis的容器中</p><p><img src="https://s1.ax1x.com/2022/07/07/j0DGG9.png"></p><ul><li>配置数据源</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 配置数据源的类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment"># 配置数据源的各个信息</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在控制台打印mybatis-plus生成的sql查询语句</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><ul><li><p>编写实体类和mapper接口</p><p>主程序上使用**@MapperScan**注解的作用是扫描某个指定包下的所有mapper接口</p><p>也可以使用**@Mapper**对单个mapper接口标识，就不需要在主程序类上使用@MapperScan注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于与数据表形成映射关系的实体类</span></span><br><span class="line"><span class="meta">@Data</span><span class="comment">//简化实体类的开发</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//与用户数据表形成映射关系的mapper表</span></span><br><span class="line"><span class="comment">//Mapper 继承该接口后，无需编写 mapper.xml文件，即可获得CRUD功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;<span class="comment">//BaseMapper的泛型T表示要操作哪个实体类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试</p><p><font color='red'><strong>在测试中如果要自动装配且使用到容器内的bean一定要添加@RunWith(SpringRunner.class) 此注解</strong></font></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">public</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//Wrapper条件构造器，设置为null表示不以任何条件进行查询</span></span><br><span class="line">        System.out.println(<span class="string">&quot;userMapper的使用：&quot;</span> + userMapper.selectList(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通用CRUD接口"><a href="#通用CRUD接口" class="headerlink" title="通用CRUD接口"></a>通用CRUD接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BaseMapper&lt;T&gt; 这个接口提供了大量基础的有关对数据库crud操作的方法</span></span><br><span class="line"><span class="comment">//泛型参数T 则是说明这个自定义的mapper是对数据库中哪个能映射成泛型参数T类型的表进行的具体操作</span></span><br><span class="line"><span class="comment">//自定义的mapper接口继承了BaseMapper就能使用它定义的方法，也就直接拥有了crud能力</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IService接口是所有service的父类，其内封装了大量基础的业务处理所需要调用的与数据交互的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ServiceImpl&lt;M extends BaseMapper&lt;T&gt;, T&gt;是IService&lt;T&gt;的实现类，里面有IService定义的方法</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>继承通用mapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span> <span class="comment">//在测试中如果使用到容器内的bean一定要添加此注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">public</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//Wrapper条件构造器，设置为null表示不以任何条件进行查询</span></span><br><span class="line">        System.out.println(<span class="string">&quot;userMapper的使用：&quot;</span> + userMapper.selectList(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//mybatis-plus生成的sql语句</span></span><br><span class="line">        <span class="comment">//INSERT INTO user ( id, name, age, email ) VALUES ( ?, ?, ?, ? )</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(<span class="number">16</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;test@qq.com&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;影响行数：&quot;</span> + result );</span><br><span class="line">        System.out.println(user.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//根据id进行删除</span></span><br><span class="line">        <span class="comment">//DELETE FROM user WHERE id=?</span></span><br><span class="line"><span class="comment">//        int result = userMapper.deleteById(1537694705980129281L);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据map集合中所设置的条件进行删除</span></span><br><span class="line">        <span class="comment">// DELETE FROM user WHERE name = ? AND age = ?</span></span><br><span class="line"><span class="comment">//        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,&quot;test&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;age&quot;,16);</span></span><br><span class="line"><span class="comment">//        int result = userMapper.deleteByMap(map);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据id进行批量删除</span></span><br><span class="line">        <span class="comment">//DELETE FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">        List&lt;Long&gt; idList = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteBatchIds(idList);</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//根据id进行修改</span></span><br><span class="line">        <span class="comment">//UPDATE user SET name=?, email=? WHERE id=?</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">4L</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;user1@qq.com&quot;</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//根据id查询用户信息</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email FROM user WHERE id=?</span></span><br><span class="line"><span class="comment">//        User user = userMapper.selectById(4L);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据id进行批量查询用户信息</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line"><span class="comment">//        List&lt;Long&gt; idList = Arrays.asList(4L, 5L, 6L);</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; users = userMapper.selectBatchIds(idList);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据map集合的信息进行查询</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email FROM user WHERE name = ? AND age = ?</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;21&quot;</span>);</span><br><span class="line"><span class="comment">//        List&lt;User&gt; users = userMapper.selectByMap(map);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据条件进行查询，为null表示无条件查询</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email FROM user</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; users = userMapper.selectList(null);</span></span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; users = userMapper.selectByIdUserMap(<span class="number">4L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户信息：&quot;</span> + users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继承通用Iservice接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//查询总记录数</span></span><br><span class="line">        <span class="comment">//SELECT COUNT( * ) FROM user</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> userService.count();</span><br><span class="line">        System.out.println(<span class="string">&quot;总记录数:&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertMore</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//批量添加多个数据</span></span><br><span class="line">        <span class="comment">//实际上还是通过多次执行 INSERT INTO user ( id, name, age ) VALUES ( ?, ?, ? )</span></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setName(<span class="string">&quot;test&quot;</span> + i);</span><br><span class="line">            user.setAge(<span class="number">15</span>+i);</span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> userService.saveBatch(users);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否成功:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><h4 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h4><p>情况一：当出现实体类和数据库的表名不一致的情况，</p><p>解决方法：</p><p>​①可以在实体类上使用@TableName注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span><span class="comment">//简化实体类的开发</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;t_user&quot;)</span><span class="comment">//设置实体类对应的表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​②在配置文件中使用全局配置所有表的前缀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#配置mybatis-plus的全局配置</span><br><span class="line"> global-config:</span><br><span class="line">   db-config:</span><br><span class="line">     table-prefix: t_</span><br></pre></td></tr></table></figure><h4 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h4><ul><li>主键字段和实体类属性不一致问题</li></ul><p>情况二：当属性和字段都是uid，而mybatisplus默认使用id作为主键字段时</p><p>解决方法：使用@TableId进行标注，标注此注解的属性所对应的字段作为数据表的主键</p><p>情况三：当属性是id，但对应的主键字段不是id的时候</p><p>解决方法：使用@TableId的value属性进行主键字段设置</p><p>情况四：当<strong>mybatisplus主键字段为空则默认使用雪花算法</strong>时，想要修改主键字段为自动递增</p><p>解决方法：使用@TableId的table属性IdType.AUTO进行设置，<font color='red'><strong>前提是数据库表的主键字段必须已经设置为自增</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@TableId将属性所对应额字段指定为主键</span></span><br><span class="line"><span class="comment">//@TableId注解的value属性的用于指定主键的字段</span></span><br><span class="line"><span class="comment">//@TableId注解的table属性的用于设置主键生成策略</span></span><br><span class="line"><span class="meta">@TableId(value = &quot;uid&quot;,type = IdType.AUTO)</span></span><br><span class="line">   <span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置全局统一的主键生成策略</span></span><br><span class="line"><span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><h4 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h4><ul><li>普通字段和实体类属性不一致问题</li></ul><p>情况一：实体类属性采用大驼峰命名方式，数据库表采用下划线命名方式</p><p>解决方法：在mybatis中可以在核心配置文件中设置驼峰转换，而在mybatis-plus中也有默认的转换设置</p><p>情况二：实体类属性和数据表的字段完全不符合</p><p>解决方法：使用@TableField注解指定属性所对应的字段名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(&quot;user_name&quot;)</span> <span class="comment">//指定属性所对应的字段名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><h4 id="TableLogic"><a href="#TableLogic" class="headerlink" title="@TableLogic"></a>@TableLogic</h4><p>物理删除：真实删除，即将对应的数据真正的从数据库中进行删除，之后数据库无法查询此数据</p><p>逻辑删除：假删除，即将对应的数据代表是否为删除的字段的状态修改为被删除的状态，之后在数据库仍然可以查询到此数据</p><p>使用场景：进行数据的恢复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span>  <span class="comment">//表示此属性对应的是逻辑删除的字段</span></span><br><span class="line">   <span class="keyword">private</span> Integer isDeleted;</span><br></pre></td></tr></table></figure><hr><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p>Wrapper ： <strong>条件构造抽象类</strong>，最顶端父类 </p><ul><li><p>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件 </p></li><li><ul><li>QueryWrapper ： 查询条件封装 </li><li>UpdateWrapper ： Update 条件封装 </li><li>AbstractLambdaWrapper ： 使用Lambda 语法</li></ul></li><li><ul><li><ul><li>LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper </li><li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</li></ul></li></ul></li></ul><p><img src="https://s1.ax1x.com/2022/07/07/j0DYx1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusWrapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//查询用户名包含a，且年龄在20-30之间，邮箱信息不为null的用户信息</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email,is_deleted FROM user WHERE is_deleted=0</span></span><br><span class="line">        <span class="comment">// AND (email IS NOT NULL AND age BETWEEN ? AND ? AND name LIKE ?)</span></span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        userQueryWrapper.isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">                .between(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line">                .like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        userMapper.selectList(userQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//查询用户信息，按照年龄的降低排序，若年龄相同，则按照id升序排序</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email,is_deleted FROM user WHERE is_deleted=0 ORDER BY age DESC,id ASC</span></span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        userQueryWrapper.orderByDesc(<span class="string">&quot;age&quot;</span>).orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        userMapper.selectList(userQueryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//删除邮箱信息为null的客户信息</span></span><br><span class="line">        <span class="comment">//UPDATE user SET is_deleted=1 WHERE is_deleted=0 AND (email IS NULL)</span></span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        userQueryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.delete(userQueryWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//将(年龄大于20且用户包含有a)或邮箱为null的用户信息修改</span></span><br><span class="line">        <span class="comment">//UPDATE user SET name=?, email=? WHERE is_deleted=0</span></span><br><span class="line">        <span class="comment">// AND (age &gt; ? AND name LIKE ? OR email IS NULL)</span></span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        userQueryWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>)</span><br><span class="line">                         .like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">                         .or()</span><br><span class="line">                         .isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;test00&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;test00@qq.com&quot;</span>);</span><br><span class="line">        System.out.println(userMapper.update(user, userQueryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//将用户包含有a且(年龄大于20或邮箱为null)的用户信息修改</span></span><br><span class="line">        <span class="comment">//lambda中的条件有更高的优先级</span></span><br><span class="line">        <span class="comment">//UPDATE user SET name=?, email=? WHERE is_deleted=0</span></span><br><span class="line">        <span class="comment">// AND (name LIKE ? AND (email IS NULL OR age &gt; ?))</span></span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        userQueryWrapper.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">                .and(i -&gt; i.isNull(<span class="string">&quot;email&quot;</span>).or().gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;test11&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;test11@qq.com&quot;</span>);</span><br><span class="line">        System.out.println(userMapper.update(user, userQueryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//查询指定的字段</span></span><br><span class="line">        <span class="comment">//查询用户的年龄、名字、邮箱的信息</span></span><br><span class="line">        <span class="comment">//SELECT name,age,email FROM user WHERE is_deleted=0</span></span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        userQueryWrapper.select(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; users = userMapper.selectMaps(userQueryWrapper);</span><br><span class="line">        users.forEach(System.out :: println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//实现子查询</span></span><br><span class="line">        <span class="comment">//查询id小于等于30的用户信息</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email,is_deleted FROM user WHERE is_deleted=0</span></span><br><span class="line">        <span class="comment">//AND (id IN (select id from user where id &lt;= 30))</span></span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        userQueryWrapper.inSql(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;select id from user where id &lt;= 30&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">        users.forEach(System.out :: println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//将用户包含有a且(年龄大于20或邮箱为null)的用户信息修改</span></span><br><span class="line">        <span class="comment">//UPDATE user SET name=?,email=? WHERE is_deleted=0</span></span><br><span class="line">        <span class="comment">//AND (name LIKE ? AND (age &gt; ? OR email IS NULL))</span></span><br><span class="line">        UpdateWrapper&lt;User&gt; userUpdateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        userUpdateWrapper.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">                            .and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">        userUpdateWrapper.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;test22&quot;</span>).set(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;test22@qq.com&quot;</span>);</span><br><span class="line">        userMapper.update(<span class="literal">null</span>,userUpdateWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//模拟模糊查询</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email,is_deleted FROM user WHERE is_deleted=0</span></span><br><span class="line">        <span class="comment">// AND (age &gt;= ? AND age &lt;= ?)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//判断某个字符串不为null、不为空字符串、不为空白符</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(userName))&#123;</span><br><span class="line">            userQueryWrapper.like(<span class="string">&quot;name&quot;</span>,userName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ageBegin != <span class="literal">null</span>)&#123;</span><br><span class="line">            userQueryWrapper.ge(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ageEnd != <span class="literal">null</span>)&#123;</span><br><span class="line">            userQueryWrapper.le(<span class="string">&quot;age&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//模拟模糊查询的优化写法</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email,is_deleted FROM user WHERE is_deleted=0</span></span><br><span class="line">        <span class="comment">// AND (age &gt; ? AND age &lt; ?)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        userQueryWrapper.like(StringUtils.isNotBlank(userName),<span class="string">&quot;name&quot;</span>,userName)</span><br><span class="line">                    .ge(ageBegin != <span class="literal">null</span>,<span class="string">&quot;age&quot;</span>,ageBegin)</span><br><span class="line">                    .le(ageEnd != <span class="literal">null</span>,<span class="string">&quot;age&quot;</span>,ageEnd);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//LambdaQueryWrapper可以防止字段名写错</span></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email,is_deleted FROM user WHERE is_deleted=0</span></span><br><span class="line">        <span class="comment">// AND (age &gt;= ? AND age &lt;= ?)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.like(StringUtils.isNotBlank(userName),User::getName,userName)</span><br><span class="line">                .ge(ageBegin != <span class="literal">null</span>,User::getAge,ageBegin)</span><br><span class="line">                .le(ageEnd != <span class="literal">null</span>,User::getAge,ageEnd);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//LambdaUpdateWrapper可以防止字段名写错</span></span><br><span class="line">        <span class="comment">//将用户包含有a且(年龄大于20或邮箱为null)的用户信息修改</span></span><br><span class="line">        <span class="comment">//UPDATE user SET name=?,email=? WHERE is_deleted=0</span></span><br><span class="line">        <span class="comment">// AND (name LIKE ? AND (age &gt; ? OR email IS NULL))</span></span><br><span class="line">        LambdaUpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.like(User::getName,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">                .and(i -&gt; i.gt(User::getAge,<span class="number">20</span>).or().isNull(User::getEmail));</span><br><span class="line">        wrapper.set(User::getName,<span class="string">&quot;test22&quot;</span>).set(User::getEmail,<span class="string">&quot;test22@qq.com&quot;</span>);</span><br><span class="line">        userMapper.update(<span class="literal">null</span>,wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h4><p>①必须通过配置类 + @Bean注册分页的拦截器</p><p>②分页功能的模拟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①必须通过配置类 + @Bean注册分页的拦截器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描mapper接口所在的包</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;top.year21.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 注册MyBatisPlus的分页插件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/6/17</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line"></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//②分页功能的模拟</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SELECT id,name,age,email,is_deleted FROM user WHERE is_deleted=0 LIMIT ?</span></span><br><span class="line">         userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有数据都封装在了这个page对象中</span></span><br><span class="line">        System.out.println(page);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>自定义分页插件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; <span class="title function_">selectByIdUserMap</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 通过年龄查询用户信息并分页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/6/17</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page MyBatisPlus提供的参数对象，必须位于第一个参数的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age 用户年龄</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page&lt;top.year21.mybatisplus.entity.User&gt;</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    Page&lt;User&gt; <span class="title function_">selectPageCustomzied</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page&lt;User&gt; page, <span class="meta">@Param(&quot;age&quot;)</span>Integer age)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="乐观锁插件"><a href="#乐观锁插件" class="headerlink" title="乐观锁插件"></a>乐观锁插件</h4><p>使用乐观锁插件的步骤：</p><p>①在某个配置类中注册乐观锁插件 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描mapper接口所在的包</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;top.year21.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 注册MyBatisPlus的分页插件</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">//添加乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>②在实体类的属性对应的字段上添加@Version注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span> <span class="comment">// 标识乐观锁版本号字段</span></span><br><span class="line">        <span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure><p>③模拟冲突过程，并用乐观锁插件解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小李查询商品价格</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小李查询商品价格&quot;</span> + productLi.getPrice());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小王查询商品价格</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小王查询商品价格&quot;</span> + productWang.getPrice());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小李将商品价格添加50</span></span><br><span class="line">        productLi.setPrice(productLi.getPrice() + <span class="number">50</span>);</span><br><span class="line">        productMapper.updateById(productLi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小李将商品价格减少30</span></span><br><span class="line">        productWang.setPrice(productWang.getPrice() - <span class="number">30</span> );</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> productMapper.updateById(productWang);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//操作失败</span></span><br><span class="line">            <span class="type">Product</span> <span class="variable">productWang2</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">            productWang2.setPrice(productWang2.getPrice() - <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">            productMapper.updateById(productWang2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//老板查询商品</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productBoss</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;老板查询商品价格&quot;</span> + productBoss.getPrice());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="通用枚举"><a href="#通用枚举" class="headerlink" title="通用枚举"></a>通用枚举</h3><p>使用场景：需要将某个枚举类的对象放入数据库。例如男女的性别在数据库中以1或2进行表示</p><p>使用教程：①在yml的配置文件中开始通用枚举的包的扫描</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#扫描通用枚举的包</span></span><br><span class="line"><span class="attr">type-enums-package:</span> <span class="string">top.year21.mybatisplus.enums</span></span><br></pre></td></tr></table></figure><p>②在实体类的属性上使用@EnumValue注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">SexEnum</span> &#123;</span><br><span class="line">    MALE(<span class="number">1</span>,<span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="number">2</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span> <span class="comment">//将注解所标识的属性的值存储到数据库中</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sexName;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer sex, String sexName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.sexName = sexName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSexName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sexName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h3><p>①引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastAutoGeneratorTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置我们需要创建在哪的路径</span></span><br><span class="line"><span class="comment">//        String path = &quot;/Users/luxiaogen/Documents/RoadTo2w/Java/尚硅谷/MyBatisPlus-2022/demo&quot;;</span></span><br><span class="line">        <span class="comment">// 这里我是mysql8 5版本可以换成 jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(<span class="string">&quot;year21&quot;</span>) <span class="comment">// 设置作者</span></span><br><span class="line">                            <span class="comment">// .enableSwagger() // 开启 swagger 模式</span></span><br><span class="line">                            .fileOverride() <span class="comment">// 覆盖已生成文件</span></span><br><span class="line">                            .outputDir(<span class="string">&quot;D://mybatisplus&quot;</span>); <span class="comment">// 指定输出目录</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(<span class="string">&quot;top.year21&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .moduleName(<span class="string">&quot;mybatisplus&quot;</span>) <span class="comment">// 设置父包模块名</span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;D://mybatisplus&quot;</span>)); <span class="comment">// 设置mapperXml生成路径</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.addInclude(<span class="string">&quot;user&quot;</span>) <span class="comment">// 设置需要生成的表名</span></span><br><span class="line">                            .addTablePrefix(<span class="string">&quot;t_&quot;</span>, <span class="string">&quot;c_&quot;</span>); <span class="comment">// 设置过滤表前缀</span></span><br><span class="line">                &#125;).templateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>()) <span class="comment">// 使用Freemarker 引擎模板，默认的是Velocity引擎模板</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h3><p>应用场景：一个业务涉及多个不同库中的数据表时如何处理</p><p>1.使用多数据源必须引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--多数据源依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置多数据源</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 配置数据源信息 datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="comment"># 设置默认的数据源或者数据源组,默认值即为master</span></span><br><span class="line">      <span class="attr">primary:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span></span><br><span class="line">      <span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">master:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">&#x27;root&#x27;</span></span><br><span class="line">        <span class="attr">slave_1:</span></span><br><span class="line">          <span class="comment"># 我的数据库是8.0.27 5版本的可以使用jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_1?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">&#x27;root&#x27;</span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DS(&quot;slave_1&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ProductMapper, Product&gt; <span class="keyword">implements</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DS(&quot;master&quot;)</span> <span class="comment">//标记操作的是配置信息中数据源为master的配置</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyBatisX插件"><a href="#MyBatisX插件" class="headerlink" title="MyBatisX插件"></a>MyBatisX插件</h3><p>下载：可以从IDEA的插件市场进行下载，快速将mapper接口和mapper接口的映射文件形成关联</p><p>作用：①代码生成器，通过指定数据库的查看数据表生成对应的service层、mapper接口以及mapper接口的映射文件等，</p><p>​但仅仅使用单表生成</p><p>​②以及快速生成CRUD的sql查询语句</p><p>使用教程：<a href="https://www.yuque.com/docs/share/0112fd84-de5f-433b-996a-b9d9cd87dd36#Nz285">mybatis_plus</a></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volatile关键字</title>
      <link href="/2022/05/23/Volatile/"/>
      <url>/2022/05/23/Volatile/</url>
      
        <content type="html"><![CDATA[<h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><h3 id="现代计算机的内存模型"><a href="#现代计算机的内存模型" class="headerlink" title="现代计算机的内存模型"></a>现代计算机的内存模型</h3><p>实早期计算机中cpu和内存的速度是差不多的，但在现代计算机中，<code>cpu的指令速度远超内存的存取速度</code>，由于计算机的存储设备与处理器的运算速度有几个数量级的</p><p>差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的<code>高速缓存（Cache）</code>来作为内存与处理器之间的缓冲。</p><p>将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中，这样处理器就无须等待缓慢的内存读写了。</p><p>基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是也为计算机系统带来更高的复杂度，因为它引入了一个新的问题：<code>缓存一致性（CacheCoherence）</code>。</p><p>在多处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（MainMemory）。</p><p><img src="C:\Users\hcxs1986\AppData\Roaming\Typora\typora-user-images\image-20220426122833383.png" alt="内存模型"></p><h3 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h3><p><code>Java内存模型(JavaMemoryModel)</code>描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量，存储到内存和从内存中读取变量这样的底层细</p><p>节。</p><ul><li>本地内存和主内存的关系：</li></ul><p><img src="https://s1.ax1x.com/2022/05/23/X903vt.png" alt="两者的关系"></p><h3 id="数据的可见性"><a href="#数据的可见性" class="headerlink" title="数据的可见性"></a>数据的可见性</h3><p>数据的可见性：当一个数据出现变化后，其他地方获取的数据与修改后的数据保持一致。</p><p>1.加锁(synchornized或者lock)能保证数据可见性的原因：</p><p>①在获得锁后的线程，会先将自己的工作内存清空，从主内存中读取并复制自己要操作的共享变量的副本</p><p>②在操作完成后，会把工作内存中的共享变量的新值对主内存中的共享变量的旧值进行覆盖，最后释放锁</p><p>③因为在synchornized和lock修饰的内部线程都是单线程，没有获得锁的其余线程都处于阻塞状态，也就保证了数据的可见性</p><p>2.Volatile关键字是如何保证数据的可见性的？</p><p>当一个实例变量或全局变量被Volatile修饰时，当一个线程对这些变量进行修改时，新值就会被立即强制写入到主内存中，</p><p>同时让其他的线程工作内存中的这些变量副本的缓存全部失效，当其他线程发现缓存已经失效了，就会到主内存中重新获取新值，</p><p>因此也就保证了数据的可见性。</p><h3 id="禁止指令重排序"><a href="#禁止指令重排序" class="headerlink" title="禁止指令重排序"></a>禁止指令重排序</h3><p>在JMM的设定中会针对编译器制定volatile重排序规则：</p><ul><li>在volatile的写操作前后，分别添加1个内存屏障阻止了指令的重排序</li><li>在volatile的读操作后面，添加2个内存屏障阻止了指令的重排序</li></ul><p><img src="https://s1.ax1x.com/2022/05/23/X90NVS.png" alt="写"></p><p><img src="https://s1.ax1x.com/2022/05/23/X90a5Q.png" alt="读"></p><h3 id="单例模式双重检查"><a href="#单例模式双重检查" class="headerlink" title="单例模式双重检查"></a>单例模式双重检查</h3><p>使用volatile可以在单例模式中实现可见性和禁止指令重排序。</p><p>以创建对象为例，对象实际上创建对象要进过如下几个步骤：</p><p>①分配内存空间。</p><p>②调用构造器，初始化实例。</p><p>③返回地址给引用</p><p>在这个过程中是可能发生指令重排序的，例如构造函数在对象初始化完成前就赋值完成了，在内存里面开辟了一片存储区域后直接返回内存的引用，</p><p>这个时候还没真正的初始化完对象，对象的值还是为null的。而别的线程此刻去判断instance！&#x3D;null，就会导致空指针的异常。</p><p>可见性得到保证是因为volatile修改的变量会让此变量在其他线程工作内存中的副本失效，必须重新读取主内存的值</p><h3 id="原子性问题"><a href="#原子性问题" class="headerlink" title="原子性问题"></a>原子性问题</h3><p>在对基本数据类型(除了long和double类型的)的读取和赋值的过程中都是原子性的，即不会有任何指令能插入。</p><p>而volailte是修饰共享变量(类变量和全局变量)，因此是没有原子性的</p><h3 id="volatile与synchronized的区别"><a href="#volatile与synchronized的区别" class="headerlink" title="volatile与synchronized的区别"></a>volatile与synchronized的区别</h3><p>volatile只能修饰实例变量和类变量，而synchronized可以修饰方法，以及代码块。</p><p>volatile保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全);而synchronized是一种排他(互斥)的机制。</p><p>volatile用于禁止指令重排序：可以解决单例双重检查对象初始化代码执行乱序问题。</p><p>volatile可以看做是轻量版的synchronized，volatile不保证原子性，但是如果是对一个共享变量进行多个线程的赋值，而没有其他的操</p><p>作，那么就可以用volatile来代替synchronized，因为赋值本身是有原子性的，而volatile又保证了可见性，所以就可以保证线程安全了。</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2022/05/23/SpringBoot/"/>
      <url>/2022/05/23/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot概述"><a href="#SpringBoot概述" class="headerlink" title="SpringBoot概述"></a>SpringBoot概述</h2><h3 id="SpringBoot程序创建"><a href="#SpringBoot程序创建" class="headerlink" title="SpringBoot程序创建"></a>SpringBoot程序创建</h3><p>①对Maven进行设定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②创建Maven工程，在pom文件中设置工程的父工程以及导入Springboot的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③创建主程序类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@SpringBootApplication注解标识这是一个SpringBoot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④简化配置</p><ul><li><font color='red'><strong>所有的配置信息只需要写在resource文件夹下</strong></font></li></ul><p>⑤测试程序的运行是否成功：<font color='red'><strong>只需要启动主程序类的main方法即可</strong></font></p><p>⑥简化部署步骤</p><p>插件在没有设置打包方式的情况下，自动打包为jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SpringBoot特点"><a href="#SpringBoot特点" class="headerlink" title="SpringBoot特点"></a>SpringBoot特点</h3><p>1.依赖管理</p><p>①父项目作为依赖管理，声明了所有开发中常用的依赖的版本号,自动版本仲裁机制，子项目继承父项目不需要填写依赖的版本号</p><p>②开发导入starter场景启动器，spring-boot-starter-* ： *是某种场景</p><p>③可以修改默认的父项目的版本控制</p><p>2.自动配置</p><p>①自动配置tomcat(引入Tomcat依赖、配置Tomcat)</p><p>②自动配置SpringMVC</p><p>③自动配置Web常见功能</p><p>④默认的包结构</p><ul><li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li><li>无需配置之前的包扫描</li><li>改变扫描路径，@SpringBootApplication(scanBasePackages&#x3D;”xxx.xxx”)或者@ComponentScan 指定扫描路径</li></ul><p>⑤各种配置拥有默认值</p><p>⑥按需加载所有自动配置</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>1.@Configuration</p><ul><li><strong>proxyBeanMethods：代理bean的方法</strong></li></ul><p>Full(proxyBeanMethods &#x3D; true)、【保证每个@Bean方法被调用多少次返回的组件都是单实例的】</p><p>Lite(proxyBeanMethods &#x3D; false)【每个@Bean方法被调用多少次返回的组件都是新创建的】</p><p>有组件依赖的情况必须使用Full模式默认。其他默认是否Lite模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证组件依赖是否解决，是否保证了bean实例的唯一性</span></span><br><span class="line"><span class="comment">//@Configuration(proxyBeanMethods = false)的情况下</span></span><br><span class="line"><span class="type">Pet</span> <span class="variable">tom</span> <span class="operator">=</span> config.getBean(<span class="string">&quot;pet&quot;</span>,Pet.class);</span><br><span class="line">System.out.println(config.getBean(<span class="string">&quot;person&quot;</span>,Person.class).getPet() == tom);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>2.@Import导入容器中的组件默认名字就是全类名</p><p>3.@Conditonal 条件装配，满足Condition指定的条件才会进行组件注入</p><p>@ConditionalOnBean表示当容器中存在某个bean对象才会执行什么操作</p><ul><li>标注在类上则表示要满足才会导入类中的所有组件</li><li>标注在方法上则表示要满足才会导入方法内的所有组件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此注解表示容器中有id为pet的组件才会往容器中注册下面@Bean标注的</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(name= &#123;&quot;pet&quot;&#125;)</span>    </span><br><span class="line"><span class="comment">//方法名作为容器中组件的id，返回值类型为容器中组件的类型</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;test&quot;</span>, <span class="number">20</span>);</span><br><span class="line">      person.setPet(pet());</span><br><span class="line">      <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4.@ImportResource 导入Spring原生的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:bean.xml&quot;)</span></span><br></pre></td></tr></table></figure><p>5.配置绑定 (使用Java读取到properties文件中的内容，并且把它封装到JavaBean中)</p><p>方式一：@ConfigurationProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也就是必须使用@ConfigurationProperties的类必须将其加入容器中</span></span><br><span class="line"><span class="comment">//只有在容器中的组件才能使用SpringBoot提供的功能</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//value的值car表示将与配置文件application.properties中属性以car为前缀的变量值进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(value = &quot;car&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarProperties</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>方式二：@EnableConfigurationProperties + @ConfigurationProperties(这个方式适用于导入第三方jar包)</p><p>@EnableConfigurationProperties 必须标注在配置类上</p><p>@ConfigurationProperties标注在进行配置绑定的类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.开启CarProperties属性配置功能</span></span><br><span class="line"><span class="comment">//2.将这个组件自动导入到容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CarProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(value = &quot;car&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarProperties</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p>@SpringBootConfiguration 代表这是一个配置类</p><p>@ComponentScan 扫描指定包路径下的组件</p><p>@EnableAutoConfiguration(<font color='red'><strong>重点</strong></font>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//等同于下面三个</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br></pre></td></tr></table></figure><p>关于@EnableAutoConfiguration注解的详解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><p>@AutoConfigurationPackage注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用Registrar给容器中导入多个组件</span></span><br><span class="line"><span class="comment">//在这个内部类的方法中将MainApplication所在包下的所有组件进行批量注册</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br></pre></td></tr></table></figure><p>@Import(AutoConfigurationImportSelector.class)注解</p><p><font color='red'><strong>虽然在Spring-boot启动时会加载所有默认场景的自动配置类，但最终还是按照条件装配原则@Conditional注解(有些加载了但不生效)</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给容器中批量导入一些组件</span></span><br><span class="line">getAutoConfigurationEntry()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取所有需要导入到容器中的组件</span></span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//利用工厂加载得到所有的组件 </span></span><br><span class="line">Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/*默认扫描当前系统中所有META-INF/spring.factories位置的文件中的内容  </span></span><br><span class="line"><span class="comment">以内容中org.springframework.boot.autoconfigure.EnableAutoConfiguration=为key，</span></span><br><span class="line"><span class="comment">需要注册的组件名为value，最后会逐个注册到ioc容器中</span></span><br><span class="line"><span class="comment">例如：    </span></span><br><span class="line"><span class="comment">spring-boot-autoconfigure-2.6.7.jar这个jar中也有META-INF/spring.factories文件     </span></span><br><span class="line"><span class="comment">这个文件中写死了需要总共加载的所有组件，在spring-boot一启动就会就会加载所有组件*/</span></span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\....   </span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>按照条件装配的例子之一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给容器中加入了文件上传解析器；</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="comment">//容器中有这个类型组件</span></span><br><span class="line"><span class="comment">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> </span><br><span class="line"><span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> &#123;</span><br><span class="line">          <span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line">          <span class="comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class="line"><span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'><strong>SpringBoot自动配置总结：</strong></font></p><p>①SpringBoot先加载所有的自动配置类(xxxAutoConfiguration)</p><p>②每个自动配置类按照条件装配原则来决定是否生效，默认都会绑定配置文件指定的值 xxxxProperties 和 配置文件进行了绑定</p><p>③生效的配置类就会给容器中注册很多的组件(只要容器中存在这些组件代表这些功能就能使用)</p><p>④SpringBoot底层会装配好所有的组件，但只要用户有将对应的组件重新配置，则优先使用用户配置的</p><ul><li><ul><li>@Bean替换底层的组件</li><li>看这个组件是获取的配置文件什么值就去修改。</li></ul></li></ul><p>总的流程就是：<font color='red'><strong>场景starter —&gt; xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></font></p><hr><p>部分使用技巧：</p><p>①引入场景依赖,<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">官方文档地址</a></p><p>②快速判断哪个组件是否生效：在application.properties配置文件中设置debug&#x3D;true 生效的(Positive)\不生效的(Negative)</p><p>③修改某一项配置</p><ul><li><p>参照<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">官方文档地址</a>修改配置项</p></li><li><p>自己分析。xxxxProperties绑定了配置文件的哪些。</p></li><li><p>自定义加入或者替换组件@Bean、@Component</p></li><li><p>自定义器  XXXXXCustomizer</p></li></ul><h3 id="开发小技巧"><a href="#开发小技巧" class="headerlink" title="开发小技巧"></a>开发小技巧</h3><p>1.lombok(简化JavaBean开发)</p><p>①在pom文件中引入依赖</p><p>②在IDEA中安装lombok插件并重启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//设置属性的get、set方法</span></span><br><span class="line"><span class="meta">@ToString</span> <span class="comment">//设置toString方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  <span class="comment">//设置有参构造器</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span><span class="comment">//设置无参构造器</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(value = &quot;car&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String carName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> carAge;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span><span class="comment">//可以替代sout打印输出信息</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">TestHello</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;请求已进入&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.dev-tools</p><p>Ctrl + F9项目重新编译达到自动重启的目的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置自动重启 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.Spring Initailizr（项目初始化向导）</p><p>1.选择我们需要的开发场景</p><p><img src="https://s1.ax1x.com/2022/05/23/X9dho4.png"></p><p>2.自动依赖引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.year21<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot02<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringBoot02<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.自动创建项目结构</p><p><img src="https://s1.ax1x.com/2022/05/23/X9dIY9.png"></p><p>4.自动编写好主配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBoot02Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringBoot02Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。</p><p>在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p><p>YAML更加关注的是数据本身，</p><p>基本语法：</p><ul><li>key: value；kv之间有空格</li><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li><li>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义&#x2F;不转义</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用yaml表示javaBean</span></span><br><span class="line"><span class="attr">people:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">&quot;测试\n人物 &quot;</span></span><br><span class="line"><span class="comment"># 单引号会将 \n作为字符串输出，双引号会将\n作为换行符输出</span></span><br><span class="line"><span class="comment"># 单引号会出现转义，双引号不会出现转义</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2020</span><span class="string">/10/9</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"><span class="comment"># 行内写法 interests: [画画,看书]</span></span><br><span class="line">  <span class="attr">interests:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">画画</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">看书</span></span><br><span class="line">  <span class="attr">animal:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">熊猫</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">猫</span></span><br><span class="line"><span class="comment">#  score:</span></span><br><span class="line"><span class="comment">#    technical: 85</span></span><br><span class="line"><span class="comment">#    english: 90</span></span><br><span class="line">  <span class="attr">score:</span> &#123;<span class="attr">technical:</span> <span class="number">85</span>,<span class="attr">english:</span> <span class="number">90</span>&#125;</span><br><span class="line">  <span class="attr">salary:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2000</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">3500</span></span><br><span class="line">  <span class="attr">pet:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xiaoxiao</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">20.1</span></span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">     <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">xiaoxiao</span>,<span class="attr">weight:</span> <span class="number">20.5</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xiao1</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">25.5</span></span><br><span class="line">     <span class="attr">health:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">xiaoe</span>,<span class="attr">weight:</span> <span class="number">25.5</span>&#125;</span><br></pre></td></tr></table></figure><p>可以引入此依赖可以在application.yaml中定义属性显示提示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h3><h4 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h4><h5 id="静态资源的目录"><a href="#静态资源的目录" class="headerlink" title="静态资源的目录"></a>静态资源的目录</h5><p>Ⅰ.静态资源放在类路径下的这些文件夹中： &#x2F;static (或者 &#x2F;public 或 &#x2F;resources 或 &#x2F;META-INF&#x2F;resources)</p><p>都能通过当前项目根路径&#x2F; + 静态资源名 访问 </p><p>原理： 静态映射&#x2F;**</p><ul><li><p>与SpringMVC的处理机制一样，当有非jsp后缀的请求进入时，由前端控制器先进行处理，</p><p>前端控制器不能处理再交给默认的静态资源处理器，如果静态资源处理器不能处理则报404</p></li></ul><p>Ⅱ.设置静态资源访问前缀</p><p>默认无前缀设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure><p>设置之后则静态资源的访问路径为：当前项目 + res + 静态资源名字</p><h5 id="欢迎页支持"><a href="#欢迎页支持" class="headerlink" title="欢迎页支持"></a>欢迎页支持</h5><p>方式一：静态资源路径下  index.html</p><ul><li><p>可以配置静态资源路径</p></li><li><p>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># 修改静态资源默认访问前缀</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**</span></span><br><span class="line"><span class="comment"># 修改静态资源默认路径</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">   <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> [<span class="string">classpath:/test/</span>]</span><br><span class="line">   <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="comment">#禁用所有静态资源规则</span></span><br></pre></td></tr></table></figure><h5 id="自定义-Favicon网页头像"><a href="#自定义-Favicon网页头像" class="headerlink" title="自定义 Favicon网页头像"></a>自定义 Favicon网页头像</h5><p>将favicon.ico 放在静态资源目录下即可。</p><h5 id="静态资源配置绑定原理"><a href="#静态资源配置绑定原理" class="headerlink" title="静态资源配置绑定原理"></a>静态资源配置绑定原理</h5><ul><li>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</li><li>SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效</li></ul><p>给Servlet容器中注册了那些组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, WebProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>, ServletContextAware &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件的相关属性和xxx进行了绑定。WebMvcProperties与spring.mvc、ResourceProperties与spring.web进行绑定</li></ul><p>配置类只有一个有参构造器(实际上是在参数位置使用了@Autowired注解，但配置类中只有一个构造器，所有被省略了)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个方法的参数都会从容器中获取</span></span><br><span class="line"><span class="comment">//WebProperties webProperties：获取了spring.mvc绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//WebMvcProperties mvcProperties：获取了spring.web绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//ListableBeanFactory beanFactory Spring的beanFactory</span></span><br><span class="line"><span class="comment">//messageConvertersProvider 找到所有的HttpMessageConverters</span></span><br><span class="line"><span class="comment">//resourceHandlerRegistrationCustomizerProvider 找到资源处理器的自定义器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//servletRegistrations  给应用注册Servlet、Filter</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WebMvcAutoConfigurationAdapter</span><span class="params">(WebProperties webProperties, WebMvcProperties mvcProperties,</span></span><br><span class="line"><span class="params">ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.resourceProperties = webProperties.getResources();</span><br><span class="line"><span class="built_in">this</span>.mvcProperties = mvcProperties;</span><br><span class="line"><span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line"><span class="built_in">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line"><span class="built_in">this</span>.resourceHandlerRegistrationCustomizer =      resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line"><span class="built_in">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line"><span class="built_in">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line"><span class="built_in">this</span>.mvcProperties.checkConfiguration();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="资源处理的默认规则"><a href="#资源处理的默认规则" class="headerlink" title="资源处理的默认规则"></a>资源处理的默认规则</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//处理webjars的规则</span></span><br><span class="line">    <span class="comment">//所有/webjars/**的请求，都去 classpath:/META-INF/resources/webjars/找资源；    </span></span><br><span class="line">addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line"><span class="comment">//处理静态资源的规则</span></span><br><span class="line"> <span class="comment">//在没有更改静态资源路径的情况下所有/**的请求，都会去以下默认路径找资源，统称为静态资源文件夹（其中&quot;/&quot;表示项目根目录）：   </span></span><br><span class="line">    addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">registration.addResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">ServletContextResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(<span class="built_in">this</span>.servletContext, SERVLET_LOCATION);</span><br><span class="line">registration.addResourceLocations(resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="欢迎页的处理规则"><a href="#欢迎页的处理规则" class="headerlink" title="欢迎页的处理规则"></a>欢迎页的处理规则</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span><br><span class="line"><span class="params">ormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;</span><br><span class="line"><span class="comment">//处理规则设置的方法    </span></span><br><span class="line"><span class="type">WelcomePageHandlerMapping</span> <span class="variable">welcomePageHandlerMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WelcomePageHandlerMapping</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line"><span class="built_in">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line"><span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class="line"><span class="keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">        <span class="comment">//要用欢迎页功能，必须是/**</span></span><br><span class="line">logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage.get());</span><br><span class="line">setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">      <span class="comment">//调用Controller  /index</span></span><br><span class="line">logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h4><p><strong>请求映射@xxxMapping：指将请求与控制器方法进行绑定</strong></p><p><font color='red'><strong>需要一个核心过滤器：HiddenHttpMethodFilter</strong></font>(在SpringBoot中自动装配了，在SpringMVC中需要在web.xml文件手动进行配置)</p><ul><li>即使在SpringBoot自动装配了，但需要使用HiddenHttpMethodFilter还需要<font color='red'><strong>在application.yaml文件中进行开启</strong></font></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启页面表单的rest风格(可选择性开启)</span></span><br></pre></td></tr></table></figure><p>在SpringBoot中的用法和之前一致：</p><p>1.表单提交方式必须是<font color='red'><strong>post 方式</strong></font></p><p>2.表单须携带一个 <font color='red'>**name&#x3D;”_method“，value&#x3D;”当前想要提交的请求方式“ **</font>的隐藏域</p><p>表单使用Rest风格的原理(与SpringMVC底层的执行是一致的)：</p><p>①<font color='red'><strong>所有请求都会被这个HiddenHttpMethodFilter所拦截</strong></font></p><p>②获取原生的request请求，判断是否为POST提交方法</p><p>③获取表单中的_method隐藏域属性的值，将其转换为大写</p><p>④判断转换后的请求方式是否在过滤器的放行名单中</p><p>⑤存在于名单中，使用包装模式将原生的request进行包装返回，在这个过程中重写了getMethod方法</p><p>⑥在过滤器链的放行方法中放行的是被包装后的request</p><ul><li>表单中携带的name&#x3D;”_method“可以通过手动@Bean导入HiddenHttpMethodFilter调用方法修改</li></ul><h5 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h5><p><img src="https://s1.ax1x.com/2022/05/23/X9dHQx.png" alt="原理图示"></p><ul><li><p>mappedHandler &#x3D; getHandler(processedRequest);</p><p>在这个方法中会获取所有的HandlerMapping，逐个寻找每个HandlerMapping的映射规则，</p><p>哪个能处理就将对应的HandlerMapping返回</p></li><li><p>RequestMappingHandlerMapping：保存了所有@RequestMapping和handler的映射规则</p></li></ul><p><img src="https://s1.ax1x.com/2022/05/23/X9djTe.png"></p><ul><li><p>所有的请求映射规则都保存在了HandlerMapping中</p><ul><li>SpringBoot自动配置欢迎页的WelcomePageHandlerMapping，因此访问&#x2F;就能访问到首页index.html</li></ul></li></ul><p><img src="https://s1.ax1x.com/2022/05/23/X9wClt.png"></p><h5 id="SpringBoot获取请求参数"><a href="#SpringBoot获取请求参数" class="headerlink" title="SpringBoot获取请求参数"></a>SpringBoot获取请求参数</h5><p>注解获取：@PathVariable、@RequestHeader、@RequestParam、@CookieValue、@RequestBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;userName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">map</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@PathVariable(&quot;userName&quot;)</span> String userName,</span></span><br><span class="line"><span class="params">                         <span class="meta">@PathVariable</span> Map&lt;String, String&gt; pv,//自动将请求地址中的路径变量封装到这个Map中</span></span><br><span class="line"><span class="params">                                  <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span><br><span class="line"><span class="params">                         <span class="meta">@RequestHeader</span> Map&lt;String, String&gt; header,//自动将请求行信息封装到这个Map中</span></span><br><span class="line"><span class="params">                                  <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,//自动将请求地址中的请求参数封装到这个Map中</span></span><br><span class="line"><span class="params">                                  <span class="meta">@CookieValue(&quot;Idea-43f7d2cf&quot;)</span> String cookie)</span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, id);</span><br><span class="line">        map.put(<span class="string">&quot;username&quot;</span>,userName);</span><br><span class="line">        map.put(<span class="string">&quot;pv&quot;</span>,pv);</span><br><span class="line">        map.put(<span class="string">&quot;userAgent&quot;</span>,userAgent);</span><br><span class="line">        map.put(<span class="string">&quot;header&quot;</span>,header);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        map.put(<span class="string">&quot;cookie&quot;</span>,cookie);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="comment">//@RequestBody将请求体内容赋给requestBody</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">map</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;requestBody&quot;</span>,requestBody);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'><strong>@RequestAttribute：从request请求域中获取数据</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在gotoOtherPage控制器方法中保存的请求域属性通过请求转发的方式在sout控制器方法中获取</span></span><br><span class="line"><span class="comment">//此处只是演示</span></span><br><span class="line"><span class="comment">//大部分都是返回到前端页面，通过EL表达式等方式直接获取使用</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goto&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">gotoOtherPage</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line">    <span class="comment">//@RequestAttribute将请求域中test属性的值赋予形参success</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sout</span><span class="params">(<span class="meta">@RequestAttribute(&quot;test&quot;)</span> String success)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@MatrixVariable：矩阵变量(可以用于解决cookie被禁用的问题)</p><ul><li>矩阵变量使用要求<ul><li>矩阵变量需要在SpringBoot中手动开启</li><li>根据RFC3986的规范，矩阵变量应当绑定在路径变量中</li><li>若是有多个矩阵变量，应当使用英文符号;进行分隔。</li><li>若是一个矩阵变量有多个值，应当使用英文符号,进行分隔，或者命名多个重复的key</li><li>&#x2F;test&#x2F;customer;age&#x3D;20;gender&#x3D;boy”  矩阵变量示例</li></ul></li></ul><p><font color='red'><strong>url重写就是指把cookie的值使用矩阵变量的方式进行传递 ：&#x2F;test;jsesssionid&#x3D;xxxx</strong></font></p><p>对于请求路径的处理都是使用UrlPathHelper这个类进行解析，</p><p>removeSemicolonContent(移除请求路径;后的内容)用于支持矩阵变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="meta">@description</span>: 修改springboot的自动配置机制，实现对矩阵变量的支持</span><br><span class="line"> * <span class="meta">@date</span> <span class="number">2022</span>/<span class="number">5</span>/<span class="number">13</span> <span class="number">0</span>:<span class="number">00</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一：</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">                <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">                <span class="comment">//设置为不移除分号后面的内容；因此矩阵变量才可以生效</span></span><br><span class="line">                urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);</span><br><span class="line">                configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式二：</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void configurePathMatch(PathMatchConfigurer configurer) &#123;</span></span><br><span class="line"><span class="comment">//        UrlPathHelper urlPathHelper = new UrlPathHelper();</span></span><br><span class="line"><span class="comment">//        //设置为不移除分号后面的内容；因此矩阵变量才可以生效</span></span><br><span class="line"><span class="comment">//        urlPathHelper.setRemoveSemicolonContent(false);</span></span><br><span class="line"><span class="comment">//        configurer.setUrlPathHelper(urlPathHelper);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  /test/customer;age=20;inters=book;inters=play</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/&#123;customer&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">testMatrixVariable</span><span class="params">(<span class="meta">@MatrixVariable(&quot;age&quot;)</span> Integer age,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@MatrixVariable(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@PathVariable(&quot;customer&quot;)</span> String path)</span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /boss/1;age=20/2;age=10&quot;</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">test</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span>Integer boosAge,</span></span><br><span class="line"><span class="params">                    <span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span>Integer empAge)</span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;boss&quot;</span>,boosAge);</span><br><span class="line">        map.put(<span class="string">&quot;emp&quot;</span>,empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="请求参数处理原理"><a href="#请求参数处理原理" class="headerlink" title="请求参数处理原理"></a>请求参数处理原理</h5><p>①获取对应的处理器适配器以执行控制器方法HandlerAdapter ha &#x3D; getHandlerAdapter(mappedHandler.getHandler())</p><ul><li>获取所有的处理器适配器，循环判断哪个处理器适配器能支持当前的方法并返回 此处是(RequestMapping)</li></ul><p><img src="https://s1.ax1x.com/2022/05/23/X9wiOf.png" alt="执行不同方法的适配器"></p><p>0 - 支持方法上标注@RequestMapping的处理器适配器</p><p>1 - 支持函数式编程的处理器适配器</p><p>…</p><p>②根据获得的处理器适配器对象调用目标方法并为目标方法设置参数解析器和返回值解析器</p><p><font color='red'><strong>参数解析器和返回值解析器的信息都封装在同一个对象ServletInvocableHandlerMethod invocableMethod中</strong> </font></p><ul><li>参数解析器(确定每一个参数的值是什么)：判断当前解析器是否支持解析这种参数，支持则调用解析方法</li><li>返回值处理器(确定能返回什么类型的结果)：判断当前处理器是否支持返回这种类型参数并调用返回处理方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标方法对参数的各种处理</span></span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod)&#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">ServletInvocableHandlerMethod</span> <span class="variable">invocableMethod</span> <span class="operator">=</span> createInvocableHandlerMethod(handlerMethod);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.argumentResolvers != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">//为当前正在执行的目标方法设置参数解析器</span></span><br><span class="line">invocableMethod.setHandlerMethodArgumentResolvers(<span class="built_in">this</span>.argumentResolvers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.returnValueHandlers != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">//为当前正在执行的目标方法设置返回值处理器</span></span><br><span class="line">invocableMethod.setHandlerMethodReturnValueHandlers(<span class="built_in">this</span>.returnValueHandlers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进一步调用</span></span><br><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer)&#123;</span><br><span class="line">    <span class="comment">//真正执行目标方法</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs)&#123;</span><br><span class="line">        <span class="comment">//获取方法的参数值</span></span><br><span class="line">        Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line">            </span><br><span class="line"><span class="comment">//getMethodArgumentValues方法内部的执行过程</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">MethodParameter[] parameters = getMethodParameters();</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[parameters.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line"><span class="type">MethodParameter</span> <span class="variable">parameter</span> <span class="operator">=</span> parameters[i];</span><br><span class="line">parameter.initParameterNameDiscovery(<span class="built_in">this</span>.parameterNameDiscoverer);</span><br><span class="line">args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line"><span class="keyword">if</span> (args[i] != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">args[i] = <span class="built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="built_in">this</span>.dataBinderFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">exMsg</span> <span class="operator">=</span> ex.getMessage();</span><br><span class="line"><span class="keyword">if</span> (exMsg != <span class="literal">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> args;</span><br><span class="line">&#125;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③确定目标方法的解析器(挨个判断所有参数解析器哪个支持解析当前这个参数)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title function_">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line"><span class="type">HandlerMethodArgumentResolver</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="built_in">this</span>.argumentResolvers) &#123;</span><br><span class="line"><span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">result = resolver;</span><br><span class="line"><span class="built_in">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④解析这个参数的值</p><p>调用各自 HandlerMethodArgumentResolver 的 resolveArgument 方法</p><p>⑤当目标方法执行完成后会将数据放在ModelAndViewContainer容器中(包含要显示的页面地址view和Model数据)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest)&#123;</span><br><span class="line">    <span class="comment">//遍历循环拿到model里面每一个值</span></span><br><span class="line">    modelFactory.updateModel(webRequest, mavContainer);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从mavContainer中获取model并进行封装</span></span><br><span class="line">    <span class="type">ModelMap</span> <span class="variable">model</span> <span class="operator">=</span> mavContainer.getModel();</span><br><span class="line"><span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(mavContainer.getViewName(), model, mavContainer.getStatus());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//封装后经过一些处理并返回封装后的mav对象</span></span><br><span class="line">    <span class="keyword">return</span> mav</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑥处理目标方法执行后返回的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理方法执行后返回的结果</span></span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在渲染的这个方法中将model和map的数据放在请求域中</span></span><br><span class="line">renderMergedOutputModel(mergedModel, getRequestToExpose(request), response)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露模型作为请求域的属性</span></span><br><span class="line">exposeModelAsRequestAttributes(model, request)&#123;</span><br><span class="line">    <span class="comment">//通过增强for循环将已封装后的mergedModel中的数据逐个添加到请求域中</span></span><br><span class="line">    model.forEach((name, value) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">request.setAttribute(name, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">request.removeAttribute(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="Servlet-API"><a href="#Servlet-API" class="headerlink" title="Servlet API"></a>Servlet API</h5><p>ServletRequestMethodArgumentResolver参数解析器可以解析的的方法参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">Class&lt;?&gt; paramType = parameter.getParameterType();</span><br><span class="line"><span class="keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">ServletRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">MultipartRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">HttpSession.class.isAssignableFrom(paramType) ||</span><br><span class="line">(pushBuilder != <span class="literal">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||</span><br><span class="line">Principal.class.isAssignableFrom(paramType) ||</span><br><span class="line">InputStream.class.isAssignableFrom(paramType) ||</span><br><span class="line">Reader.class.isAssignableFrom(paramType) ||</span><br><span class="line">HttpMethod.class == paramType ||</span><br><span class="line">Locale.class == paramType ||</span><br><span class="line">TimeZone.class == paramType ||</span><br><span class="line">ZoneId.class == paramType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="复杂参数"><a href="#复杂参数" class="headerlink" title="复杂参数"></a>复杂参数</h5><p>Map<strong>、</strong>Model（<font color='red'><strong>map、model里面的数据会被共享到域对象中 相当于request.setAttribute</strong></font>）</p><p><font color='red'><strong>在一个方法中同时使用Map、Model返回的BingdingAwareModelMap对象是同一个</strong></font></p><ul><li><p>这两个类型的参数在各自底层的解析器中都会调用mavContainer.getModel()方法返回一个BingdingAwareModelMap对象</p><p>而Model、ModelMap、Map类型的参数本质上都是 BindingAwareModelMap 类的对象实例，具体查看SpringMVC相关信息继承树</p></li></ul><p><strong>RedirectAttributes（ 重定向携带数据）</strong>、<strong>ServletResponse（response）</strong></p><h5 id="自定义类型参数-封装Bean"><a href="#自定义类型参数-封装Bean" class="headerlink" title="自定义类型参数 封装Bean"></a>自定义类型参数 封装Bean</h5><p>WebDataBinder binder &#x3D; binderFactory.createBinder(webRequest, attribute, name);</p><p>WebDataBinder :web数据绑定器，将请求参数的值绑定到指定的JavaBean里面</p><p>WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次封装到JavaBean中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在SpringMVC的配置中加入自定义类型转换</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">          registry.addConverter(<span class="keyword">new</span> <span class="title class_">Converter</span>&lt;String,Pet&gt;() &#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Pet <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (StringUtils.hasText(source))&#123;</span><br><span class="line">                  <span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pet</span>();</span><br><span class="line">                  String[] split = source.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                  pet.setName(split[<span class="number">0</span>]);</span><br><span class="line">                  pet.setAge(Integer.parseInt(split[<span class="number">1</span>]));</span><br><span class="line">                  <span class="keyword">return</span> pet;</span><br><span class="line">             &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">           </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">if</span> (bindingResult == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// Bean property binding and validation;</span></span><br><span class="line"><span class="comment">// skipped in case of binding failure on construction.</span></span><br><span class="line"><span class="type">WebDataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line"><span class="keyword">if</span> (binder.getTarget() != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class="line">                    <span class="comment">//重点部分 转换过程在这个方法内</span></span><br><span class="line">bindRequestParameters(binder, webRequest);</span><br><span class="line">&#125;</span><br><span class="line">validateIfApplicable(binder, parameter);</span><br><span class="line"><span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindException</span>(binder.getBindingResult());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Value type adaptation, also covering java.util.Optional</span></span><br><span class="line"><span class="keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class="line">attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">&#125;</span><br><span class="line">bindingResult = binder.getBindingResult();</span><br><span class="line">&#125;</span><br><span class="line">&#125;           </span><br></pre></td></tr></table></figure><h4 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h4><p>1.jackson.jar(已由SpringBoot的web场景自动引入spring-boot-starter-json场景)+@ResponseBody(在方法上标注此注解)</p><p>2.利用返回值处理器(处理流程与参数解析器一致)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理流程</span></span><br><span class="line"><span class="comment">//获取所有的返回值处理器，挨个遍历每个返回值处理器，并找到能够处理当前参数的返回值处理器并返回此处理器</span></span><br><span class="line"><span class="comment">//获取当前的返回值的返回值处理器，不为空则调用对应的处理返回值的方法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest)&#123;</span><br><span class="line"><span class="comment">//handleReturnValue方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class="line"><span class="params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//获取当前返回值的返回值处理器    </span></span><br><span class="line"><span class="type">HandlerMethodReturnValueHandler</span> <span class="variable">handler</span> <span class="operator">=</span> selectHandler(returnValue, returnType);</span><br><span class="line"><span class="comment">//不为空则调用返回值处理器的处理返回值方法</span></span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown return value type: &quot;</span> +returnType.getParameterType().getName());&#125;</span><br><span class="line"><span class="comment">//else</span></span><br><span class="line">handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest)&#123;</span><br><span class="line"><span class="comment">//使用消息转换器进行写出操作，即将返回值显示到前端页面上</span></span><br><span class="line">writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);   </span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①返回值处理器判断是否支持这种类型返回值 supportReturnType</p><p>②返回值处理器调用handleReturnValue()方法进行处理</p><ul><li>RequestResponseBodyMethodProcessor可以处理方法标注了@ResponseBody 注解的</li></ul><p>③使用MessageConverters进行写出处理，即将返回值显示到前端页面上，将数据转为json</p><p><font color='red'><strong>Ⅰ.内容协商(指浏览器通过请求头告知服务器，浏览器可以接受的内容类型)</strong></font></p><p><font color='red'><strong>Ⅱ.服务器最终根据自身的能力，决定产生什么的内容类型</strong></font></p><p><font color='red'><strong>Ⅲ.SpringMVC会逐个遍历容器中所有的HttpMessageConverter，找到能够处理的消息转换器</strong></font></p><ul><li>MappingJackson2HttpMessageConverter可以将对象转为json写出</li></ul><p>返回值处理器支持处理的返回值类型</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ModelAndView</span><br><span class="line">Model</span><br><span class="line">View</span><br><span class="line">ResponseEntity </span><br><span class="line">ResponseBodyEmitter</span><br><span class="line">StreamingResponseBody</span><br><span class="line">HttpEntity</span><br><span class="line">HttpHeaders</span><br><span class="line">Callable</span><br><span class="line">DeferredResult</span><br><span class="line">ListenableFuture</span><br><span class="line">CompletionStage</span><br><span class="line">WebAsyncTask</span><br><span class="line">有 @ModelAttribute 且为对象类型的</span><br><span class="line">@ResponseBody 注解 ---&gt; RequestResponseBodyMethodProcessor；</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/23/X9wZkQ.png" alt="返回值处理器"></p><h5 id="HTTPMessageConverter原理"><a href="#HTTPMessageConverter原理" class="headerlink" title="HTTPMessageConverter原理"></a>HTTPMessageConverter原理</h5><p>①HttpMessageConverter规范：看是否支持将此Class类型的对象转换为MediaType类型的数据</p><p>e.g. 将Person对象转为Json字符串(此过程可逆)</p><ul><li>当判断某个canWrite为true，则调用write方法将其写出(canRead同理)</li></ul><p><img src="https://s1.ax1x.com/2022/05/23/X9weYj.png" alt="报文信息转唤器"></p><p>②系统默认的MessageConverter</p><p><img src="https://s1.ax1x.com/2022/05/23/X9wupn.png"></p><p>0 - 只支持返回值是byte类型的</p><p>1 - 只支持返回值是String类型的</p><p>…</p><p>7 - 直接返回true</p><p>8 - 直接返回true</p><p>下面的2-9以此类推…</p><p>最终：使用MappingJackson2HttpMessageConverter将对象转为json，利用底层的jackson的objectMapper</p><p><img src="https://s1.ax1x.com/2022/05/23/X9wQXV.png" alt="转为json格式写出"></p><h4 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h4><p>根据客户端的接受能力的不同，返回不同媒体类型的数据</p><p>1.引入xml依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.根据情况修改请求头的accept字段，此字段可以告知服务器，浏览器可以接受的内容类型是什么</p><h5 id="内容协商原理"><a href="#内容协商原理" class="headerlink" title="内容协商原理"></a>内容协商原理</h5><p>①判断当前响应头中是否已有确定的响应类型</p><p>②获取客户端(postman、浏览器)支持接收的内容类型，可以理解为获取客户端请求头accept字段</p><p>contentNegotiationManager：内容协商管理器(默认使用基于请求头的策略)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取每一个内容协商策略</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;MediaType&gt; <span class="title function_">resolveMediaTypes</span><span class="params">(NativeWebRequest request)</span> <span class="keyword">throws</span> HttpMediaTypeNotAcceptableException &#123;</span><br><span class="line"><span class="keyword">for</span> (ContentNegotiationStrategy strategy : <span class="built_in">this</span>.strategies) &#123;</span><br><span class="line">List&lt;MediaType&gt; mediaTypes = strategy.resolveMediaTypes(request);</span><br><span class="line">            <span class="comment">//获取到的媒体类型是*/* 跳过此次循环</span></span><br><span class="line"><span class="keyword">if</span> (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//当从某一个内容协商策略中获得媒体类型后就直接返回，除非获取到的媒体类型是*/*</span></span><br><span class="line"><span class="keyword">return</span> mediaTypes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HeaderContentNegotiationStrategy 负责解析Http Request Header中的Accept</li></ul><p>③获取服务器能够产生的内容类型，遍历循环当前容器中的所有HttpMessageConverter，找到支持操作当前</p><p>​转换对象的报文信息转唤器(converter) ，把这些converter支持的媒体类型进行统计,放进集合中</p><p><img src="https://s1.ax1x.com/2022/05/23/X9wYtJ.png"></p><p>④得知客户端需要application&#x2F;xml 的内容类型，服务端可以产生10种(json、xml)内容类型</p><p><img src="https://s1.ax1x.com/2022/05/23/X9wth9.png" alt="服务器能产生的内容类型"></p><p>⑤找到内容协商的最佳匹配的内容类型</p><p>⑥用 支持 将对象 转换为最佳匹配的内容类型converter，调用它进行转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内容协商的核心方法</span></span><br><span class="line">writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage)&#123;</span><br><span class="line">    <span class="comment">//首先会获取返回值，再根据返回值进行判断，此处省略</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//内容协商的关键环节</span></span><br><span class="line">    <span class="comment">//1.判断当前响应头中是否已有确定的响应类型</span></span><br><span class="line">    <span class="type">MediaType</span> <span class="variable">contentType</span> <span class="operator">=</span> outputMessage.getHeaders().getContentType();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.获取客户端(postman、浏览器)支持接收的内容类型，可以理解为获取客户端请求头actept字段</span></span><br><span class="line">    acceptableTypes = getAcceptableMediaTypes(request);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.获取服务器能够产生的内容类型</span></span><br><span class="line">List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType)&#123;</span><br><span class="line">        List&lt;MediaType&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="built_in">this</span>.messageConverters) &#123;</span><br><span class="line"><span class="keyword">if</span> (converter <span class="keyword">instanceof</span> GenericHttpMessageConverter &amp;&amp; targetType != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (((GenericHttpMessageConverter&lt;?&gt;) converter).canWrite(targetType, valueClass, <span class="literal">null</span>)) &#123;</span><br><span class="line">            <span class="comment">//把所有支持操作当前bean的转换器支持的媒体类型进行逐个统计并放到result集合中</span></span><br><span class="line">result.addAll(converter.getSupportedMediaTypes(valueClass));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//通过两层for循环逐个匹配客户端能够接受的内容类型与服务器产生的内容类型进行匹配</span></span><br><span class="line">      <span class="comment">//mediaTypesToUse集合中的值是最终需要使用的内容类型</span></span><br><span class="line">      List&lt;MediaType&gt; mediaTypesToUse = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class="line"><span class="keyword">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class="line"><span class="keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class="line">mediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">      </span><br><span class="line">     <span class="comment">//对mediaTypesToUse集合进行排序</span></span><br><span class="line">     MediaType.sortBySpecificityAndQuality(mediaTypesToUse);  </span><br><span class="line">     </span><br><span class="line">     <span class="comment">//对要使用的内容类型按照请求头的accept权重的优先匹配原则，进行最终选择，且内容类型只能有一个   </span></span><br><span class="line">     <span class="keyword">for</span> (MediaType mediaType : mediaTypesToUse) &#123;</span><br><span class="line"><span class="keyword">if</span> (mediaType.isConcrete()) &#123;</span><br><span class="line">selectedMediaType = mediaType;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断选择的内容类型不为空    </span></span><br><span class="line">    <span class="keyword">if</span> (selectedMediaType != <span class="literal">null</span>) &#123;</span><br><span class="line">selectedMediaType = selectedMediaType.removeQualityValue();</span><br><span class="line"><span class="comment">//再次对所有的HttpMessageConverter进行遍历，找到能够将当前的bean对象转换为要返回的类型内容HttpMessageConverter   </span></span><br><span class="line"><span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="built_in">this</span>.messageConverters) &#123;</span><br><span class="line"><span class="type">GenericHttpMessageConverter</span> <span class="variable">genericConverter</span> <span class="operator">=</span> (converter <span class="keyword">instanceof</span> GenericHttpMessageConverter ?</span><br><span class="line">GenericHttpMessageConverter&lt;?&gt;) converter : <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (genericConverter != <span class="literal">null</span> ?</span><br><span class="line">((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :</span><br><span class="line">converter.canWrite(valueType, selectedMediaType)) &#123;</span><br><span class="line">        <span class="comment">//body的值是要转换的对象的内容</span></span><br><span class="line">body = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,</span><br><span class="line">(Class&lt;? <span class="keyword">extends</span> <span class="title class_">HttpMessageConverter</span>&lt;?&gt;&gt;) converter.getClass(),</span><br><span class="line">inputMessage, outputMessage);</span><br><span class="line"><span class="keyword">if</span> (body != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">theBody</span> <span class="operator">=</span> body;</span><br><span class="line">LogFormatUtils.traceDebug(logger, traceOn -&gt;</span><br><span class="line"><span class="string">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">addContentDispositionHeader(inputMessage, outputMessage);</span><br><span class="line"><span class="keyword">if</span> (genericConverter != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//最终调用write方法将转换后的bean对象写出到页面 </span></span><br><span class="line">genericConverter.write(body, targetType, selectedMediaType, outputMessage);</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="开启浏览器参数内容协商功能"><a href="#开启浏览器参数内容协商功能" class="headerlink" title="开启浏览器参数内容协商功能"></a>开启浏览器参数内容协商功能</h5><p>只需要在application.yml文件中设置为true开启即可,默认设置为false</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span> <span class="comment">#开启请求参数内容协商模式 </span></span><br></pre></td></tr></table></figure><p>开启之后会在内容协商管理器中添加一个ParameterContentNegotiationStrategy 的内容解析策略，</p><p>这个策略支持解析xml和json的内容类型</p><p><img src="https://s1.ax1x.com/2022/05/23/X9wa11.png"></p><p>导入了jackson处理xml的包，xml的converter就会自动加载进来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebMvcConfigurationSupport</span></span><br><span class="line"><span class="variable">jackson2XmlPresent</span> <span class="operator">=</span> ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jackson2XmlPresent) &#123;</span><br><span class="line"><span class="type">Jackson2ObjectMapperBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jackson2ObjectMapperBuilder.xml();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.applicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">builder.applicationContext(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> <span class="title class_">MappingJackson2XmlHttpMessageConverter</span>(builder.build()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义MessageConverter"><a href="#自定义MessageConverter" class="headerlink" title="自定义MessageConverter"></a>自定义MessageConverter</h5><p>1.处理流程：</p><p>①@ResponseBody 响应数据出去 调用 <strong>RequestResponseBodyMethodProcessor</strong> 处理</p><p>②Processor 处理方法返回值。通过 <strong>MessageConverter</strong> 处理</p><p>③所有 <strong>MessageConverter</strong> 合起来可以支持各种媒体类型数据的操作（读、写）</p><p>④内容协商找到最终的 <strong>messageConverter</strong>；</p><p>2.自定义配置内容协商管理器的内容协商策略以满足浏览器请求参数携带format访问回显指定的内容类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加自定义的消息转换器</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    converters.add(<span class="keyword">new</span> <span class="title class_">TestMessageConverter</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义配置内容协商管理器的内容协商策略</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> &#123;</span><br><span class="line"><span class="comment">//基于请求参数的内容协商策略</span></span><br><span class="line">  HashMap&lt;String, MediaType&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//指定支持解析哪些参数对应的哪些媒体类型</span></span><br><span class="line">   map.put(<span class="string">&quot;json&quot;</span>,MediaType.APPLICATION_JSON);</span><br><span class="line">   map.put(<span class="string">&quot;xml&quot;</span>,MediaType.APPLICATION_ATOM_XML);</span><br><span class="line">   map.put(<span class="string">&quot;test&quot;</span>,MediaType.parseMediaType(<span class="string">&quot;application/tt&quot;</span>));</span><br><span class="line"><span class="type">ParameterContentNegotiationStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParameterContentNegotiationStrategy</span>(map);</span><br><span class="line"></span><br><span class="line"><span class="comment">//基于请求头的内容协商策略</span></span><br><span class="line"><span class="type">HeaderContentNegotiationStrategy</span> <span class="variable">headerStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeaderContentNegotiationStrategy</span>();</span><br><span class="line"><span class="comment">//将这两个全部加入到内容协商管理器中</span></span><br><span class="line">configurer.strategies(Arrays.asList(strategy,headerStrategy));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/23/X9wwX6.png" alt="自定义配置内容协商管理器的内容协商策略"></p><h4 id="视图解析"><a href="#视图解析" class="headerlink" title="视图解析"></a>视图解析</h4><p>1.视图解析原理</p><p>①目标方法处理的过程，所有的数据都会被放在ModelAndViewContainer中，包括数据和视图地址</p><p>②方法的参数是一个自定义类型对象(从请求参数中确定的)，都会把它放在ModelAndViewContainer中</p><p>③任何目标方法在执行完成之后都会返回一个ModelAndView对象</p><p>④processDispatchResult(); 处理方法返回的结果</p><p>​Ⅰ.render(mv, request, response); 进行页面渲染</p><ul><li><p>根据方法返回值得到视图View对象(定义了页面的渲染的逻辑)</p><ul><li><p>所有的视图解析器尝试是否能根据当前返回值得到View对象</p></li><li><p>根据redirect:&#x2F;index.html返回值得到了一个由Thymeleaf创建的 RedirectView对象</p><p>注意：ContentNegotiationViewResolver 里面包含了下面1-4的视图解析器，其内部还是通过遍历1-4解析器，</p><p>判断哪个能解析从而得到视图对象</p></li></ul><p><img src="https://s1.ax1x.com/2022/05/23/X9wBnK.png"></p><p>⑤通过得到的视图对象View调用其对应的渲染方法 view.render(mv.getModelInternal(), request, response);</p><ul><li><p>视图对象RedirectView的渲染过程</p><p>①获取目标的url了</p><p>②使用原生的重定向方法 response.sendRedirect(encodedURL)</p></li></ul></li></ul><p>2.视图解析的不同情况：</p><ul><li>返回值以forward开始：会 new InternalResourceView(forwardUrl) –&gt; 底层就是原生的转发</li><li>返回值以redirect开始：会 new RedirectView() –&gt; 底层就是原生的重定向</li><li>返回值以普通字符串开始：会 new ThymeleafView()</li></ul><p>视图解析：视图解析器根据返回的不同规则得到不同的视图，通过视图调用对应的渲染方法得到对应的视图页面</p><h4 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h4><p>Thymeleaf：<strong>现代化、服务端Java模板引擎</strong>，有网络时动态获取标签元素内的文本，没有网络时显示预先设置的静态值</p><table><thead><tr><th align="left">表达式名字</th><th align="left">语法</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">变量取值</td><td align="left">${…}</td><td align="left">获取请求域、session域、对象等值</td></tr><tr><td align="left">选择变量</td><td align="left">*{…}</td><td align="left">获取上下文对象值</td></tr><tr><td align="left">消息</td><td align="left">#{…}</td><td align="left">获取国际化等值</td></tr><tr><td align="left">链接</td><td align="left">@{…}</td><td align="left">生成链接</td></tr><tr><td align="left">片段表达式</td><td align="left">~{…}</td><td align="left">jsp:include 作用，引入公共页面片段</td></tr></tbody></table><ul><li><font color='red'><strong>变量取值行内写法(不需要写在标签内)：[[${session.loginUser.username}]]</strong></font></li></ul><p>thymeleaf引入公共部分的区别</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">&quot;footer :: copy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这三者的不同 th:insert(将公共部分及标签插入到原标签)th:replace(将原标签全部替代)th:include(将公共部分插入原标签中)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>1.添加拦截器</p><p>①自定义类 实现 HandlerInterceptor 接口，重写拦截器的三个方法</p><p>②通过定制WebMVC，即自定义配置类 实现WebMvcConfigurer接口，将拦截器添加到容器中</p><p>③指定拦截规则【如果是拦截所有，静态资源也会被拦截】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.拦截器原理</p><p>①根据当前的请求，找到处理器执行链对象(其中包括了处理器方法、拦截器链、拦截器索引)</p><p>②执行顺序：</p><ul><li>情况一：a&gt;若每个拦截器的preHandle()都返回true</li></ul><p>​此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>​<strong>preHandle()会按照拦截器在配置中的正序执行，</strong></p><p>​<strong>而postHandle()和afterComplation()会按照拦截器在配置中的反序执行</strong></p><ul><li>情况二：<font color='red'><strong>b&gt;若某个拦截器的preHandle()返回了false</strong></font>6</li></ul><p>​<strong>preHandle()返回false和它之前的拦截器的preHandle()都会执行，</strong></p><p>​<strong>postHandle()都不执行，<font color='red'>当前这个返回false的拦截器 之前的所有拦截器的afterComplation()都会倒序执行</font></strong></p><p>③如果任何一个拦截器返回false，直接结束，不执行目标方法</p><p>④在这之前的任何步骤出现异常都会触发afterComplation()方法</p><p><img src="https://s1.ax1x.com/2022/05/23/X9wyAe.png" alt="执行流程"></p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><ul><li><p>上传文件必须表单必须是post的提交方式，enctype&#x3D;multipart&#x2F;from-data</p><p>在 form 标签中使用 input type&#x3D;file 添加上传的文件</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">uploadPhoto</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestPart(&quot;userImg&quot;)</span>MultipartFile file,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       log.info(<span class="string">&quot;邮箱：&quot;</span> + email + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;用户名：&quot;</span> + username + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;头像：&quot;</span> + file.getSize() + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">               <span class="string">&quot;文件封面：&quot;</span> + photos.length + <span class="string">&quot;\n&quot;</span> );</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (!file.isEmpty())&#123;</span><br><span class="line">           <span class="comment">//获取原始的文件名</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">           <span class="comment">//获取文件的后缀</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">suffixName</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">           <span class="comment">//随机生成文件名</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//组合文件的前缀和名字</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">photoName</span> <span class="operator">=</span> name + suffixName;</span><br><span class="line">           <span class="comment">//保存文件,可以通过这个方法直接将图片保存到硬盘上</span></span><br><span class="line">           file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\baidu\\&quot;</span> + photoName));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (photos.length &gt; <span class="number">0</span> )&#123;</span><br><span class="line">           <span class="keyword">for</span> (MultipartFile photo : photos)&#123;</span><br><span class="line">               <span class="keyword">if</span> (!photo.isEmpty())&#123;</span><br><span class="line">                   <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">                   photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\baidu\\&quot;</span> + originalFilename) );</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>文件上传的原理：</p><p>文件上传自动配置类：MultipartAutoConfiguration - MultipartProperties</p><ul><li>在配置类中自动配置了文件上传解析器(StandardServletMultipartResolver)</li></ul><p>原理步骤：</p><p>①当请求进入使用文件解析器判断(isMultipart) 并用(resolveMultipart方法)封装文件上传请求，</p><p>​返回一个 MultipartHttpServletRequest请求对象</p><p>②参数解析器来解析请求中文件内容封装成MultipartFile</p><p><img src="https://s1.ax1x.com/2022/05/23/X9wR1I.png"></p><p>③底层将request中的文件信息封装到一个Map(MultiValueMap《String,MultipararFile》)</p><p>④最后通过FileCopyUtils工具类实现文件流的拷贝</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>1.默认规则</p><p>默认情况下，Spring Boot提供&#x2F;error处理所有错误的映射</p><p>对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。</p><p>对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</p><p>2.自定义错误视图</p><p>①要对其进行自定义，添加 View 解析为 error</p><p>②要完全替换默认行为，可以实现 ErrorController 并注册该类型的Bean定义，</p><p>​或添加<code>ErrorAttributes类型的组件</code>以使用现有机制但替换其内容。</p><p>③error&#x2F;下的4xx，5xx页面会被自动解析</p><p>3.定制错误处理逻辑</p><p>①自定义错误页</p><ul><li>error&#x2F;404.html   error&#x2F;5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</li></ul><p>②@ControllerAdvice+@ExceptionHandler处理全局异常；底层是 ExceptionHandlerExceptionResolver 支持的</p><p>③@ResponseStatus+自定义异常 ；底层是 ResponseStatusExceptionResolver ，把responsestatus注解的信息</p><p>​底层调用 response.sendError(statusCode, resolvedReason)；向tomcat发送的&#x2F;error</p><p>④Spring底层的异常，如 参数类型转换异常；DefaultHandlerExceptionResolver 处理框架底层的异常。</p><p><font color='red'><strong>response.sendError()：这个方法只有一个作用，即立即结束此次请求的处理，让tomcat发送&#x2F;error请求</strong></font></p><p>response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage()); </p><p>⑤<font color='red'><strong>自定义实现 HandlerExceptionResolver 处理异常；在设置order优先级之后，可以作为默认的全局异常处理规则</strong></font></p><ul><li>ErrorViewResolver 最底层的异常处理解析器， 实现自定义处理异常(一般不自定义覆盖这个)；</li></ul><p>​response.sendError 。&#x2F;error请求就会转给BasicErrorcontroller</p><p>​异常没有进行任何处理。tomcat底层 response.sendError。error请求就会转给BasicErrorcontroller</p><p>​basicErrorController 要去的页面地址是 ErrorViewResolver 解析器进行解析的 ；</p><p>4.异常处理的自动配置原理</p><ul><li><p>ErrorMvcAutoConfiguration 自动配置异常处理规则</p><ul><li>在容器中注册的组件：类型：DefaultErrorAttributes –&gt; id：errorAttributes (定义错误页面中可以包含的数据)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DefaultErrorAttributes也是个处理器异常解析器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultErrorAttributes</span> <span class="keyword">implements</span> <span class="title class_">ErrorAttributes</span>, HandlerExceptionResolver, Ordered &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在容器中注册的组件：类型：BasicErrorController –&gt; id：basicErrorController(响应json 或 html的空白页)</p><p>这是一个控制器，默认处理：&#x2F;error 路径的请求 如果是页面，则 new  ModelAndView(<strong>“error”</strong>, model)；</p></li><li><p>给容器中组注册一个id为error的View对象(作用是响应error页面)</p></li><li><p>在容器中注册的组件 BeanNameViewResolver (这是歌视图解析器)  根据返回的是视图名作为组件的id在容器中寻找组件，</p><ul><li>这个组件是个View，用于调用对应的视图渲染方法进行页面渲染</li></ul><p></p><p><font color='red'><strong>这里可以这么理解错误视图的产生过程：</strong></font>请求一个不存在的地址，会被BasicErrorController所处理，返回值是error，</p><p>这个返回值被BeanNameViewResolver视图解析器所解析，根据这个视图解析器的工作原理到ioc容器中找到了</p><p>这个已经注册在ioc容器中，id为error的组件(View对象，默认是个空白页面)，</p><p>获得这个View对象后，调用其对应的渲染技术，渲染页面。</p></li><li><p>在容器中注册的组件：DefaultErrorViewResolver –&gt; id:conventionErrorViewResolver</p><ul><li><p>这个视图解析器的作用是在发生错误的时候将Http的状态码作为视图页地址(viewName)，访问地址是&#x2F;error&#x2F;4xx.html</p><p>找到真正的页面，<font color='red'><strong>这就是为什么把5xx.html页面放在error文件夹下被自动解析的原因</strong></font></p></li></ul></li></ul></li></ul><p>5.异常处理的流程</p><p>①执行目标方法，在目标方法允许期间，出现任何异常都会被catch且标注当前请求结束，并被dispatchException封装</p><p>②进入视图解析流程(页面渲染)</p><p>③处理handler执行方法的异常，处理完成之后返回mv对象</p><p>Ⅰ.遍历所有的handlerExceptionResolvers，找到能处理当前异常的解析器</p><p>Ⅱ.DefaultErrorAttributes先来处理异常，将异常的信息保存到request域中并返回null</p><p><img src="https://s1.ax1x.com/2022/05/23/X9wIHS.png" alt="处理器异常解析器接口的方法"></p><p><img src="https://s1.ax1x.com/2022/05/23/X9wHhj.png" alt="系统中保存的异常处理器"></p><p>Ⅲ.在系统默认设置的处理器异常解析器中没有解析器能处理，所有异常会被抛出</p><p>Ⅳ.由于异常没有处理则会由Servlet在底层再次请求转发(保存在request域中的数据会被携带过去)，发起一个&#x2F;error的请求</p><p>Ⅴ.这个&#x2F;error则被自动配置的BasicErrorController控制器进行处理</p><p>Ⅵ.在BasicErrorController的请求处理方法根据请求行的accpet进行内容协商调用对应方法</p><p>Ⅶ.在对应的处理方法中resolveErrorView()中遍历所有的ErrorViewResolver，找到能够处理的解析器</p><p>Ⅷ.则会调用系统自动装配的DefaultErrorResolver进行解析(原理同异常处理自动装配的解释)，</p><p>​DefaultErrorResolver的作用是把响应状态码作为错误页的地址，error&#x2F;500.html</p><p>Ⅸ.最终由模板引擎Thymeleaf响应这个页面 error&#x2F;500.html </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出现异常，标注当前请求结束</span></span><br><span class="line">webRequest.requestCompleted();</span><br><span class="line"></span><br><span class="line"><span class="comment">//视图解析流程</span></span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException)&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//处理handler执行方法的异常，处理完成之后返回ModelAndView对象，包含要去的视图地址和要显示的数据</span></span><br><span class="line">mv = processHandlerException(request, response, handler, exception)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Check registered HandlerExceptionResolvers...</span></span><br><span class="line">    <span class="comment">//在这些解析器中没有能处理除0异常的解析器</span></span><br><span class="line"><span class="type">ModelAndView</span> <span class="variable">exMv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.handlerExceptionResolvers != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerExceptionResolver resolver : <span class="built_in">this</span>.handlerExceptionResolvers) &#123;</span><br><span class="line">exMv = resolver.resolveException(request, response, handler, ex);</span><br><span class="line"><span class="keyword">if</span> (exMv != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//BasicErrorController的请求处理方法</span></span><br><span class="line"><span class="comment">//MediaType.TEXT_HTML_VALUE指定返回text/html页面</span></span><br><span class="line"><span class="meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line"><span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> getStatus(request);</span><br><span class="line">Map&lt;String, Object&gt; model = Collections</span><br><span class="line">.unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">response.setStatus(status.value());</span><br><span class="line"><span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> resolveErrorView(request, response, status, model);</span><br><span class="line"><span class="keyword">return</span> (modelAndView != <span class="literal">null</span>) ? modelAndView : <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;error&quot;</span>, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定将方法返回值作为响应报文</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">error</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> getStatus(request);</span><br><span class="line"><span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(status);</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Web原生组件注入"><a href="#Web原生组件注入" class="headerlink" title="Web原生组件注入"></a>Web原生组件注入</h4><ul><li><p>(Servlet、Filter、Listener的注入)</p><p>@WebListener、</p><p>@WebServlet(urlPatterns &#x3D; “&#x2F;myServlet”)</p><p>@WebFilter(urlPatterns &#x3D; {“&#x2F;css&#x2F;<em>“, “&#x2F;images&#x2F;</em>“})</p><p>加上在主程序类上标注扫描这三大组件所在包注册进ioc容器中</p></li></ul><p>1.使用原生的Servlet API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Spingboot的应用程序类上标注原生的servlet组件放在哪个包下</span></span><br><span class="line"><span class="meta">@ServletComponentScan(basePackages = &quot;top.year21.springboot.servlet&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootAdminApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootAdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在自定义的原生Servlet上使用注解进行注册servlet    </span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/myServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//注册Filter</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;/css/*&quot;, &quot;/images/*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomizeFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;&#125;   </span><br><span class="line">    </span><br><span class="line"><span class="comment">//注册Filter</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomizeListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>2.使用RegistrationBean</p><p>通过xxxRegistrationBean组件 + @Bean注解将原生的三大组件注册进ioc容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//proxyBeanMethods = true 保证依赖的组件始终都是单实例的</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegistrationBeanConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">myServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyServlet</span> <span class="variable">myServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyServlet</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(myServlet,<span class="string">&quot;/myServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">myFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CustomizeFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomizeFilter</span>();</span><br><span class="line">        <span class="comment">//第一种方法</span></span><br><span class="line"><span class="comment">//        return new FilterRegistrationBean(filter,myServlet());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种方法</span></span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">theFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>(filter);</span><br><span class="line">        theFilter.addUrlPatterns(<span class="string">&quot;/myServlet&quot;</span>,<span class="string">&quot;/css/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> theFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletListenerRegistrationBean <span class="title function_">myListener</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CustomizeListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomizeListener</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletListenerRegistrationBean</span>(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 扩展：DispatchServlet注册进ioc容器的过程</p><p>①容器中自动配置了DispatcherServlet，将这个组件的属性和WebMvcProperties.class进行绑定；</p><p>​对应的配置文件配置项是spring.mvc。</p><p>②通过使用@Bean + ServletRegistrationBean&lt; DispatcherServlet.&gt; 把DisparcherServlet 进行配置</p><p>访问其他Servlet的请求不被DispatcherServlet拦截的原因：</p><ul><li>精确优先原则：当多个Servlet都能处理同一层路径，用最匹配的进行处理；比如下方访问&#x2F;my会原先匹配MyServlet</li></ul><p><img src="https://s1.ax1x.com/2022/05/23/X9wOcq.png"></p><h4 id="嵌入式Servlet容器"><a href="#嵌入式Servlet容器" class="headerlink" title="嵌入式Servlet容器"></a>嵌入式Servlet容器</h4><p>SpringBoot底层默认有很多的WebServer工厂：TomcatServletWebServerFactory 、 </p><p>​  JettyServletWebServerFactory 、 </p><p>​  UndertowServletWebServerFactory</p><ul><li>因此需要切换web服务器只需要在pom文件中引入相关的start场景</li></ul><p>1.原理：</p><p>每个ioc容器在启动时都会先调用父类所有的refresh方法()进行刷新，再执行当前容器的refresh()方法，</p><p>在执行到onrefresh()方法中，通过createWebServer()创建默认的内嵌Servlet容器</p><p>①SpringBoot应用启动是发现当前的是web应用，web应用会创建一个web版本的ioc容器 ServletwebServletApplicationContext</p><p>②在 ServletwebServletApplicationContext 启动时会寻找 ServletWebServletFactory (Servlet的web服务器工厂)</p><p>​底层直接会有一个自动配置类(ServletWebServerFactoryAutoConfiguration)</p><p>③ServletWebServerFactoryAutoConfiguration导入了ServletWebServerFactoryConfiguration（配置类）&#96;</p><p>④ServletWebServerFactoryConfiguration 配置类 根据动态判断系统中到底导入了那个Web服务器的包。</p><p>（默认是web-starter导入tomcat包），容器中就有 TomcatServletWebServerFactory&#96;</p><p>⑤TomcatServletWebServerFactory 创建出Tomcat服务器并启动；</p><p>TomcatWebServer 的构造器拥有初始化方法initialize—this.tomcat.start();&#96;</p><p>总结：<font color='red'><strong>内嵌服务器，就是手动把启动服务器的代码调用（tomcat核心jar包存在）&#96;</strong></font></p><p>2、定制Servlet容器</p><ul><li><p>实现  WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory.&gt;</p><p>把配置文件的值和 ServletWebServerFactory 进行绑定</p></li><li><p>修改配置文件 server.xxx</p></li><li><p>直接自定义 ConfigurableServletWebServerFactory</p></li></ul><p>xxxxxCustomizer：定制化器，可以改变xxxx的默认规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomizationBean</span> <span class="keyword">implements</span> <span class="title class_">WebServerFactoryCustomizer</span>&lt;ConfigurableServletWebServerFactory&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(ConfigurableServletWebServerFactory server)</span> &#123;</span><br><span class="line">        server.setPort(<span class="number">9000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定制化原理"><a href="#定制化原理" class="headerlink" title="定制化原理"></a>定制化原理</h4><p>定制化的常见方式</p><p>①编写自定义配置类 + @Bean替换、增加容器中默认组件(视图解析器、异常解析器)等</p><p>②修改配置文件</p><p>③xxxxxCustomizer：定制化器</p><p>④<font color='red'><strong>web应用开发，自定义一个配置类 实现 WebMvcConfigurer 接口可定制化web功能</strong></font> <strong>+ @Bean给容器中再扩展一些组件</strong></p><p>⑤@EnableWebMvc + WebMvcConfigurer —— @Bean  可以全面接管SpringMVC，但存在个别问题</p><p>​虽然实现定制和扩展功能但会导致WebMvcAutoConfiguration自动配置类配置的底层组件全部失效</p><hr><h3 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h3><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><p>1.根据开发场景导入对应的starter场景</p><p>在导入的starter场景中自动导入了数据源，数据库事务管理，以及封装了原生的jdbc操作的jdbcTemplate模板</p><p><img src="https://s1.ax1x.com/2022/05/23/X9wXj0.png"></p><ul><li>至于jdbc驱动(数据库驱动)没有导入是因为数据库众多，springboot没法判断使用的是哪个，需手动导入pom文件</li></ul><p>2.导入的自动配置类的分析</p><ul><li><p>DataSourceAutoConfiguration ： 数据源的自动配置</p><ul><li><p>修改数据源相关的配置：<strong>spring.datasource</strong></p></li><li><p><strong>数据库连接池的配置，是自己容器中没有DataSource才自动配置的</strong></p></li><li><p>底层配置好的连接池是：<strong>HikariDataSource</strong></p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Conditional(PooledDataSourceCondition.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span></span><br><span class="line"><span class="meta">DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.OracleUcp.class,</span></span><br><span class="line"><span class="meta">DataSourceConfiguration.Generic.class, DataSourceJmxConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PooledDataSourceConfiguration</span></span><br></pre></td></tr></table></figure><ul><li><p>DataSourceTransactionManagerAutoConfiguration： 事务管理器的自动配置</p></li><li><p>JdbcTemplateAutoConfiguration： <strong>JdbcTemplate的自动配置，可以来对数据库进行crud</strong></p><ul><li><p>可以修改这个配置项@ConfigurationProperties(prefix &#x3D; <strong>“spring.jdbc”</strong>) 来修改JdbcTemplate</p></li><li><p>@Bean@Primary    JdbcTemplate；容器中有这个组件</p></li></ul></li><li><p>JndiDataSourceAutoConfiguration： jndi的自动配置</p></li><li><p>XADataSourceAutoConfiguration： 分布式事务相关的</p></li></ul><p>3.修改配置类以使用</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/fruit_db?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">query-timeout:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>4.测试配置是否正常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   JdbcTemplate jdbcTemplate;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from t_fruit&quot;</span>, Long.class);</span><br><span class="line">       log.info(<span class="string">&quot;查询的数据是：&quot;</span> + count);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Druid数据源"><a href="#Druid数据源" class="headerlink" title="Druid数据源"></a>Druid数据源</h4><p>可以采用两种方式：1.自定义方式(在springboot-admin包下查看)2.引入官方starter场景的依赖包</p><p>1.自动配置的分析</p><p>扩展配置项 spring.datasource.druid</p><p>DruidSpringAopConfiguration.class,   监控SpringBean的；配置项：spring.datasource.druid.aop-patterns</p><p>DruidStatViewServletConfiguration.class, 监控页的配置：spring.datasource.druid.stat-view-servlet；默认开启</p><p>DruidWebStatFilterConfiguration.class, web监控配置；spring.datasource.druid.web-stat-filter；默认开启</p><p>DruidFilterConfiguration.class}) 所有Druid自己filter的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_STAT_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.stat&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_CONFIG_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.config&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_ENCODING_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.encoding&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_SLF4J_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.slf4j&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_LOG4J_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.log4j&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_LOG4J2_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.log4j2&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_COMMONS_LOG_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.commons-log&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_WALL_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.wall&quot;</span>;</span><br></pre></td></tr></table></figure><p>2.采用配置文件进行配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/fruit_db?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">top.year21.springboot</span> <span class="comment">#监控SpringBean</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span> <span class="comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span> <span class="comment"># 配置监控页功能</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span>  <span class="comment"># 监控web</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span></span><br><span class="line">      <span class="attr">filter:</span> </span><br><span class="line">        <span class="attr">stat:</span> <span class="comment"># 对上面filters里面的stat的详细配置</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">update-allow:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h4><p>1.引入mybats的starter场景依赖</p><p>补充一下：spring官方的启动场景为 spring-boot-starter-*</p><p>​第三方的启动场景为 *-spring-boot-starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置模式</p><ul><li><p>全局配置文件中导入的组件</p><p>SqlSessionFactory: 负责创建sqlsession</p><p>SqlSession：提供java程序与数据库交互的连接</p><p>@Import(<strong>AutoConfiguredMapperScannerRegistrar</strong>.<strong>class</strong>）；</p><p>Mapper： 负责操作数据库的mapper接口只要标注 @Mapper 注解就会被自动扫描进来</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(MybatisProperties.class)</span> ： <span class="comment">//MyBatis配置项绑定类。</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisAutoConfiguration</span>&#123;&#125;</span><br><span class="line"><span class="comment">//绑定配置文件的mybatis前缀内容</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mybatis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisProperties</span></span><br></pre></td></tr></table></figure><p>配置模式下，整合mybats场景进行crud的前置操作：</p><p>①导入mybatis官方starter场景依赖</p><p>②编写mapper接口。<font color='red'><strong>mapper接口一定要标准@Mapper注解</strong></font></p><p>③编写mapper接口的映射文件并绑定mapper接口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;?xml</span> <span class="string">version=&quot;1.0&quot;</span> <span class="string">encoding=&quot;UTF-8&quot;</span> <span class="string">?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE</span> <span class="string">mapper</span></span><br><span class="line">        <span class="string">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="string">&gt;</span></span><br><span class="line"><span class="string">&lt;mapper</span> <span class="string">namespace=&quot;top.year21.springboot.dao.FruitMapper&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;!--</span>    <span class="string">Fruit</span> <span class="string">queryOneById(Integer</span> <span class="string">id);--&gt;</span></span><br><span class="line">    <span class="string">&lt;select</span> <span class="string">id=&quot;queryOneById&quot;</span> <span class="string">resultType=&quot;top.year21.springboot.bean.Fruit&quot;&gt;</span></span><br><span class="line">        <span class="string">select</span> <span class="string">*</span> <span class="string">from</span> <span class="string">t_fruit</span> <span class="string">where</span> <span class="string">fid</span> <span class="string">=</span> <span class="comment">#&#123;id&#125;;</span></span><br><span class="line">    <span class="string">&lt;/select&gt;</span></span><br><span class="line"><span class="string">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure><p>④在application.yaml中指定Mapper配置文件的位置，以及指定全局配置文件的信息 </p><p>​<font color='red'> <strong>建议不要写全局配置文件，所有全局配置文件的配置都放在configuration配置项中即可</strong></font></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置mybatis的核心配置文件和映射配置文件位置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment">#  config-location: classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span> <span class="comment">#指定mapper接口映射文件位置</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#使用这个修改则不能指定config-location处的mybatis-config.xml文件位置，不然报错</span></span><br><span class="line">  <span class="attr">configuration:</span>  <span class="comment">#指定mybatis全局配置文件中的相关配置</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3.注解模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//采用注解+配置模式的混合写法</span></span><br><span class="line">   <span class="comment">// public void saveCity(City city) &#123;</span></span><br><span class="line"><span class="comment">//        cityMapper.insertCity(city);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&lt;!--  void insertCity(City city);  --&gt;</span></span><br><span class="line"><span class="comment">//    &lt;insert id=&quot;insertCity&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span></span><br><span class="line"><span class="comment">//        insert into city(name,state,country) values(#&#123;name&#125;,#&#123;state&#125;,#&#123;country&#125;)</span></span><br><span class="line"><span class="comment">//    &lt;/insert&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//纯注解写法</span></span><br><span class="line">    <span class="meta">@Insert(&quot; insert into city(name,state,country) values(#&#123;name&#125;,#&#123;state&#125;,#&#123;country&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true,keyColumn = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCity</span><span class="params">(City city)</span> &#123;</span><br><span class="line">        cityMapper.insertCity(city);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="整合MyBatis-plus"><a href="#整合MyBatis-plus" class="headerlink" title="整合MyBatis-plus"></a>整合MyBatis-plus</h4><p>1.引入MyBatis-plus的starter场景依赖</p><ul><li><font color='red'><strong>注：在这个stater中也自动引入了jdbc和mybatis的场景，因此上面两个的整合依赖就不需要再引入，但jdbc驱动依赖必须引入</strong></font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">3.5</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.自动配置分析</p><ul><li><p>MybatisPlusAutoConfiguration 配置类，MybatisPlusProperties 配置项绑定。mybatis-plus：xxx 就是对mybatis-plus的定制</p></li><li><p>SqlSessionFactory 自动配置好。底层是容器中默认的数据源</p></li><li><p>mapperLocations 自动配置好且有默认值(<em>classpath*:&#x2F;mapper&#x2F;*</em>&#x2F;*.xml)。</p><p>即任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件。 </p></li><li><p>容器中也自动配置好了 SqlSessionTemplate</p></li><li><p>@Mapper 标注的接口也会被自动扫描；可以@MapperScan(“xxx.xxx”)批量扫描就行</p></li></ul><p><font color='red'><strong>最大特点：自定义mapper继承BaseMapper就直接拥有了crud能力</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BaseMapper&lt;T&gt; 这个接口提供了大量基础的有关对数据库crud操作的方法</span></span><br><span class="line"><span class="comment">//泛型参数T 则是说明这个自定义的mapper是对数据库中哪个能映射成泛型参数T类型的表进行的具体操作</span></span><br><span class="line"><span class="comment">//自定义的mapper接口继承了BaseMapper就能使用它定义的方法，也就直接拥有了crud能力</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IService接口是所有service的父类，其内封装了大量基础的业务处理所需要调用的与数据交互的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ServiceImpl&lt;M extends BaseMapper&lt;T&gt;, T&gt;是IService&lt;T&gt;的实现类，里面有IService定义的方法</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>3.测试整合效果</p><ul><li><font color='red'><strong>开启分页功能需要先引入分页插件</strong></font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;top.year21.springboot.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageHelperConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,*/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    <span class="type">PaginationInnerInterceptor</span> <span class="variable">paginationInnerInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span>   <span class="title class_">PaginationInnerInterceptor</span>(DbType.H2);</span><br><span class="line">        paginationInnerInterceptor.setOverflow(<span class="literal">true</span>);</span><br><span class="line">        paginationInnerInterceptor.setMaxLimit(<span class="number">500L</span>);</span><br><span class="line">        interceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>进行测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dynamic&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dynamicTable</span><span class="params">(<span class="meta">@RequestParam(value = &quot;pageNum&quot;,defaultValue = &quot;1&quot;,required = false)</span> Integer pageNum, Model model)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在使用分页功能后查询的数据都封装在了pageInfo中，其中数据库的查询数据在records中</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; users = userService.list();</span></span><br><span class="line">        <span class="comment">//分页查询的数据</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页查询后的结果</span></span><br><span class="line">        Page&lt;User&gt; pageInfo = userService.page(page,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        model.addAttribute(&quot;users&quot;,users);</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;pageInfo&quot;</span>,pageInfo);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;table/dynamic_table&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deleteUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                         <span class="meta">@RequestParam(&quot;pageNum&quot;)</span> Integer pageNum,//被携带的参数</span></span><br><span class="line"><span class="params">                         RedirectAttributes redirectAttributes )</span>&#123; <span class="comment">//用个重定向携带参数，跳转到指定页面</span></span><br><span class="line">        userService.removeById(id);</span><br><span class="line">        <span class="comment">//携带需要重定向使用的参数</span></span><br><span class="line">        redirectAttributes.addAttribute(<span class="string">&quot;pageNum&quot;</span>,pageNum);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/dynamic&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font color='red'><strong>thymeleaf使用注意点：</strong></font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--非restful风格的写法：使用thymeleaf生成跳转连接，且在连接中读取参数的写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/dynamic(pageNum=$&#123;num&#125;)&#125;&quot;</span>&gt;</span>[[$&#123;num&#125;]]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--restful风格的写法：使用thymeleaf生成跳转连接，且在连接中读取参数的写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/deleteUser/&#123;id&#125;(id=$&#123;user.id&#125;)&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--thtmeleaf遍历分页数据内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user,state:$&#123;pageInfo.records&#125;&quot;</span>&gt;</span> </span><br><span class="line">             <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;state.count&#125;&quot;</span>&gt;</span>Trident<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span>Trident<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span>Internet Explorer 4.0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>Win 95+<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.email&#125;&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h4><p>1.stater场景引入的依赖</p><p><img src="https://s1.ax1x.com/2022/05/23/X9wzHU.png"></p><p>2.自动配置的分析</p><ul><li><p>RedisAutoConfiguration 自动配置类。RedisProperties 属性类 –&gt; spring.redis.xxx是对redis的配置</p></li><li><p>连接工厂是准备好的。LettuceConnectionConfiguration、JedisConnectionConfiguration</p></li><li><p>自动注入了RedisTemplate&lt;Object, Object&gt; ： xxxTemplate；</p></li><li><p>自动注入了StringRedisTemplate；k：v都是String</p><p>底层使用 StringRedisTemplate、RedisTemplate两者其中之一就可以操作redis</p></li></ul><p>3.切换为Jedis</p><p>默认导入的是LettuceConnectionConfiguration，切换导入为JedisConnectionConfiguration</p><p><font color='red'><strong>需要引入jedis依赖和配置文件修改客户端类型</strong></font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 版本不需要写，springboot进行了版本仲裁--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.231</span><span class="number">.133</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">client-type:</span> <span class="string">jedis</span></span><br><span class="line">  <span class="attr">jedis:</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>4.测试</p><ul><li>注意：<font color='red'><strong>使用了spring容器中的组件的对象不能自己手动new，必须自动装配，从容器中获取</strong></font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用redis统计指定访问页面的访问次数</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/index.html&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIndex</span><span class="params">(HttpSession session, Model model)</span>&#123; </span><br><span class="line">        ValueOperations&lt;String, String&gt; opsForValue = redisTemplate.opsForValue();</span><br><span class="line">        <span class="type">String</span> <span class="variable">index</span> <span class="operator">=</span> opsForValue.get(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> opsForValue.get(<span class="string">&quot;/sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;index&quot;</span>,index);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;sql&quot;</span>,sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加拦截器以拦截指定页面</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        redisTemplate.opsForValue().increment(uri);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisInterceptor redisInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//添加拦截规则</span></span><br><span class="line">        <span class="comment">//此处redisInterceptor必须从容器中自动装配</span></span><br><span class="line">        <span class="comment">//因为这个对象使用到了redis自动装配的stringRedisTemplate</span></span><br><span class="line">        <span class="comment">//手动new的RedisInterceptor对象不能使用stringRedisTemplate这个组件</span></span><br><span class="line">        registry.addInterceptor(redisInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h3><p>1.引入junit5的starter场景依赖</p><p>2.SpringBoot整合Junit以后。</p><p>①编写测试方法：@Test标注（注意需要使用junit5版本的注解）</p><p>②Junit类具有Spring的功能，@Autowired、比如 @Transactional 标注测试方法，测试完成后自动回滚</p><ul><li><p>常用Junit5注解测试</p><p>**@Test :**表示方法是测试方法。</p><p>**@ParameterizedTest :**表示方法是参数化测试</p><p>**@RepeatedTest :**表示方法可重复执行</p><p>**@DisplayName :**为测试类或者测试方法设置展示名称</p><p>**@BeforeEach :**表示在每个单元测试之前执行</p><p>**@AfterEach :**表示在每个单元测试之后执行</p><p>**@BeforeAll :**表示在所有单元测试之前执行</p><p>**@AfterAll :**表示在所有单元测试之后执行</p><p>**@Tag :**表示单元测试类别，类似于JUnit4中的@Categories</p><p>**@Disabled :**表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</p><p>**@Timeout :**表示测试方法运行如果超过了指定时间将会返回错误</p><p>**@ExtendWith :**为测试类或测试方法提供扩展类引用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span>  <span class="comment">//此注解代表整合了SpringBoot，可以使用springboot的组件</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;junit5功能测试&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Junit5Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于标识每个测试方法</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试DisplayName注解&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDisplayName</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Disabled</span> <span class="comment">//禁用对这个方法的测试</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试方法2&quot;)</span> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testMethod2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以模拟对一个功能的多次运行</span></span><br><span class="line">    <span class="meta">@RepeatedTest(5)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testRepeatedTest</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">     <span class="comment">//规定方法的超时时间</span></span><br><span class="line">    <span class="meta">@Timeout(value = 500,unit = TimeUnit.MILLISECONDS)</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试方法的超时&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testTimeOut</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;测试已经超时&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BeforeEach、AfterEach分别在每一个测试方法执行前后都执行一次</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBeforeEach</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test will started&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAfterEach</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test will stoped&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BeforeAll、AfterAll在所有测试方法开始之前分别执行一次，且只执行一次</span></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBeforeAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;all test will started &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testAfterAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;all test will stoped &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="断言机制"><a href="#断言机制" class="headerlink" title="断言机制"></a><font color='red'><strong>断言机制</strong></font></h4><p>断言（assertions）机制是测试方法中的核心部分，用来对测试需要满足的条件进行验证。</p><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">assertEquals</td><td align="left">判断两个对象或两个原始类型是否相等</td></tr><tr><td align="left">assertNotEquals</td><td align="left">判断两个对象或两个原始类型是否不相等</td></tr><tr><td align="left">assertSame</td><td align="left">判断两个对象引用是否指向同一个对象</td></tr><tr><td align="left">assertNotSame</td><td align="left">判断两个对象引用是否指向不同的对象</td></tr><tr><td align="left">assertTrue</td><td align="left">判断给定的布尔值是否为 true</td></tr><tr><td align="left">assertFalse</td><td align="left">判断给定的布尔值是否为 false</td></tr><tr><td align="left">assertNull</td><td align="left">判断给定的对象引用是否为 null</td></tr><tr><td align="left">assertNotNull</td><td align="left">判断给定的对象引用是否不为 null</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssertionsTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//任何一个断言抛出异常，下方所有的断言都不会执行</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试简单断言&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSimpleAssertions</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> count(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//判断是否值是否相等</span></span><br><span class="line">        assertEquals(<span class="number">6</span>,num,<span class="string">&quot;逻辑出现问题&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断地址引用是否相同</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">        assertSame(a1,a2,<span class="string">&quot;地址引用不一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> a + b;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试数组断言&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testArrayAssertions</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] a1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] a2 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        assertArrayEquals(a1,a2,<span class="string">&quot;两个数组不一样&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组合断言即所有的断言都成功才算成功</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试组合断言&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">TestAllAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">        assertAll(<span class="string">&quot;Math&quot;</span>,</span><br><span class="line">                () -&gt; assertEquals(<span class="number">2</span>, <span class="number">1</span> + <span class="number">1</span>),</span><br><span class="line">                () -&gt; assertTrue(-<span class="number">1</span> &gt; <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试异常断言&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestExceptionAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">        assertThrows(</span><br><span class="line">                <span class="comment">//抛出的异常，执行的方法</span></span><br><span class="line">                ArithmeticException.class, () -&gt; &#123;<span class="type">int</span> i= <span class="number">10</span> / <span class="number">2</span>;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试快速失败&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestshouldFailAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">2</span>)&#123;</span><br><span class="line">            fail(<span class="string">&quot;应该抛出快速失败的异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h4><p>前置条件（assumptions与断言不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而<strong>不满足的前置条件只会使得测试方法的执行终止。</strong></p><p><font color='red'><strong>前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="meta">@DisplayName(&quot;测试前置条件&quot;)</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">testAssumptions</span><span class="params">()</span>&#123;</span><br><span class="line">       Assumptions.assumeTrue(<span class="literal">false</span>,<span class="string">&quot;结果不是true&quot;</span>);<span class="comment">//前置条件不成立，下方sout不会输出</span></span><br><span class="line">       System.out.println(<span class="string">&quot;**********&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h4><p>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。</p><p>在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 嵌套测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestingAStackDemo</span> &#123;</span><br><span class="line">    Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;new Stack()&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">isInstantiatedWithNew</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//在嵌套测试的情况下，外出的test不能驱动内层的Before(After)Each/All之类的方法提前运行和置后运行</span></span><br><span class="line">        <span class="comment">//换句话来说就是内层的before等方法不会在下方这个方法执行之前运行</span></span><br><span class="line">        assertNull(stack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;when new&quot;)</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">WhenNew</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeEach</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">createNewStack</span><span class="params">()</span> &#123;</span><br><span class="line">            stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;is empty&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">            assertTrue(stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">throwsExceptionWhenPopped</span><span class="params">()</span> &#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">throwsExceptionWhenPeeked</span><span class="params">()</span> &#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 内层的Test可以驱动外层的Before(After)Each/All之类的方法提前运行和置后运行</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">AfterPushing</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">anElement</span> <span class="operator">=</span> <span class="string">&quot;an element&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@BeforeEach</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">pushAnElement</span><span class="params">()</span> &#123;</span><br><span class="line">                stack.push(anElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">isNotEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">returnElementWhenPopped</span><span class="params">()</span> &#123;</span><br><span class="line">                assertEquals(anElement, stack.pop());</span><br><span class="line">                assertTrue(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">returnElementWhenPeeked</span><span class="params">()</span> &#123;</span><br><span class="line">                assertEquals(anElement, stack.peek());</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a><font color='red'><strong>参数化测试</strong></font></h4><p>@ValueSource: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</p><p>@NullSource: 表示为参数化测试提供一个null的入参</p><p>@EnumSource: 表示为参数化测试提供一个枚举入参</p><p>@CsvFileSource：表示读取指定CSV文件内容作为参数化测试入参</p><p>@MethodSource：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line">   <span class="meta">@DisplayName(&quot;参数化测试&quot;)</span></span><br><span class="line">   <span class="meta">@ValueSource(ints = &#123;1,5,6,7&#125;)</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">testParameterized</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">       System.out.println(num);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ParameterizedTest</span></span><br><span class="line">   <span class="meta">@DisplayName(&quot;参数化测试2&quot;)</span></span><br><span class="line">   <span class="meta">@MethodSource(&quot;stringProvider&quot;)</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">testParameterized</span><span class="params">(String string)</span>&#123;</span><br><span class="line">       System.out.println(string);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> Stream&lt;String&gt; <span class="title function_">stringProvider</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> Stream.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h3><h4 id="SpringBoot-Actuator"><a href="#SpringBoot-Actuator" class="headerlink" title="SpringBoot Actuator"></a>SpringBoot Actuator</h4><ul><li>对每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</li></ul><p>1.使用步骤</p><p>①引入场景</p><p>②访问 <a href="http://localhost:8080/actuator/">http://localhost:8080/actuator/</a>**</p><p>③暴露所有监控信息为HTTP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--      引入监控功能  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># management 是所有actuator的配置</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">true</span> <span class="comment">#默认开启所有监控端点</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span>  <span class="comment">#默认以web方式暴露所有监控端点</span></span><br></pre></td></tr></table></figure><p>2.常用<a href="https://www.yuque.com/atguigu/springboot/sgpvgn">端点</a></p><p>最常用的Endpoint：</p><p>Health：监控状况</p><p>Metrics：运行时指标</p><p>Loggers：日志记录</p><h4 id="Health-Endpoint"><a href="#Health-Endpoint" class="headerlink" title="Health Endpoint"></a>Health Endpoint</h4><p>健康检查端点一般用于在云平台，平台会定时的检查应用的健康状况，</p><p>重要的几点：</p><ul><li><p>health endpoint返回的结果，应该是一系列健康检查后的一个汇总报告</p></li><li><p>很多的健康检查默认已经自动配置好了，比如：数据库、redis等</p></li><li><p>可以很容易的添加自定义的健康检查机制</p></li></ul><h4 id="Metrics-Endpoint"><a href="#Metrics-Endpoint" class="headerlink" title="Metrics Endpoint"></a>Metrics Endpoint</h4><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到；</p><ul><li><p>通过Metrics对接多种监控系统</p></li><li><p>简化核心Metrics开发</p></li><li><p>添加自定义Metrics或者扩展已有Metrics</p></li></ul><p>由于目前水平过低，接触较少，留个印象吧，即使不知道以后是否能够有机会从事计算机行业</p><p><a href="https://www.yuque.com/atguigu/springboot/sgpvgn">剩下的内容</a>  &lt;—  点击这里</p><h3 id="Profile功能"><a href="#Profile功能" class="headerlink" title="Profile功能"></a>Profile功能</h3><ul><li><p>默认配置文件与指定的环境配置都会同时生效</p><ul><li><p>默认配置文件  application.yaml；任何时候都会加载</p></li><li><p>指定环境配置文件  application-{env}.yaml</p><ul><li><p>激活指定环境</p><p>①配置文件激活</p><p>②命令行激活：java -jar xxx.jar –spring.profiles.active&#x3D;prod  –person.name&#x3D;haha</p></li></ul></li></ul></li></ul><p>1.条件装配@@Profile</p><p>@@Profile可以使用在类或者方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据生产环境对配置类的内容进行操作</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Profile(&quot;pro&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductionConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConfig</span> &#123;</span><br><span class="line"><span class="comment">//根据生产环境对下方的bean进行注册</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;pro&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Man <span class="title function_">getMan</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.profile分组</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#application.properties是默认环境，默认加载</span></span><br><span class="line"><span class="comment">#在application.properties使用：</span></span><br><span class="line"><span class="comment">#--spring.profiles.active=xxx激活指定激活的环境</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">pro</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.profiles.group.pro[0]</span>=<span class="string">grp</span></span><br><span class="line"><span class="attr">spring.profiles.group.pro[1]</span>=<span class="string">pro</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.profiles.group.test[0]</span>=<span class="string">test</span></span><br></pre></td></tr></table></figure><h3 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h3><p>1.配置来源：常用来源(Java属性文件、YAML文件、环境变量、命令行参数)</p><p>2.配置文件查找位置</p><ul><li>后面查找的位置会覆盖前面的配置文件内容</li></ul><p>①classpath 根路径</p><p>②classpath 根路径下config目录</p><p>③jar包当前目录</p><p>④jar包当前目录的config目录</p><p>⑤&#x2F;config子目录的直接子目录(这一个只会在linux中生效)</p><p>3.配置文件的加载顺序</p><ul><li>后面加载的文件会覆盖前面的配置文件内容</li></ul><p>①当前jar包内部的application.properties和application.yml</p><p>②当前jar包内部的application-{profile}.properties 和 application-{profile}.yml</p><p>③引用的外部jar包的application.properties和application.yml</p><p>④引用的外部jar包的application-{profile}.properties 和 application-{profile}.yml</p><h3 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h3><ul><li><p>customize-spring-boot-starter</p></li><li><p>customize-spring-boot-starter-autoconfigurer</p><p>编写自动配置类 xxxAutoConfiguration -&gt; xxxxProperties</p><p>@Configuration</p><p>@Conditional</p><p>@EnableConfigurationProperties</p><p>@Bean</p></li></ul><h4 id="starter启动原理"><a href="#starter启动原理" class="headerlink" title="starter启动原理"></a>starter启动原理</h4><p>①starter场景引入了starter-autoconfigure依赖</p><p>①在每一次启动都会找到autoconfigure依赖中的META-INF&#x2F;spring.factories 文件中 </p><p>②根据这个文件的EnableAutoConfiguration的值，使得项目启动加载指定的自动配置类</p><p>③根据配置类的生效规则完成注入</p><p><font color='red'><strong>引入starter — xxxAutoConfiguration — 容器中放入组件 —- 绑定xxxProperties —- 配置项</strong></font></p><hr><h2 id="SpringBoot原理"><a href="#SpringBoot原理" class="headerlink" title="SpringBoot原理"></a>SpringBoot原理</h2><h3 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h3><p>①创建SpringApplication</p><ul><li><p>在启动过程会到spring.factories文件中查找这三个类</p><p>BootstrapRegistryInitializer(由于没有任何配置类注册这个组件，所有这里为0)</p><p><img src="https://s1.ax1x.com/2022/05/23/X90C4J.png"></p><p>ApplicationContextInitializer</p><p><img src="https://s1.ax1x.com/2022/05/23/X90Ajx.png"></p><p>ApplicationListener</p><p><img src="https://s1.ax1x.com/2022/05/23/X90ZDK.png"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.保存了主配置类的信息</span></span><br><span class="line"><span class="built_in">this</span>.primarySources = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.判断当前应用的类型，Servlet</span></span><br><span class="line"><span class="built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.bootstrapRegistryInitializers：bootstrap注册表初始化引导器 (List&lt;BootstrapRegistryInitializer.&gt; )</span></span><br><span class="line"><span class="built_in">this</span>.bootstrapRegistryInitializers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">   <span class="comment">//实际就是在找每一个spring.factories中的org.springframework.boot.Bootstraper</span></span><br><span class="line">getSpringFactoriesInstances(BootstrapRegistryInitializer.class));</span><br><span class="line"></span><br><span class="line"><span class="comment">//找ApplicationContextInitializer；找每一个spring.factories中的ApplicationContextInitializer</span></span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line"></span><br><span class="line"><span class="comment">//找ApplicationListener;应用监听器；找每一个spring.factories中的ApplicationListener</span></span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br></pre></td></tr></table></figure><p>②运行SpringApplication</p><ul><li><p>在运行过程会到spring.factories文件中查找这个类</p><p>SpringApplicationRunListener</p><p><img src="https://s1.ax1x.com/2022/05/23/X90uUe.png"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.记录应用启动的时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建引导上下文</span></span><br><span class="line">createBootstrapContext()&#123;</span><br><span class="line">    <span class="comment">//创建一个默认的引导上下文环境</span></span><br><span class="line">    <span class="type">DefaultBootstrapContext</span> <span class="variable">bootstrapContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBootstrapContext</span>();</span><br><span class="line"><span class="comment">//获取之前所有的bootstrappers逐个调用其内对应的方法</span></span><br><span class="line"><span class="built_in">this</span>.bootstrapRegistryInitializers.forEach((initializer) -&gt; initializer.initialize(bootstrapContext));</span><br><span class="line"><span class="keyword">return</span> bootstrapContext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让当前应用进入headless模式 java.awt.headless</span></span><br><span class="line"><span class="comment">//用于在缺失显示屏、鼠标或者键盘时的系统配置。</span></span><br><span class="line">configureHeadlessProperty();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取所有的运行监听器SpringApplicationRunListener</span></span><br><span class="line">getRunListeners(args)&#123;</span><br><span class="line">    <span class="comment">//每一个spring.factories中的SpringApplicationRunListener</span></span><br><span class="line">    <span class="comment">//这个方法的逻辑都是一样的，都是到spring.factories中找某个类型的组件</span></span><br><span class="line">   getSpringFactoriesInstances()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历获取的SpringApplicationRunListener调用其stating方法</span></span><br><span class="line"><span class="comment">//这个starting方法内部做了一个广播，遍历筛选合适的springApplicationListener</span></span><br><span class="line"><span class="comment">//循环调用springApplicationListener监听器的onApplicationEvent 方法</span></span><br><span class="line"><span class="comment">//相当于通知所有感兴趣系统正在启动过程的，项目正在 starting</span></span><br><span class="line">listeners.starting(bootstrapContext, <span class="built_in">this</span>.mainApplicationClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存命令行参数</span></span><br><span class="line"><span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备应用的环境信息</span></span><br><span class="line">prepareEnvironment(listeners...)&#123;</span><br><span class="line">    <span class="comment">//返回或创建一个基础环境信息对象</span></span><br><span class="line">   <span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> getOrCreateEnvironment();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据返回的环境信息对象对环境进行配置</span></span><br><span class="line">    <span class="comment">//在这个方法里读取所有的配置源的配置属性值(内部配置文件、外部配置文件)</span></span><br><span class="line">    configureEnvironment(environment, applicationArguments.getSourceArgs();</span><br><span class="line">                         </span><br><span class="line">    <span class="comment">//绑定环境信息</span></span><br><span class="line">ConfigurationPropertySources.attach(environment);</span><br><span class="line">                         </span><br><span class="line"><span class="comment">//遍历之前获取的监听器SpringApplicationRunListener挨个调用其environmentPrepared方法</span></span><br><span class="line">    <span class="comment">//这个environmentPrepared方法内部做了一个广播，遍历筛选合适的springApplicationListener                     </span></span><br><span class="line">    <span class="comment">//循环调用springApplicationListener监听器的onApplicationEvent 方法  </span></span><br><span class="line">    <span class="comment">//通知所有的SpringApplicationListener监听器当前环境准备已完成                        </span></span><br><span class="line">    listeners.environmentPrepared(bootstrapContext, environment);        </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//核心一步 创建ioc容器</span></span><br><span class="line"><span class="comment">//根据应用类型(Servlet)创建对应的容器类型</span></span><br><span class="line"><span class="comment">//应用类型(Servlet)会创建AnnotationConfigServletWebServerApplicationContext 的ioc容器                       </span></span><br><span class="line">context = createApplicationContext(); </span><br><span class="line">  </span><br><span class="line"><span class="comment">//准备ioc容器的基本信息                         </span></span><br><span class="line">prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner)&#123;</span><br><span class="line">    <span class="comment">//保存环境信息</span></span><br><span class="line">    context.setEnvironment(environment);</span><br><span class="line">    <span class="comment">//ioc容器的后置处理流程</span></span><br><span class="line">    postProcessApplicationContext(context);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//应用初始化applyInitializers</span></span><br><span class="line">    <span class="comment">//在这个方法里面遍历前面获取到的所有ApplicationContextInitializer</span></span><br><span class="line">    <span class="comment">//并执行每一个相应的initializer方法对ioc容器进行初始化扩展功能</span></span><br><span class="line">    applyInitializers(context);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历之前获取的监听器SpringApplicationRunListener挨个调用其contextPrepared方法</span></span><br><span class="line">    <span class="comment">//这个environmentPrepared方法内部做了一个广播，遍历筛选合适的springApplicationListener                     </span></span><br><span class="line">    <span class="comment">//循环调用springApplicationListener监听器的onApplicationEvent 方法  </span></span><br><span class="line">    <span class="comment">//通知所有的SpringApplicationListener监听器当前contextPrepared已完成  </span></span><br><span class="line">    listeners.contextPrepared(context);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//(同上操作)遍历之前获取的SpringApplicationRunListener挨个调用其contextLoaded方法</span></span><br><span class="line">    <span class="comment">//通知所有合适的监听器contextLoaded已完成</span></span><br><span class="line">    listeners.contextLoaded(context);    </span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//刷新ioc容器</span></span><br><span class="line">    <span class="comment">//里面执行的过程在spring注解驱动的源码中                     </span></span><br><span class="line">    refreshContext(context); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//容器刷新完成后进行的一些后置工作                   </span></span><br><span class="line">   afterRefresh(context, applicationArguments);</span><br><span class="line">                         </span><br><span class="line">    <span class="comment">//所有监听器调用 listeners.started(context); 通知所有合适的监听器started已完成</span></span><br><span class="line">    listeners.started(context, timeTakenToStartup);</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//调用所有runners；callRunners()</span></span><br><span class="line">     callRunners(context, applicationArguments)&#123;</span><br><span class="line">        <span class="comment">//获取容器中的 ApplicationRunner  </span></span><br><span class="line">        runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</span><br><span class="line">        <span class="comment">//获取容器中的  CommandLineRunner</span></span><br><span class="line">runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</span><br><span class="line">        <span class="comment">//合并所有runner并且按照@Order进行排序 </span></span><br><span class="line">         AnnotationAwareOrderComparator.sort(runners);</span><br><span class="line">         <span class="comment">//遍历所有的runner。调用 run 方法</span></span><br><span class="line"><span class="keyword">for</span> (Object runner : <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(runners)) &#123;</span><br><span class="line"><span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner) &#123;</span><br><span class="line">callRunner((ApplicationRunner) runner, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner) &#123;</span><br><span class="line">callRunner((CommandLineRunner) runner, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">     &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">catch</span>&#123;                    </span><br><span class="line">    <span class="comment">//如果上述方法出现异常在try</span></span><br><span class="line"><span class="comment">//调用合适的Listener的 failed</span></span><br><span class="line">listeners.failed(context, exception);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果正常执行没出现任何异常</span></span><br><span class="line"><span class="comment">//调用所有监听器的 ready方法</span></span><br><span class="line"><span class="comment">//这一步的作用是通知所有合适的监听器ready已完成</span></span><br><span class="line">    listeners.ready(context, timeTakenToReady); </span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">catch</span>&#123;                     </span><br><span class="line"><span class="comment">//ready方法如果出现异常。则继续调用所有合适的Listener的failed；</span></span><br><span class="line"><span class="comment">//通知所有的监听器当前出现了异常failed失败了</span></span><br><span class="line">    &#125;</span><br><span class="line">                      </span><br></pre></td></tr></table></figure><h3 id="读取spring-factories的三个组件"><a href="#读取spring-factories的三个组件" class="headerlink" title="读取spring.factories的三个组件"></a>读取spring.factories的三个组件</h3><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners</a></p><p>ApplicationContextInitializer</p><p>ApplicationListener</p><p>SpringApplicationRunListener</p><h3 id="容器中的两个runner"><a href="#容器中的两个runner" class="headerlink" title="容器中的两个runner"></a>容器中的两个runner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 应用启动做一个一次性事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义CommandLineRunner... run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义ApplicationRunner ... run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring注解驱动</title>
      <link href="/2022/05/09/SpringByAnnotation/"/>
      <url>/2022/05/09/SpringByAnnotation/</url>
      
        <content type="html"><![CDATA[<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="注解-配置类创建容器"><a href="#注解-配置类创建容器" class="headerlink" title="注解+配置类创建容器"></a>注解+配置类创建容器</h3><p><font color="red"><strong>本质与xml文件一样，只不过是使用大量注解替代了xml文件的编写</strong></font></p><ul><li>使用配置类代替xml配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//告诉Spring这是一个配置类</span></span><br><span class="line"><span class="comment">//扫描sring包下的组件,且排除类型为Controller的注解，不加入此容器</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;spring&quot;,includeFilters = &#123;  </span></span><br><span class="line"><span class="meta">    @ComponentScan.Filter(type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">                              classes =&#123;Controller.class&#125;)&#125;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;person&quot;)</span></span><br><span class="line">    <span class="comment">//将此方法生成的对象交给spring的IOC容器进行管理</span></span><br><span class="line">    <span class="comment">//对象类型为方法的返回值类型，默认是使用方法名作为id的标识</span></span><br><span class="line">    <span class="keyword">public</span>  Person <span class="title function_">getPerson01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试配置类是否加载成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPerson</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//加载配置类完成Spring容器的初始化</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="comment">//获取在Spring容器中已初始化完成指定类型的bean</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> context.getBean(Person.class);</span><br><span class="line">    System.out.println(p.toString());</span><br><span class="line">    <span class="comment">//获取指定类型的对象名字</span></span><br><span class="line">    String[] type = context.getBeanNamesForType(Person.class);</span><br><span class="line">    System.out.println(Arrays.toString(type));</span><br><span class="line">    <span class="comment">//获取Spring容器中定义的所有JavaBean 的名称</span></span><br><span class="line">    String[] names = context.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span>(String name : names)&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>扫描包</li></ul><table><thead><tr><th align="left">扫描包的设置</th><th align="left">部分属性说明</th></tr></thead><tbody><tr><td align="left">basePackages</td><td align="left">制定扫描哪个包下的组件</td></tr><tr><td align="left">excludeFilters</td><td align="left">按照规则排除扫描哪些类型的组件,不需要加use-default-filters&#x3D;false，否则扫描不到service和dao层组件</td></tr><tr><td align="left">includeFilters</td><td align="left">按照规则指定扫描哪些类型的组件,需要加use-default-filters&#x3D;false</td></tr><tr><td align="left">FilterType.ANNOTATION</td><td align="left">按照注解进行扫描</td></tr><tr><td align="left">FilterType.ASSIGNABLE_TYPE</td><td align="left">按照给定的类型扫描</td></tr><tr><td align="left">FilterType.ASPECTJ</td><td align="left">使用ASPECTJ表达式，使用较少</td></tr><tr><td align="left">FilterType.REGEX</td><td align="left">使用正则表达式匹配</td></tr><tr><td align="left">FilterType.CUSTOM</td><td align="left">使用自定义的规则</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//告诉Spring这是一个配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;spring&quot;,excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">                //指定排除类型为Controller的注解, 类型为BookServiceImpl的类，不加入此容器</span></span><br><span class="line"><span class="meta">//                @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = &#123;Controller.class&#125;),</span></span><br><span class="line"><span class="meta">//                @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE,classes = &#123;BookServiceImpl.class&#125;),</span></span><br><span class="line"><span class="meta">                @ComponentScan.Filter(type = FilterType.CUSTOM,classes = &#123;MyTypeFilter.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;,useDefaultFilters = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;person&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  Person <span class="title function_">getPerson01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义规则的的演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTypeFilter</span> <span class="keyword">implements</span> <span class="title class_">TypeFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : TODO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/27</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReader 读取当前正在扫描的类的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadataReaderFactory 可以获取其他任何类的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取当前类的注解信息</span></span><br><span class="line">        <span class="type">AnnotationMetadata</span> <span class="variable">annotationMetadata</span> <span class="operator">=</span> metadataReader.getAnnotationMetadata();</span><br><span class="line">        <span class="comment">//获取当前正在扫描的类的信息</span></span><br><span class="line">        <span class="type">ClassMetadata</span> <span class="variable">classMetadata</span> <span class="operator">=</span> metadataReader.getClassMetadata();</span><br><span class="line">        <span class="comment">//获取当前类资源(比如类的路径等)</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> metadataReader.getResource();</span><br><span class="line">        <span class="comment">//获取当前类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> classMetadata.getClassName();</span><br><span class="line">        System.out.println(<span class="string">&quot;类名是：&quot;</span> + className);</span><br><span class="line">        <span class="comment">//只要在指定扫描包下的都会进入这个规则的进行匹配，当类名中包含er就会被ioc容器收纳进行管理</span></span><br><span class="line">        <span class="keyword">if</span> (className.contains(<span class="string">&quot;er&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件添加"><a href="#组件添加" class="headerlink" title="组件添加"></a>组件添加</h3><p><font color="red"><strong>组件也是抽象的概念,可以理解为一些符合某种规范的类组合在一起就构成了组件。</strong></font></p><p>@ComponentScan 扫描指定的包路径下的组件</p><p>@Configuration  告诉Spring这是一个配置类</p><p>@Scope 标明Bean的作用域</p><ul><li>Scope注解值的4种不同情况：</li></ul><p>​prototype：多实例，每次在调用 getBean 方法时候创建多实例对象</p><p>​singleton：单实例(@Scope的默认值)：在加载完spring配置文件自动创建并放入ioc容器中</p><p>​request：同一次请求创建一个实例</p><p>​session：同一个session创建一个实例</p><p>@Lazy   表示延迟加载懒加载，可与@Scope搭配使用，表示在单实例的情况下，在调用getBean的方法时加载Bean对象</p><p>@Conditional({Condition接口实现类}) 按照一定的条件进行判断，符合条件创建其对象并加入IOC容器中进行管理</p><ul><li><p>Conditional注解可以使用在类或者方法上</p><p>①使用<font color="red"><strong>在方法</strong></font>：表示这个方法返回的对象bean满足某个Condition接口实现类重写方法的条件才会注册到ioc容器中</p><p>②使用<font color="red"><strong>在类上</strong></font>：表示这个类中配置的所有bean满足某个Condition接口实现类重写方法的条件才会注册到ioc容器中</p></li></ul><p>@Import 快速给容器中导入组件 </p><ul><li><p>@Import的三种用法</p><p>①@Import(要导入到容器中的组件)  容器中会自动创建该类的对象并进行管理，id默认是全类名</p><p>②ImportSelector接口的实现类重写方法：返回需要导入的组件的全类名String数组</p><p>③ImportBeanDefinitionRegistrar接口的实现类重写方法：手动注册bean到容器中</p></li></ul><p>给容器中注册组件的方式：</p><p>①包扫描+组件标注注解(@Controller&#x2F;@Service…)[自己写的类]</p><p>②@Bean[导入第三方包的组件]</p><p>③@Import[快速给容器中导入组件] </p><p>④使用Spring提供的FactoryBean(工厂bean)</p><ul><li><p>两种情况：</p><p>①默认获取到的工厂bean调用getObject创建的对象</p><p>②获取工厂Bean本身需要在id前面添加&amp;，id不设置默认为其类名小写</p><p><font color="red"><strong>注：在Spring整合其他框架大部分都是使用了Spring提供的FactoryBean</strong></font></p></li></ul><h4 id="Baen的生命周期"><a href="#Baen的生命周期" class="headerlink" title="Baen的生命周期"></a>Baen的生命周期</h4><p>①<font color='red'><strong>构造(对象创建)</strong></font></p><p>单实例：在容器启动的时候创建对象</p><p>多实例：在每次调用getBean方法时候创建</p><p>②对象实例化，即完成依赖注入或属性赋值。</p><p>注：很<font color='red'><strong>重要</strong></font>的一点：<font color='red'><strong>后置处理器的方法执行一定是发生在<font color='green'>对象实例化(对象创建)和各种属性完成赋值</font>以后，</strong></font></p><p><font color='red'><strong>在显示调用初始化方法的前后添加自己的逻辑代码</strong></font></p><p>③后置处理器 <font color='red'><strong>postProcessBeforeInitialization方法</strong></font></p><p>④<font color='red'><strong>初始化：在对象创建并完成赋值后，调用初始化方法</strong></font></p><p>⑤后置处理器<font color='red'> <strong>postProcessAfterInitialization方法</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>();<span class="comment">//传入配置类，创建ioc容器</span></span><br><span class="line">register(annotatedClasses);<span class="comment">//注册配置类到ioc容器中</span></span><br><span class="line">refresh();<span class="comment">//refresh()方法对容器进行刷新。spring容器的启动，创建bean，bean的初始化等一系列过程都在这个refresh方法里面</span></span><br><span class="line"></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);<span class="comment">//实例化所有的（非懒加载的）单实例bean对象</span></span><br><span class="line"></span><br><span class="line">beanFactory.preInstantiateSingletons();<span class="comment">//在这个方法里面遍历beanDefinitionNames并调用其的getBean(beanName)方法</span></span><br><span class="line"></span><br><span class="line">getBean(beanName)<span class="comment">//被下方方法重写</span></span><br><span class="line"></span><br><span class="line">getBean(String name);<span class="comment">//这个方法内部调用了doGetBean方法</span></span><br><span class="line"></span><br><span class="line">doGetBean&#123; <span class="comment">//doGetBean方法内部调用getSingleton方法</span></span><br><span class="line">    </span><br><span class="line">getSingleton(</span><br><span class="line"><span class="comment">//进入后首先:尝试从缓存中缓存保存的单实例Bean，如果能获取到说明这个bean已被创建过，所有被创建的bean都会放到缓存中</span></span><br><span class="line">Object singletonObject=<span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//此时因为是第一次调用,所以singletonObject为null,即缓存中获取不到对象，开始创建对象的过程    </span></span><br><span class="line"><span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">markBeanAsCreated(beanName);<span class="comment">//该方法会将此beanName标志成&quot;正在创建中&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Bean的定义信息</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">RootBeanDefinition</span> <span class="variable">mbd</span> <span class="operator">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取当前Bean依赖的其他bean，确保当前bean依赖的其他bean已经创建完成</span></span><br><span class="line">String[] dependsOn = mbd.getDependsOn();</span><br><span class="line"><span class="comment">//如果存在其他依赖的bean则使用下面方法进行创建</span></span><br><span class="line">registerDependentBean(dep, beanName);</span><br><span class="line">getBean(dep);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//若不存在依赖的bean则判断这个bean是否为单实例，是则开始创建对象</span></span><br><span class="line"><span class="keyword">if</span> (mbd.isSingleton()) &#123;    </span><br><span class="line">sharedInstance = getSingleton(beanName, <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>&lt;Object&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span> <span class="comment">//重写了ObjectFactory接口的getObject()方法</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;<span class="comment">//</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> createBean(beanName, mbd, args);<span class="comment">//是则调用这个方法创建对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入createBean(beanName, mbd, args)方法</span></span><br><span class="line"><span class="comment">//尝试InstantiationAwareBeanPostProcessor后置处理器提前执行进行拦截尝试创建一个代理对象</span></span><br><span class="line"><span class="comment">//在resolveBeforeInstantiation方法里，先执行postProcessBeforeInstantiation() </span></span><br><span class="line"><span class="comment">//如果有返回值，再执行postProcessAfterInitialization() 注意这里的两个方法不是同一个接口中的抽象方法           </span></span><br><span class="line"><span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> resolveBeforeInstantiation(beanName, mbdToUse); </span><br><span class="line">         </span><br><span class="line"><span class="comment">//没有返回代理对象则开始执行这个方法，这里开始创建一个真正的bean实例           </span></span><br><span class="line">doCreateBean(</span><br><span class="line"><span class="keyword">if</span> (instanceWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">instanceWrapper = createBeanInstance(beanName, mbd, args);<span class="comment">//这里创建当前实例对象并返回给下方方法使用</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//在这个方法中利用工厂方法或者对象的构造器完成了bean实例的创建</span></span><br><span class="line">createBeanInstance(beanName, mbd, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将上面创建好的bean单实例对象再次进行包装返回</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> (instanceWrapper != <span class="literal">null</span> ? instanceWrapper.getWrappedInstance() : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个部分不一定发生 仅仅是提供对bean的定义进行修改的功能    </span></span><br><span class="line"><span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line"><span class="comment">//调用MergedBeanDefinitionPostProcessors的对应处理器方法</span></span><br><span class="line">applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个部分不一定发生    </span></span><br><span class="line"><span class="comment">//可以解决创建对象的循环依赖问题</span></span><br><span class="line"><span class="keyword">if</span> (earlySingletonExposure) &#123;<span class="comment">//判断当前beanDefinition是否是单例且是允许提前暴露引用且是正在被创建,</span></span><br><span class="line">    <span class="comment">//满足条件则调用getEarlyBeanReference方法</span></span><br><span class="line">addSingletonFactory(beanName, <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>&lt;Object&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="keyword">return</span> getEarlyBeanReference(beanName, mbd, bean);<span class="comment">//返回exposedObject对象，实际上为正在被的对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对bean对象属性进行赋值，相当于Bean的生命周期第二步    </span></span><br><span class="line">populateBean(beanName, mbd, instanceWrapper)&#123;</span><br><span class="line"><span class="comment">//而在这个方法里面，在赋值之前 先获取了属于InstantiationAwareBeanPostProcesso的后置处理器</span></span><br><span class="line"><span class="comment">//并执行了这个处理器的postProcessAfterInstantiation()方法</span></span><br><span class="line">    <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line"><span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line"><span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line"><span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line"><span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">continueWithPropertyPopulation = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                </span><br><span class="line"><span class="comment">//再次获取了属于InstantiationAwareBeanPostProcessor的后置处理器</span></span><br><span class="line"><span class="comment">//并执行了这个处理器的postProcessPropertyValues()方法 </span></span><br><span class="line"><span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line"><span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line"><span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line"><span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">pvs = ibp.postProcessPropertyValues(pvs, filteredPds,bw.getWrappedInstance(),beanName);</span><br><span class="line"><span class="keyword">if</span> (pvs == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">            </span><br><span class="line"><span class="comment">//这一步才真正应用Bean属性的值，上面的步骤都发生在赋值之前：为属性利用setter方法等进行赋值</span></span><br><span class="line">applyPropertyValues(beanName, mbd, bw, pvs);          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置处理器的两个方法和调用的初始化方法都是在这个initialzeBean中完成的</span></span><br><span class="line">exposedObject = initializeBean(beanName, exposedObject, mbd)&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//执行实现了aware接口的方法    </span></span><br><span class="line">invokeAwareMethods(beanName, bean);  </span><br><span class="line">    </span><br><span class="line"><span class="comment">//遍历得到容器中所有的BeanPostProcessor：挨个执行BeforeInitialization，一旦返回null，不再执行后续的，跳出循环</span></span><br><span class="line">applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName)<span class="comment">//后置处理器的before方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行@PostConstruct注解标识的，InitializingBean接口实现类等自定义的初始化方法    </span></span><br><span class="line">invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//bean后置处理器的after方法，里面的执行流程和bean后置处理器的before方法差不多的执行流程</span></span><br><span class="line">applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName)</span><br><span class="line">&#125;;</span><br><span class="line">)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//在bean单实例对象实例化和初始化完成之后注册bean的销毁方法</span></span><br><span class="line">registerDisposableBeanIfNecessary(beanName, bean, mbd); </span><br><span class="line">        </span><br><span class="line"><span class="comment">//在doCreateBean()方法执行完成后就创建了bean对象</span></span><br><span class="line"><span class="comment">//通过下面的方法将这个bean添加到SingletonObjects缓存中        </span></span><br><span class="line">addSingleton(beanName, singletonObject); </span><br><span class="line">        </span><br><span class="line"><span class="comment">//在所有的Bean都利用getBean创建完成之后</span></span><br><span class="line"><span class="comment">//再通过遍历每一个bean的名字判断bean是否符合SmartInitializingSingleton接口的</span></span><br><span class="line"><span class="comment">//符合则执行下方的afterSingletonsInstantiated()方法       </span></span><br><span class="line"><span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">SmartInitializingSingleton</span> <span class="variable">smartSingleton</span> <span class="operator">=</span> (SmartInitializingSingleton) singletonInstance;    </span><br><span class="line">smartSingleton.afterSingletonsInstantiated();    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑥获得对象</p><p>⑦<font color='red'><strong>销毁</strong></font>：</p><p>​单实例bean在容器关闭之后调用销毁方法</p><p>​多实例bean，容器并不会管理这个bean，只负责创建bean，因此不会调用销毁方法</p><p>2.指定初始化和销毁方法的方式:</p><p>​①通过@Bean注解的属性值指定init-method和destory-method</p><p>​②通过Bean实现InitializingBean接口(定义初始化逻辑)，DisposableBean接口(定义销毁逻辑)</p><p>​③使用JSR250</p><p>​通过@PostConstruct注解，在bean创建和属性赋值完成后进行初始化方法</p><p>​通过@PreDestroy注解，在容器对进行bean销毁之前执行销毁方法</p><p>​④使用BeanPostProcessor接口：bean的后置处理器</p><p>​在bean初始化前后进行一些处理操作</p><p>​postProcessBeforeInitialization：在初始化方法之前调用</p><p>​postProcessAfterInitialization：在初始化方法之后调用</p><p>3.BeanPostProcessor在Spring底层的使用</p><p><font color='red'><strong>bean赋值，注入其他组件，@Autowired，生命周期注解功能，@Async等等都是使用BeanPostProcessor完成的</strong></font></p><p>①ApplicationContextAwareProcessor 后置处理器的作用：</p><p>​当应用程序定义的Bean实现ApplicationContextAware接口时注入ApplicationContext对象。</p><p>②BeanValidationPostProcessor 后置处理器的作用：常用于做数据校验</p><p>③InstantiationAwareBeanPostProcessor 后置处理器的作用：</p><p>​用于处理@PostConstruct和@PerDestroy注解等</p><hr><h3 id="组件赋值"><a href="#组件赋值" class="headerlink" title="组件赋值"></a>组件赋值</h3><ul><li><p>1.使用@Value赋值</p><p>①基本的数值</p><p>②可以写SpEL，#{}</p><p>③可以写${},取出配置文件properties中的值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用@PropertySource读取外部配置文件中key和value保存到运行的环境变量中</span></span><br><span class="line"><span class="comment">//加载完外部的配置文件以后再使用$&#123;&#125;取出配置文件的值</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:/person.properties&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig3</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;test&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;20-2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.email&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure><ul><li><p>2.使用@Autowired注入</p><p>①默认优先按照类型取容器中找对应的组件context.getBean(BookService.class)</p><p>②如果找到多个相同类型的值，再将属性的名称作为组件的id去容器中查找</p><p>③@Qualifier(“bookDao2”)，使用@Qualifier指定需要装配的组件的id，而不是使用属性名</p><p>④使用自动装配则要求容器内必须有这个组件，否则报错，但可以使用@Autowired(require&#x3D;false)来避免报错</p><p>⑤@Primary，让spring自动装配时默认使用首选的bean，也可以继续使用@Qualifier指定装配哪个</p></li></ul><p> 以上都是Spring支持的注解，Spring还支持使用@Resource(JSR250)和Inject(JSR303)[java规范的注解]</p><p>​@Resource：可以和@Autowired一样实现自动装配，但是默认使用组件名称进行装配的</p><p>​但不支持@Primary注解和@Autowired(require&#x3D;false)</p><p>​ @Inject：需要导入依赖，和Autowired功能一样，但也没有require&#x3D;false的属性</p><p><font color='red'><strong>关于@Autowired的补充：</strong></font></p><p>@Autowired注解可以使用在方法上、构造器上、属性上、参数上，但都是从容器中获取参数组件的值</p><p>使用在方法上：@Bean+方法参数，从容器中获取，默认省略@Autowired</p><p>使用在构造器上：如果组件内只有一个有参构造器，这个有参构造器的@Autowired可以省略</p><p>使用在参数上：也可以省略@Autowired，默认从容器中获取组件的值</p><ul><li><p>3.自定义组件想要使用Spring容器底层的一些组件需要实现xxxAware：</p><p>​<font color='red'><strong>自定义组件实现xxxAware</strong></font>：在创建对象的时候，会调用接口规定的方法注入相关的组件：Aware</p></li></ul><p>​<font color='red'><strong>作用是：可以把Spring底层的一些组件注入到自己定义的bean中去，而这些bean之所以能注入都是使用了相应的xxxProcessor</strong></font></p><p>​例如：ApplicationContextAware &#x3D;&#x3D;&gt; ApplicationContextAwareProcessor</p><ul><li><p>4.Profile：Spring提供的根据不同环境：动态的激活和切换一系列的组件功能</p><p>@Profile：指定组件在那个环境的情况下才能被注册到容器中，不指定则在任何环境下都能注册这些组件</p><p><font color='red'><strong>方法上加了环境标识的bean，只有在对应的环境下才能被注册到容器中，默认是default环境</strong></font></p><p><font color='red'><strong>如果是写在类上,只有符合指定的环境，整个类中的bean才能注册到容器中</strong></font></p><p><strong>如何切换数据源：</strong></p><p>①使用命令行参数，在虚拟机参数位置设置：-Dspring.profiles.active&#x3D;对应环境的名称</p></li></ul><p>​②代码的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个applicationContext对象</span></span><br><span class="line">        <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">        <span class="comment">//2.在容器还没启动创建其他bean之前设置激活的环境，可以设置多个</span></span><br><span class="line">        context.getEnvironment().setActiveProfiles(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">        <span class="comment">//3.注册主配置类</span></span><br><span class="line">        context.register(ProfileConfig.class);</span><br><span class="line">        <span class="comment">//4.启动刷新容器</span></span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        String[] names = context.getBeanNamesForType(DataSource.class);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">            System.out.println(names[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>1.通知类型：</p><p>①前置通知(@Before)：在增强方法前执行</p><p>②后置通知(@AfterReturning)：在增强方法后执行</p><p>③环绕通知(@Around)：在增强方法前后分别执行</p><p>④异常通知(@AfterThrowing)：在增强方法出现异常后执行</p><p>⑤最终通知(@After)：无论增强方法怎么样，都会执行</p><ul><li>@After在方法调用之后执行</li><li>@AfterReturning表示在返回值后面执行</li></ul><p>2.使用注解进行Aop操作的流程</p><p>①创建<font color='red'><strong>被增强类，内部定义被增强的方法</strong>  </font></p><p>②创建<font color='red'><strong>增强类，配置切入点表达式(execution)和各种通知</strong></font>，<font color='red'><strong>@Pointcut</strong></font>注解抽取相同切入点</p><p>③将<font color='red'><strong>被增强类或增强类的加入ioc容器</strong></font></p><p>④在增强类上设置注解<font color='red'><strong>@Aspsct</strong></font>，告诉Spring这是个切面类</p><p>⑤在配置类上设置注解<font color='red'><strong>@EnableAspectJAutoProxy 开启基于注解的aop模式</strong> </font></p><ul><li>在Spring中很多的 @EnableXXX的注解，它的意思都是表示开启什么东西</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">//告诉Spring这是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathLogAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取相同切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public int spring.aop.Math.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">point</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;point()&quot;)</span><span class="comment">//前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showExecute</span><span class="params">(JoinPoint joinPoint)</span>&#123;<span class="comment">//joinPoint可以获取被执行的方法的各种信息</span></span><br><span class="line">        System.out.println(joinPoint.getSignature().getName() + <span class="string">&quot;业务方法被调用,参数是&quot;</span> + Arrays.asList(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//returning可以获取返回的参数值用方法形参里的result来接收</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;point()&quot;,returning = &quot;result&quot;)</span><span class="comment">//后置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showExecuteReturn</span><span class="params">(JoinPoint joinPoint,Object result)</span>&#123;<span class="comment">//多参数时，JoinPoint必须在参数列表的第一位，否则报错</span></span><br><span class="line">        System.out.println(joinPoint.getSignature().getName() + <span class="string">&quot;业务方法正常执行,返回值是&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//throwing可以获取异常的信息用方法形参里的exception来接收</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;point()&quot;,throwing = &quot;exception&quot;)</span><span class="comment">//异常通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showExecuteException</span><span class="params">(Exception exception)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务方法出现异常，异常信息是&quot;</span> + exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;point()&quot;)</span><span class="comment">//最终通知，也叫返回通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showExecuteEnd</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        System.out.println(joinPoint.getSignature().getName()+<span class="string">&quot;业务方法调用结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Aop实现的原理"><a href="#Aop实现的原理" class="headerlink" title="Aop实现的原理"></a>Aop实现的原理</h4><p>由@EnableAspectJAutoProxy注解快速导入AspectJAutoProxyRegistrar组件，</p><p>此组件实现了ImportBeanDefinitionRegistrar接口，在重写的方法中通过调用</p><p>registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry)</p><p>然后在这个方法定义了一个将注册的bean定义成了一个名为AnnotationAwareAspectJAutoProxyCreator的BeanDefinition，</p><p>通过registerBeanDefinitions在容器中注册了一个beanName为internalAutoProxyCreator，类型是</p><p>AnnotationAwareAspectJAutoProxyCreator的bean</p><p><font color='red'><strong>总而言之，就是通过@EnableAspectJAutoProxy注解在ioc容器中注册了类型是AnnotationAwareAspectJAutoProxyCreator的后置处理器组件</strong></font></p><p>这里的注册 Bean 是指将  Bean定义成BeanDefinition，之后放入Spring容器中，</p><p>我们常说的容器其实就是 Beanfactory 中的一个 Map，key 是 Bean 的名称，value 是 Bean 对应的 BeanDefinition，</p><ul><li><p>AnnotationAwareAspectJAutoProxyCreator的继承树：</p><p><font color='red'><strong>AnnotationAwareAspectJAutoProxyCreator</strong></font></p><p>​-&gt;extends  AspectJAwareAdvisorAutoProxyCreator</p><p>​-&gt;extends  AbstractAdvisorAutoProxyCreator</p><p>​-&gt;extends  AbstractAutoProxyCreator</p><p>​<font color='red'><strong>-&gt;implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware</strong></font></p></li></ul><p>​<font color='red'><strong>因此只需要关注后置处理器（在bean初始化完成前后做的事情）、自动装配BeanFactory</strong></font></p><h5 id="后置处理器的注册和创建"><a href="#后置处理器的注册和创建" class="headerlink" title="后置处理器的注册和创建"></a>后置处理器的注册和创建</h5><p>创建和注册AnnotationAwareAspectJAutoProxyCreator后置处理器的流程：</p><p>​①传入配置类，创建ioc容器</p><p>​②注册配置类，调用refresh()刷新容器</p><p>​③registerBeanPostProcessors(beanFactory);注册bean的后置处理器来拦截bean的创建</p><p>​Ⅰ.先获取ioc容器已经定义了的需要创建对象的所有BeanPostProcessor</p><p>​Ⅱ.给容器中添加别的BeanPostProcessor</p><p>​Ⅲ.取得所有的后置处理器</p><p>​Ⅳ.按照类型匹配优先注册实现了PriorityOrdered接口的BeanPostProcessor</p><p>​Ⅴ.再注册实现了Ordered接口的BeanPostProcessor</p><p>​Ⅵ.最后注册所有常规的BeanPostProcessor</p><p>​Ⅶ.注册BeanPostProcessor，实际上就是在容器中创建BeanPostProcessor的对象</p><p>​创建定义名为internalAutoProxyCreator的BeanPostProcessor，类型是AnnotationAwareAspectJAutoProxyCreator</p><p>​创建Bean的实例(实例化AnnotationAwareAspectJAutoProxyCreator类型的bean)</p><p>​ populateBean(beanName, mbd, instanceWrapper); 给刚刚实例化完成的bean进行属性赋值</p><p>​ initializeBean(beanName, exposedObject, mbd); 对bean进行初始化</p><p>​invokeAwareMethods()；处理Aware接口的方法回调</p><p>​applyBeanPostProcessorsBeforeInitialization()：应用后置处理器的before方法</p><p>​invokeInitMethods()；执行自定义的初始化方法</p><p>​applyBeanPostProcessorsAfterInitialization()：应用后置处理器的After方法</p><p>​至此，BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功</p><p>​Ⅷ.把BeanPostPrpcessor添加到BeanFactory中，beanFactory.addBeanPostPrpcessor(postProccessor)</p><h5 id="后置处理器的执行时机"><a href="#后置处理器的执行时机" class="headerlink" title="后置处理器的执行时机"></a>后置处理器的执行时机</h5><ul><li><font color='red'><strong>一句话概括：【在所有bean创建对象之前进行拦截判断是否能从缓存中直接返回一个代理对象，不能再开始创建对象】</strong></font></li></ul><p><font color='red'><strong>AnnotationAwareAspectJAutoProxyCreator后置处理器是这个类型的  &#x3D;&#x3D;&gt;  InstantiationAwareBeanPostProcessor，</strong></font></p><p>因此后置处理器方法有所不同</p><p>执行过程：</p><p>1.遍历获取容器中已经定义好的所有bean的名字，依次创建对象；</p><p>getBean() -&gt; doGetBean() -&gt; getSingleton()</p><p>先从缓存中获取当前bean，如果能获取到，说明bean是已经创建了的，直接使用，否则进行创建</p><p>2.createBean();创建bean </p><p><font color='red'><strong>【AnnotationAwareAspectJAutoProxyCreator会在任何bean创建之前进行先尝试返回bean的实例，</strong></font></p><p><font color='red'><strong>会调用 postProcessBeforeInstantiation()】</strong></font></p><p><font color='red'><strong>【InstantiationAwareBeanPostProcessor 是在bean对象实例化之前尝试用后置处理器返回对象，也就是创建对象之前进行调用】</strong></font></p><p>①resolveBeforeInstantiation(beanName, mbdToUse)；解析BeforeBeforeInstantiation方法：</p><p>希望后置处理器在此能返回一个代理对象，如果能返回就直接使用，</p><p>在bean &#x3D; applyBeanPostProcessorsBeforeInstantiation(targetType, beanName)方法中</p><p>获取所有的后置处理器，判断是否有属于InstantiationAwareBeanPostProcessor，有则执行</p><p>postProcessBeforeInstantiation(beanClass, beanName);</p><p>bean &#x3D; applyBeanPostProcessorsAfterInitialization(bean, beanName);</p><p>不能就进行创建(即调用doCreateBean)</p><p>②doCreateBean(beanName,mdbToUse,args);这才是真正创建bean的过程，和上面③.Ⅶ的流程差不多</p><h5 id="后置处理器创建Aop代理对象"><a href="#后置处理器创建Aop代理对象" class="headerlink" title="后置处理器创建Aop代理对象"></a>后置处理器创建Aop代理对象</h5><ul><li><p>在每一个bean创建之前都会被AnnotationAwareAspectJAutoProxyCreator拦截并调用其postProcessBeforeInstantiation方法</p><p>目前只关心两个关键bean的创建：Math和MathLogAop</p></li></ul><p>postProcessBeforeInstantiation方法：</p><p>①判断当前bean是否在advisedBeans(这里面保存了所有需要被增强的bean)中</p><p>②判断当前的bean是否是基础类型Advice、Pointcut、Advisor、AopInfrastructureBean接口的实现类或者是否是切面(@Aspect)</p><p>③是否应该被跳过</p><p>​Ⅰ获取候选的增强器(增强类里面的通知方法) List<Advisor> candidateAdvisors</p><p>​Ⅰ每一个封装的增强器都是InstantiationModelAwarePointcutAdvisor；</p><p>​Ⅱ判断每一个增强器是否是AspectJPointcutAdvisor：是则返回true</p><p>​永远都返回false</p><p>对象创建完成，调用下方的方法</p><p>postProcessAfterInitialization方法：</p><p>return wrapIfNecessary(bean, beanName, cacheKey);&#x2F;&#x2F;在需要包装的情况下返回</p><p>①获取当前bean的所有增强器和增强方法 </p><p>​Ⅰ找到候选的所有增强器(找那些通知方法是需要被应用的当前bean的)</p><p>​Ⅱ获取到能在bean使用的增强器</p><p>​Ⅲ给增强器排序</p><p>②保存当前bean在advisedBeans中，this.advisedBeans.put(cacheKey, Boolean.TRUE);</p><p>③如果当前bean需要被增强就创建代理对象  Object proxy &#x3D; createProxy</p><p>​Ⅰ获取所有增强器(增强类中的方法)</p><p>​ Ⅱ并保存到ProxyFactory中</p><p>​Ⅲ创建代理对象：Spring自动决定</p><p>​JdkDynamicAopProxy(config);jdk动态代理；</p><p>​ObjenesisCglibAopProxy(config);cglib的动态代理</p><p>④给容器中返回当前组件使用cglib增强的代理对象</p><p>⑤当容器中获取到这个组件的代理对象，执行目标方法的时候就会执行通知方法的流程</p><h5 id="Aop代理对象执行目标方法"><a href="#Aop代理对象执行目标方法" class="headerlink" title="Aop代理对象执行目标方法"></a>Aop代理对象执行目标方法</h5><p><font color='red'><strong>可以理解为从代理对象执行的目标方法中获取拦截器链，有则创建一个方法调用，传入相关的信息，没有则直接调用目标方法</strong></font></p><p>容器中保存了组件的代理对象(cglib增强后的对象)，这个对象里面保存了详细的信息(增强器，目标对象等等)</p><p>①CglibAopProxy.intercept();拦截目标方法的执行</p><p>②获取代理对象将要执行的目标方法的拦截器链;</p><p>List[Object] chain &#x3D; this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</p><p>​Ⅰ.List[Object]  interceptorList &#x3D; new ArrayList 保存所有的拦截器(共有5个，一个默认的ExposeInvocationInterceptor 和 4个增强器)</p><p>​Ⅱ.遍历所有的增强器，将每一个增强器度转为Interceptor；</p><table><thead><tr><th align="left">Interceptor[] interceptors &#x3D; registry.getInterceptors(advisor)方法中的执行：</th></tr></thead><tbody><tr><td align="left">创建List[MethodInterceptor]，获得当前的增强器</td></tr><tr><td align="left">判断增强器类型，如果是MethodInterceptor，直接加入到集合中</td></tr><tr><td align="left">如果不是，使用AdvisorAdapter适配器将增强器转为MethodInterceptor</td></tr><tr><td align="left">转换完成将此List转换为MethodInterceptor类型的数组并返回</td></tr></tbody></table><p>③如果没有拦截器链，则直接执行目标方法</p><p><strong>拦截器链（每一个通知方法又被包装为方法拦截器，利用MethodInterceptor机制）</strong></p><p>④如果有拦截器链，将需要执行的目标对象，目标方法，拦截器链等信息传入创建一个CglibMethodInvocation对象</p><p>并调用Object retVal &#x3D; mi.proceed()方法执行,此时proceed()的调用者就是刚刚创建的CglibMethodInvocation这个对象</p><h5 id="拦截器链的执行"><a href="#拦截器链的执行" class="headerlink" title="拦截器链的执行"></a><strong>拦截器链的执行</strong></h5><ul><li>currentInterceptorIndex记录当前拦截器的索引</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取相应索引位置上的拦截器</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">interceptorOrInterceptionAdvice</span> <span class="operator">=</span></span><br><span class="line">      <span class="built_in">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="built_in">this</span>.currentInterceptorIndex);</span><br><span class="line"><span class="comment">//判断拦截器的类型</span></span><br><span class="line"><span class="keyword">if</span> (dm.methodMatcher.matches(<span class="built_in">this</span>.method, <span class="built_in">this</span>.targetClass, <span class="built_in">this</span>.arguments)) &#123;</span><br><span class="line"><span class="keyword">return</span> dm.interceptor.invoke(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①如果没有拦截器执行就执行目标方法，或拦截器的索引和拦截器数组-1大小一样(执行到了最后的一个拦截器)</p><p>②链式获取每一个拦截器，拦截器执行invoke方法，每一个拦截器等待下一个拦截器执行完成返回以后再来执行</p><p>​<strong>通过拦截器链的机制，保证通知方法与目标方法的执行顺序</strong></p><p><strong><img src="https://s1.ax1x.com/2022/05/09/OJtQjU.png" alt="拦截器链执行顺序"></strong></p><h4 id="Aop原理总结"><a href="#Aop原理总结" class="headerlink" title="Aop原理总结"></a><strong>Aop原理总结</strong></h4><p>1.@EnableAspectJAutoProxy 开启AOP功能</p><ul><li><p><strong>@EnableAspectJAutoProxy 会给容器中注册一个组件 AnnotationAwareAspectJAutoProxyCreator</strong></p></li><li><p><strong>AnnotationAwareAspectJAutoProxyCreator是一个后置处理器；</strong></p></li></ul><p>2.容器的创建流程：</p><p>​①registerBeanPostProcessors（）注册后置处理器；创建AnnotationAwareAspectJAutoProxyCreator对象</p><p>​②finishBeanFactoryInitialization（）实例化剩下的单实例bean</p><p>​Ⅰ.创建业务逻辑组件和切面组件</p><p>​Ⅱ.AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程</p><p>​Ⅲ.组件创建完之后，判断组件是否需要增强</p><p>​需要增强：切面的通知方法，包装成增强器（Advisor）;给业务逻辑组件创建一个代理对象（cglib）</p><p>3.执行目标方法：</p><p>​①代理对象执行目标方法</p><p>​②CglibAopProxy.intercept()</p><p>​Ⅰ.得到目标方法的拦截器链（增强器包装成拦截器MethodInterceptor）</p><p>​Ⅱ.利用拦截器的链式机制，依次进入每一个拦截器进行执行；</p><p>​Ⅲ.效果：</p><p>​<strong>正常执行：前置通知-》目标方法-》后置通知-》最终通知</strong></p><p>​<strong>出现异常：前置通知-》目标方法-》最终通知-》异常通知</strong></p><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a><strong>声明式事务</strong></h3><p><strong>@Transactional 表示当前方法是个事务方法</strong></p><p><strong>@EnableTransactionManagement 开启基于注解的事务管理功能</strong></p><p>基于注解模式开启事务的步骤：</p><p>①在配置类上开启基于注解的事务管理功能</p><p>②将@Transactional 注解标注在需要进行事务管理的方法上</p><p>③必须在容器中注册事务管理器(@Bean等方法)</p><h4 id="注解实现事务管理的原理"><a href="#注解实现事务管理的原理" class="headerlink" title="注解实现事务管理的原理"></a><strong>注解实现事务管理的原理</strong></h4><p>1.@EnableTransactionManagement注解通过@Import向容器中导入TransactionManagementConfigurationSelector组件</p><p>2.通过判断Advice.proxy分别导入</p><p>​AutoProxyRegistrar：给容器中注册InfrastructureAdvisorAutoProxyCreator 后置处理器组件</p><p>作用：利用后置处理器的机制在对象创建以后，包装对象，返回一个代理对象，代理对象执行方法利用拦截器进行拦截</p><p>​ProxyTransactionManagementConfiguration组件</p><p>作用：①给容器中注册事务增强器</p><p>​Ⅰ.事务增强器中有一个事务属性源的对象，new AnnotationTransactionAttributeSource()可以获取所有事务属性。</p><p>​Ⅱ.事务拦截器：transactionInterceptor保存了事务属性信息，事务管理器，同时它还是个MethodInterceptor，</p><p>​ 在目标方法执行的时候执行拦截器链，而这里的拦截器链只有一个拦截器就是事务拦截器</p><p>​ 事务拦截器所做的工作：</p><p>​第一，获取事务相关的属性，</p><p>​第二，再获取事务管理器(如果是事先没有任何设置则默认按照PlatformTransactionManager类型获取一个)</p><p>​第三，执行目标方法：</p><p>​如果异常，获取事务管理器，利用事务管理器回滚操作</p><p>​如果正常，利用事务管理器，提交事务</p><hr><h2 id="扩展原理"><a href="#扩展原理" class="headerlink" title="扩展原理"></a>扩展原理</h2><h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><p>BeanPostProcessor的执行时机：它是bean的后置处理器，在bean的创建对象初始化前后进行工作</p><p>BeanFactoryPostProcessor的执行时机：<font color='red'><strong>它是beanFactory的后置处理器，在BeanFactory完成标准初始化之后进行拦截工作，</strong></font></p><p>​<font color='red'><strong>在所有定义的bean被加载到beanFactory，但还没有进行实例化之前</strong></font></p><p>执行流程：</p><p>1.创建ioc容器对象</p><p>2.invokeBeanFactoryPostProcessors(beanFactory) 执行BeanFactoryPostProcessor；</p><p>​①直接在BeanFactory找到所有类型是BeanFactoryPostProcessor的组件并执行相应的方法</p><p>​②在实例化其他组件之前执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>();</span><br><span class="line">register(annotatedClasses); <span class="comment">//1.创建ioc容器对象</span></span><br><span class="line">refresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">//refresh()里面各种调用方法执行到</span></span><br><span class="line">invokeBeanFactoryPostProcessors()&#123;</span><br><span class="line"><span class="comment">//按照类型获取所有的BeanFactoryPostProcessor组件的名称</span></span><br><span class="line">String[] postProcessorNames =</span><br><span class="line">beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class) </span><br><span class="line"><span class="comment">//遍历获取的组件名称根据实现的不同接口分别放进不同的集合中</span></span><br><span class="line"><span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建一个nonOrderedPostProcessors集合放进所有符合此类型的组件名称</span></span><br><span class="line">List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;BeanFactoryPostProcessor&gt;();</span><br><span class="line"><span class="keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.遍历此nonOrderedPostProcessors挨个执行postProcessBeanFactory方法</span></span><br><span class="line">invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h3><ul><li><font color='red'><strong>继承至BeanFactoryPostProcessor，是BeanFactoryPostProcessor的子接口</strong></font></li></ul><p>执行时机：<font color='red'><strong>在所有定义的bean将要被加载到BeanFactory，bean没有进行实例化之前</strong></font></p><p>执行顺序：1.创建ioc容器对象</p><p>​2.refresh()  –&gt; invokeBeanFactoryPostProcessors()</p><p>​3.从容器中获取所有的BeanDefinitionRegistryPostProcessor组件</p><p>​①依次除发所有的postProcessorBeanDefinitionRegistry()方法</p><p>​②再来触发postProcessBeanFactory()方法</p><p>​4.再从容器中找到BeanFactoryPostProcessor组件，依次触发()方法</p><h3 id="ApplicationListener"><a href="#ApplicationListener" class="headerlink" title="ApplicationListener"></a>ApplicationListener</h3><p>ApplicationListener：监听容器中发布的事件，事件驱动模型开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听ApplicationEvent及其下面的子事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationListener</span>&lt;E <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title class_">EventListener</span></span><br></pre></td></tr></table></figure><p>一、监听器的执行：</p><p>①方法一：创建一个ApplicationListener接口的实现类来监听某个事件(必须是ApplicationEvent及其子类)</p><p>​方法二：使用注解@EventListener,其通过EventListenerMethodProcessor后置处理器解析标注了此注解</p><p>②将此实现类加入到ioc容器</p><p>③只有容器中有相关事件的发布，监听器就被触发</p><p>​ContextRefreshedEvent：容器刷新完成就会触发这个事件</p><p>​ContextClosedEvent：容器关闭时触发这个事件</p><p>④发布一个自定义事件</p><p>​context.publishEvent()</p><p>二、执行原理：</p><p>1.创建ioc容器对象，refresh()</p><p>2.finishRefresh()；容器完成刷新</p><p>3.在publishEvent(new ContextRefreshedEvent(this))方法里面;</p><p>​①获取事件的多播器(派发器)，getApplicationEventMulticaster()</p><p>​ ②multicastEvent派发事件</p><p>​ ③获取所有支持类型的ApplicationListener</p><p>​for (final ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) {</p><p>​Ⅰ.如果Excutor不为空，则可以支持使用Executor进行异步派发事件 Executor executor &#x3D; getTaskExecutor();</p><p>​ Ⅱ.如果Excutor为空，则使用同步的方式直接执行listener方法 invokeListener(listener, event);</p><p>​拿到listener回调onApplicationEvent方法</p><p>三、事件多播器的获取：</p><p>①创建ioc容器对象</p><p>②initApplicationEventMulticaster();初始化多播器</p><p>​两种情况：第一种，先去容器中尝试获取id&#x3D;“applicationEventMulticaster”的组件</p><p>​第二种，如果不存在则创建一个new SimpleApplicationEventMulticaster(beanFactory)</p><p>​并加入到容器中，则在其他组件派发事件自动注入这个组件</p><p>四、容器中的监听器的获取：</p><p>①创建ioc容器对象</p><p>②registerListeners();</p><p>​从容器中获取所有的监听器并注册到applicationEventMulticastera派发器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">for</span> (String listenerBeanName : listenerBeanNames) &#123;</span><br><span class="line">getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五、<font color='red'><strong>EventListenerMethodProcessor专用解析@EventListener注解，实现了SmartInitializingSingleton的接口</strong></font></p><p>SmartInitializingSingleton接口的执行原理：</p><p>①创建ioc容器对象并refresh()</p><p>②finishBeanFactoryInitialization(beanFactory);实例化非延迟加载的单实例bean</p><p>​Ⅰ.先创建所有的单实例bean：getBean();</p><p>​Ⅱ.获取所有创建好的单实例bean，判断是否是SmartInitializingSingleton类型的：</p><p>​符合则调用afterSingletonsInstantiated()方法</p><p>​在afterSingletonsInstantiated()方法中获取所有类型的bean对象并逐个遍历处理processBean(factories, beanName, type);</p><p>​在processBean()方法中判断每一个bean的方法是否标注了@EventListener注解，若有则通过EventListenerFactory工厂为这个</p><p>​方法创建一个applicationListener对象，最后将这个对象添加到ioc容器中</p><p>​ Ⅲ.执行发布事件方法，剩下的流程执行原理第三步无异</p><h2 id="Spring容器创建过程"><a href="#Spring容器创建过程" class="headerlink" title="Spring容器创建过程"></a>Spring容器创建过程</h2><p>1.spring容器的refresh()方法创建刷新</p><p>①prepareRefresh(); 刷新前的一些预处理</p><p>​Ⅰ.initPropertySources(); 初始化部分属性设置；默认留给子类做扩展用</p><p>​Ⅱ.getEnvironment().validateRequiredProperties()；验证必须的属性文件数据</p><p>​Ⅲ.earlyApplicationEvents &#x3D; new LinkedHashSet<ApplicationEvent>();收集部分早期事件，当多播器初始化完成后立即发布</p><p>②ConfigurableListableBeanFactory beanFactory &#x3D; obtainFreshBeanFactory();获得bean工厂</p><p>​Ⅰ.refreshBeanFactory();刷新BeanFactory</p><p>​this.beanFactory.setSerializationId(getId()); 给当前的beanFactory设置一个id</p><p>​Ⅱ.getBeanFactory() <font color='red'><strong>通过AnnotationConfigApplicationContext的父类</strong></font></p><p>​<font color='red'><strong>GenericApplicationContext的无参构造器中获取创建好的beanFactory对象</strong></font></p><p>​Ⅲ.将刚刚获得的BeanFactory对象【DefaultListableBeanFactory】，此时的BeanFactory只有默认内容，什么都没做设置</p><p>③prepareBeanFactory(beanFactory);对刚刚获得的默认BeanFactory进行一些设置</p><p>​Ⅰ.设置BeanFactory的类加载器、表达式解析器等</p><p>​Ⅱ.添加部分的后置处理器【ApplicationContextAwareProcessor】</p><p>​Ⅲ.设置忽略自动装配的接口</p><p>​Ⅳ.注册可以解析的自动装配，能够在任何组件中自动注入的：BeanFactory，ApplicationContext</p><p>​Ⅴ.添加BeanPostProcessor【ApplicationListenerDetector】</p><p>​Ⅵ.添加编译时的AspectJ</p><p>​Ⅶ.给BeanFactory中注册一些能用的组件</p><p>④postProcessBeanFactory(beanFactory);在BeanFactory完成部分设置后进行一些后置处理工作，一般留给子类重写做扩展用</p><p>⑤invokeBeanFactoryPostProcessors(beanFactory); 在这里面执行两个后置处理器</p><p>BeanDefinitionRegistryPostProcessor 的postProcessBeanDefinitionRegistry()方法</p><p>BeanDefinitionRegistryPostProcessor的postProcessBeanFactory()方法</p><p>BeanFactoryPostProcessor的postProcessBeanFactory()方法</p><p>​Ⅰ.获取所有的BeanDefinitionRegistryPostProcessor</p><p>​Ⅱ.按照实现PriorityOrdered, Ordered接口, 没实现接口的顺序进行注册并遍历执行对应的postProcessBeanDefinitionRegistry</p><p>​Ⅲ.获取所有的BeanFactoryPostProcessor</p><p>​Ⅳ.按照实现PriorityOrdered, Ordered接口, 没实现接口的顺序进行注册并遍历执行对应的postProcessBeanFactory</p><p>⑥registerBeanPostProcessors(beanFactory); 注册其他的后置处理器</p><p>​<font color='red'><strong>不同接口类型的BeanPostProcessor在Bean创建前后执行的时机都不一样</strong></font></p><p>​BeanPostProcessor：在bean对象实例化和属性赋值进行初始化前后进行调用</p><p>​DestructionAwareBeanPostProcessor：在bean对象销毁之前进行工作</p><p>​InstantiationAwareBeanPostProcessor：在bean对象实例化前后进行拦截工作</p><p>​SmartInstantiationAwareBeanPostProcessor：在bean创建对象之前进行拦截工作</p><p>​MergedBeanDefinitionPostProcessor【internalPostProcessors】：在创建出Bean的单实例对象后，初始化之前进行一些处理工作</p><p>​Ⅰ.获取所有的BeanPostProcessor；所有的后置处理器都可以通过PriorityOrdered, Ordered接口执行优先级</p><p>​Ⅱ.根据实现的不同接口放进不同的后置处理器集合中</p><p>​Ⅲ.优先注册实现PriorityOrdered的BeanPostProcessor，其次实现Ordered，然后没实现任何接口的，</p><p>​最后注册属于internalPostProcessors类型的后置处理器</p><p>​Ⅳ.最后再注册一个ApplicationListenerDetector，来在bean创建完成后检测是否是ApplicationListener，</p><p>​如果是就执行this.applicationContext.addApplicationListener((ApplicationListener&lt;?&gt;) bean);</p><p>⑦initMessageSource(); 初始化MessageSource组件(做国际化功能；消息绑定，消息解析）</p><p>​Ⅰ.获取BeanFactory</p><p>​Ⅱ.看容器中是否有id为MessageSource的组件</p><p>​如果有就直接赋值给messageSource属性，没有则创建一个DelegatingMessageSource</p><p>​MessageSource：取出国际化配置文件中的某个key的值；能按照区域信息获取</p><p>​Ⅲ.把创建好的MessageSource注册到容器中：以后获取国际化配置文件的值可以自动注入MessageSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, <span class="built_in">this</span>.messageSource);</span><br><span class="line">String <span class="title function_">getMessage</span><span class="params">(String code, Object[] args, Locale locale)</span> <span class="keyword">throws</span> NoSuchMessageException;</span><br></pre></td></tr></table></figure><p>⑧initApplicationEventMulticaster();初始化事件多播器</p><p>​Ⅰ.获取BeanFactory</p><p>​Ⅱ.从BeanFactory中尝试获取容器中是否有beanName &#x3D;&#x3D; “applicationEventMulticaster”的bean。</p><p>​Ⅲ.如果没有就创建一个SimpleApplicationEventMulticaster(beanFactory)，再将其添加到容器中</p><p>⑨onRefresh()此方法为空方法，留给子类做实现。</p><p>⑩registerListeners(); 给容器中将所有的ApplicationListener进行注册</p><p>​Ⅰ.从容器中拿到所有的ApplicationListener</p><p>​Ⅱ.将每个监听器添加到事件多播器中</p><p>getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</p><p>​Ⅲ.当有早期事件存在时，将早期事件通过多播器进行事件的发布</p><p>⑪finishBeanFactoryInitialization(beanFactory);</p><p>实例化剩下的所有非延迟加载的bean对象，因为有些内置的bean可能在前面的步骤已经完成实例化和初始化的过程</p><p>​Ⅰ.获取容器中所有已经定义好的bean的名称放进一个集合中</p><p>​Ⅱ.通过遍历每一个bean，并获取bean的定义信息 RootBeanDefinition bd &#x3D; getMergedLocalBeanDefinition(beanName);</p><p>​Ⅲ.判断这个bean不是抽象的且是单实例bean且不是延迟加载的，</p><p>​Ⅳ.再次进行判断这个bean是否实现FactoryBean接口，是则例如内置的FactoryBean创建对象</p><p>​不是则调用getBean(beanName) 创建对象</p><p>​Ⅴ.剩下的内容与Bean生命周期处的代码顺序一致</p><p>⑫finishRefresh(); 完成BeanFactory的刷新工作</p><p>​Ⅰ.initLifecycleProcessor();初始化和生命周期有关的后置处理器</p><p>​默认从容器中找是否有id为lifecycleProcessor的的组件；如果没有则创建默认的new DefaultLifecycleProcessor()并加入到容器中</p><p>​允许通过LifecycleProcessor接口的实现类，可以在BeanFactory执行到相应的周期进行一些处理</p><p>​Ⅱ.getLifecycleProcessor().onRefresh();拿到上面生命周期组件回调容器刷新完成的方法</p><p>​Ⅲ.publishEvent(new ContextRefreshedEvent(this));发布容器刷新完成的事件</p><p>​Ⅳ.LiveBeansView.registerApplicationContext(this);</p><p>​<img src="https://s1.ax1x.com/2022/05/09/OJtwjO.png" alt="refresh方法内部的执行顺序"></p><hr><p>Spring创建过程的简单总结</p><p>1.Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息</p><p>​①xml注册bean：[bean]</p><p>​②注解注册bean：@Component、@Bean</p><p>2.Spring容器会在合适的时机创建这些bean</p><p>​①用到bean的时候，利用getBean方法创建bean，并保存在容器中</p><p>​②统一创建所有剩下的bean的时候，finishBeanFactoryInitialization(beanFactory);</p><p>3.后置处理器：每一个bean创建完成，都会使用各种后置处理器进行处理，来增强bean的功能</p><p>​AutowiredAnnotationBeanPostProcessor：处理自动注入</p><p>​AnnotationAwareAspectJAutoProxyCreator：创建代理对象，进行aop功能</p><p>4.事件驱动模型</p><p>​ApplicationListener：用于事件监听</p><p>​ApplicationEventMulticaster：多播器用于事件派发</p><hr><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>1.Shared libraries(共享库) &#x2F;runtimes pluggability(运行时插件能力)</p><p>在容器&#x2F;应用程序启动的时候都会扫描jar包里面META-INF&#x2F;services&#x2F;javax.servlet.ServletContainerInitializer</p><p>指定的实现类，启动并运行这个实现类的onStartup方法：@HandlesTypes能够传入指定的类型</p><p>使用ServletContext注册Web的三大组件(Servlet程序、Filter过滤器、Listener监听器)</p><p>使用硬编码的方式在项目启动的时候给ServletContext里面注册组件，且只有在项目启动时能注册</p><p>​①ServletContainerInitializer得到的ServletContext</p><p>​②ServletContextListener得到的ServletContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在容器启动的时候会将@HandlesTypes指定的这个类型下面的子类(实现类、子接口)传递过来</span></span><br><span class="line"><span class="comment">//传入指定的类型</span></span><br><span class="line"><span class="meta">@HandlesTypes(value = &#123;TestService.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title class_">ServletContainerInitializer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 在应用启动的时候运行这个方法</span></span><br><span class="line"><span class="comment">     * 可以通过这个方法中的ServletContext注册Web的三大组件(Servlet程序、Filter过滤器、Listener监听器)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/5/8</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> set 传入指定类型的所有子类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContext  代表当前web应用的servletContext，每一个web都只有一个servletContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; set, ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;指定的类型：&quot;</span>);</span><br><span class="line">        set.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册组件</span></span><br><span class="line">        <span class="comment">//注册Servlet</span></span><br><span class="line">        ServletRegistration.<span class="type">Dynamic</span> <span class="variable">servlet</span> <span class="operator">=</span> servletContext.addServlet(<span class="string">&quot;userServlet&quot;</span>, UserServlet.class);</span><br><span class="line">        <span class="comment">//配置Servlet的映射信息</span></span><br><span class="line">        servlet.addMapping(<span class="string">&quot;/user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册Filter过滤器</span></span><br><span class="line">        FilterRegistration.<span class="type">Dynamic</span> <span class="variable">filter</span> <span class="operator">=</span> servletContext.addFilter(<span class="string">&quot;userFilter&quot;</span>, UserFilter.class);</span><br><span class="line">        <span class="comment">//配置Filter过滤器的映射信息</span></span><br><span class="line">        filter.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST),<span class="literal">true</span>,<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">//注册Listener监听器</span></span><br><span class="line">        servletContext.addListener(UserListener.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="servlet3-0与springMVC的整合"><a href="#servlet3-0与springMVC的整合" class="headerlink" title="servlet3.0与springMVC的整合"></a>servlet3.0与springMVC的整合</h3><p>1.web容器在启动的时候，会在扫描每个jar包里面存在的META-INF&#x2F;services&#x2F;javax.servlet.ServletContainerInitializer文件</p><p>2.加载这个文件指定的类SpringServletContainerInitializer，而这个类通过@HandlesTypes注解指定了WebApplicationInitializer接口</p><p>3.spring的应用一启动就会加载WebApplicationInitializer接口的所有实现类</p><p>4.在onStartup方法里面，在<font color='red'><strong>判断这些实现类都不是接口和抽象类后就会为这些组件(实现类)创建对象并添加进initializers集合中</strong></font></p><p><font color='red'><strong>WebApplicationInitializer接口各个实现类(并不是全部执行，而是实现哪个执行哪个)的onStartup()方法的作用：</strong></font></p><p>​①AbstractContextLoaderInitializer：创建根容器；createRootApplicationContext();</p><p>​②AbstractDispatcherServletInitializer：创建web的ioc容器；createServletApplicationContext();</p><p>​   创建了DispatcherServlet；createDispatcherServlet()</p><p>​   将创建的DispatcherServlet添加到ServletContext中</p><p>​③AbstractAnnotationConfigDispatcherServletInitializer；注解方式配置DispatcherServlet初始化器，继承自上面的②这个类</p><p>​创建根容器(相当于重写了父类的这个方法)：createRootApplicationContext{</p><p>​getRootConfigClasses();传入一个配置类}</p><p>​创建web的ioc容器(相当于重写了父类的这个方法)：createServletApplicationContext{</p><p>​getServletConfigClasses();获取一个配置类}</p><p>5.最终遍历initializers集合，通过每个实现类的对象逐个调用其所在类的onStartup()方法</p><p>以上的总结：</p><p>​①如果需要以注解的方式启动SpringMVC只需要继承AbstractAnnotationConfigDispatcherServletInitializer，</p><p>​实现其中的抽象方法来指定DispatcherServlet的配置信息即可</p><h3 id="定制SpringMVC"><a href="#定制SpringMVC" class="headerlink" title="定制SpringMVC"></a>定制SpringMVC</h3><p>1.@EnableWebMVC：开启SpringMVC定制配置</p><p>2.配置组件（视图解析器、视图映射、静态资源映射、拦截器。。。）extends WebMvcConfigurerAdapter</p><h3 id="Servlet3-0异步请求"><a href="#Servlet3-0异步请求" class="headerlink" title="Servlet3.0异步请求"></a>Servlet3.0异步请求</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//asyncSupported的值默认是false，必须手动设置为true才能支持异步</span></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/async&quot;,asyncSupported = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsynchronousServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.支持异步处理asyncSupported = true</span></span><br><span class="line">        <span class="comment">//2.开启异步模式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程：&quot;</span> + Thread.currentThread().getName() + System.currentTimeMillis());</span><br><span class="line">        <span class="type">AsyncContext</span> <span class="variable">asyncContext</span> <span class="operator">=</span> req.startAsync();</span><br><span class="line">        <span class="comment">//3.业务逻辑进行异步处理：开始异步处理</span></span><br><span class="line">        asyncContext.start(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;副线程开启：&quot;</span> + Thread.currentThread().getName() + System.currentTimeMillis());</span><br><span class="line">                    testSync();</span><br><span class="line">                    <span class="comment">//表示异步处理已完成</span></span><br><span class="line">                    asyncContext.complete();</span><br><span class="line">                    <span class="comment">//4.获取响应</span></span><br><span class="line">                    <span class="type">ServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> asyncContext.getResponse();</span><br><span class="line">                    response.getWriter().write(<span class="string">&quot;处理完成&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;副线程结束：&quot;</span> + Thread.currentThread().getName() + System.currentTimeMillis());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程结束：&quot;</span> + Thread.currentThread().getName() + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSync</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/09/OJtWgf.png" alt="异步线程图示"></p><h3 id="SpringMVC异步请求"><a href="#SpringMVC异步请求" class="headerlink" title="SpringMVC异步请求"></a>SpringMVC异步请求</h3><h4 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h4><p>处理过程：</p><p>1.控制器返回一个Callable</p><p>2.Spring异步处理，将Callable提交到一个TaskExecutor 使用一个隔离的线程进行执行</p><p>3.DispatcherServlet和所有的Filter过滤器退出Servlet容器的线程，但响应依旧保持打开状态</p><p>4.Callable返回结果，SpringMVC将请求再次重新派发给Servlet容器，恢复之前的操作</p><p>5.根据Callable返回的结果，SpringMVC继续进行视图渲染流程等(从收到请求-处理请求)</p><ul><li><p><font color='red'><strong>异步的拦截器(同步的拦截器只能拦截同步的请求，因此异步请求必须注册异步拦截器)</strong></font></p><p>①原生API的AsyncListener</p><p>②SpringMVC实现AsyncHandlerInterceptor</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/async1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Callable&lt;String&gt; <span class="title function_">async1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程start：&quot;</span> + Thread.currentThread().getName() + System.currentTimeMillis());</span><br><span class="line">        Callable&lt;String&gt; callable = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;副线程start：&quot;</span> + Thread.currentThread().getName() + System.currentTimeMillis());</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;副线程end：&quot;</span> + Thread.currentThread().getName() + System.currentTimeMillis());</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Callable&lt;String&gt; async1()&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程end：&quot;</span> + Thread.currentThread().getName() + System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> callable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理结果</span></span><br><span class="line"><span class="comment">//触发拦截器的执行</span></span><br><span class="line"><span class="comment">//主线程start：http-apr-8080-exec-81652082984174</span></span><br><span class="line"><span class="comment">//主线程end：http-apr-8080-exec-81652082984177</span></span><br><span class="line"><span class="comment">//===DispatcherServlet和所有的Filter过滤器退出Servlet容器的线程===</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//===等待Callable的执行===</span></span><br><span class="line"><span class="comment">//副线程start：MvcAsync11652082984187</span></span><br><span class="line"><span class="comment">//副线程end：MvcAsync11652082986188</span></span><br><span class="line"><span class="comment">//===Callable执行完成===</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//===DispatcherServlet收到由SpringMVC调度的经过callable的请求===</span></span><br><span class="line"><span class="comment">//触发拦截器的执行</span></span><br><span class="line"><span class="comment">//拦截器的执行完成 (Callable之前的返回值就是目标方法的返回值，因此目标方法就不再执行)</span></span><br><span class="line"><span class="comment">//afterCompletion</span></span><br></pre></td></tr></table></figure><h4 id="DeferredResult"><a href="#DeferredResult" class="headerlink" title="DeferredResult"></a>DeferredResult</h4><ul><li>模拟场景：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/createOrder&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> DeferredResult&lt;Object&gt; <span class="title function_">deferredResult</span><span class="params">()</span>&#123;</span><br><span class="line">       DeferredResult&lt;Object&gt; deferredResult = <span class="keyword">new</span> <span class="title class_">DeferredResult</span>&lt;&gt;((<span class="type">long</span>)<span class="number">3000</span>,<span class="string">&quot;fail create&quot;</span>);</span><br><span class="line">       DeferredResultQueue.save(deferredResult);</span><br><span class="line">       <span class="keyword">return</span> deferredResult;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/create&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">create</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//创建订单</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">order</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">       DeferredResult&lt;Object&gt; result = DeferredResultQueue.get();</span><br><span class="line">       result.setResult(order);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;order:&quot;</span> + order;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/05/09/OJtfv8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/04/28/Redis/"/>
      <url>/2022/04/28/Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="NoSQL数据库概述"><a href="#NoSQL数据库概述" class="headerlink" title="NoSQL数据库概述"></a>NoSQL数据库概述</h2><p>NoSQL是为了解决性能问题而产生的一种技术,<font color="red"><strong>Redis是一种以键值型存储数据的典型NoSQL数据库</strong></font></p><p>Nosql数据库的出现有利于解决服务器CPU和内存、以及IO读写的的巨大压力</p><p>Nosql数据库不遵循SQL标准，不支持ACID四个属性(<font color="red"><strong>并不是不支持事务</strong></font>)，远超于SQL性能</p><ul><li><p><font color="red"><strong>用不着sql的和用了sql也不行的情况，可以考虑用NoSql数据库</strong></font></p></li><li><p>Redis是单线程+IO多路复用技术，支持多种数据类型的数据，可以持久化，也是保存在内存中</p><p>每一个Redis对应一个服务器</p><p>IO多路复用：单线程或单进程同时监测若干个 文件描述符 是否可以执行IO操作的能力。</p></li><li><p>MemCached使用的是多线程+锁，MemCached只支持单一类型的数据，且不能持久化，只能保存在内存中</p></li></ul><h2 id="Redis常用五大数据类型"><a href="#Redis常用五大数据类型" class="headerlink" title="Redis常用五大数据类型"></a>Redis常用五大数据类型</h2><h3 id="Redis键-key"><a href="#Redis键-key" class="headerlink" title="Redis键(key)"></a>Redis键(key)</h3><table><thead><tr><th align="left">常用命令</th><th align="left">命令的说明</th></tr></thead><tbody><tr><td align="left">keys *</td><td align="left">查看当前库所有key</td></tr><tr><td align="left">exists key</td><td align="left">判断某个key是否存在</td></tr><tr><td align="left">type key</td><td align="left">查看你的key是什么类型</td></tr><tr><td align="left">del key</td><td align="left">删除指定的key数据</td></tr><tr><td align="left">unlink key</td><td align="left">根据value选择非阻塞删除(仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。)</td></tr><tr><td align="left">expire key 10</td><td align="left">10秒钟：为给定的key设置过期时间</td></tr><tr><td align="left">ttl key</td><td align="left">查看还有多少秒过期，-1表示永不过期，-2表示已过期</td></tr><tr><td align="left">select</td><td align="left">命令切换数据库(总共16个库，默认使用0号库)</td></tr><tr><td align="left">dbsize</td><td align="left">查看当前数据库的key的数量</td></tr><tr><td align="left">flushdb</td><td align="left">清空当前库</td></tr><tr><td align="left">flushall</td><td align="left">通杀全部库</td></tr></tbody></table><h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h3><p>String是redis最基本的数据类型，一个key对应一个value，一个Redis中字符串value最多可以是<font color="red"><strong>512M</strong></font></p><p>**String类型是<font color="red">二进制安全的</font>**，换句话理解就是只要能转换成字符串的，都能用String进行存储</p><table><thead><tr><th align="left">常用命令</th><th align="left">命令的说明</th></tr></thead><tbody><tr><td align="left">set  key value</td><td align="left">添加键值对</td></tr><tr><td align="left">get  key</td><td align="left">查询对应键值</td></tr><tr><td align="left">append  key value</td><td align="left">将给定的 value 追加到原值的末尾</td></tr><tr><td align="left">strlen  key</td><td align="left">获得值的长度</td></tr><tr><td align="left">setnx  key value</td><td align="left">只有在 key 不存在时   设置 key 的值</td></tr><tr><td align="left">incr  key</td><td align="left">将 key 中储存的数字值增1，只能对数字值操作，如果为空，新增值为1</td></tr><tr><td align="left">decr  key</td><td align="left">将 key 中储存的数字值减1，只能对数字值操作，如果为空，新增值为-1</td></tr><tr><td align="left">incrby &#x2F; decrby  key  &lt;步长&gt;</td><td align="left">将 key 中储存的数字值增减。自定义步长。</td></tr><tr><td align="left">mset  key1 value1 key2 value2  …..</td><td align="left">同时设置一个或多个 key-value对</td></tr><tr><td align="left">mget  key1 key2 key3 …..</td><td align="left">同时获取一个或多个 value</td></tr><tr><td align="left">msetnx key1 value1  key2 value2  …..</td><td align="left">同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td></tr><tr><td align="left">getrange  key &lt;起始位置&gt;&lt;结束位置&gt;</td><td align="left">获得值的范围，包括了起始位置和结束位置对应索引的值</td></tr><tr><td align="left">setrange   key  &lt;起始位置&gt;  value</td><td align="left">用 value  覆写 key 所储存的字符串值，从&lt;起始位置&gt;开始(索引从0开始)。</td></tr><tr><td align="left">setex  key  &lt;过期时间&gt;  value</td><td align="left">设置键值的同时，设置过期时间，单位秒。</td></tr><tr><td align="left">getset key value</td><td align="left">以新换旧，设置了新值同时获得旧值。</td></tr></tbody></table><p>1.所谓<strong>原子</strong>操作是指不会被线程调度机制打断的操作；</p><p>①在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间。</p><p>②在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。</p><ul><li>Redis单命令的原子性主要得益于Redis的单线程。</li></ul><p>2.其底层的数据结构</p><ul><li><font color="red"><strong>简单动态字符串</strong></font>(Simple Dynamic String,缩写SDS)。</li></ul><p>它是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p><p><img src="https://s1.ax1x.com/2022/04/28/LOlINF.png" alt="底层结构"></p><p>capacity为当前字符串实际分配的空间，一般要高于实际字符串长度len。</p><p>当字符串长度超过len的时候进行扩容，而扩容有两种情况</p><p>①当字符串长度小于1M时，扩容都是加倍现有的空间，即为原来的2倍</p><p>②如果超过1M，扩容时一次只会多扩1M的空间。</p><ul><li>需要注意的是字符串最大长度为512M。</li></ul><h3 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h3><p>List列表存储的都是有序，可重复的元素</p><p>单键多值：一个key对应多个value</p><p>Redis 列表是简单的字符串列表，可以按照插入的顺序进行排序，其的底层是个<font color="red"><strong>双向链表</strong></font>，对频繁的删除和修改的效率较高，对查询的效率较低</p><table><thead><tr><th align="left">常用命令</th><th align="left">命令的说明</th></tr></thead><tbody><tr><td align="left">lpush&#x2F;rpush  <key><value1><value2><value3> ….</td><td align="left">从左边&#x2F;右边插入一个或多个值。lpush是头插法，从头插入；rpush是尾插法，从尾插入</td></tr><tr><td align="left">lpop&#x2F;rpop  <key></td><td align="left">从左边&#x2F;右边取出一个值。值在键在，值光键亡。</td></tr><tr><td align="left">rpoplpush  <key1><key2></td><td align="left">从<key1>列表右边吐出一个值，插到<key2>列表左边。</td></tr><tr><td align="left">lrange <key><start><stop></td><td align="left">按照索引下标获得元素(从左到右)</td></tr><tr><td align="left">lrange mylist 0 -1</td><td align="left">0左边第一个，-1右边第一个，（0-1表示获取所有）</td></tr><tr><td align="left">lindex <key><index></td><td align="left">按照索引下标获得元素(从左到右)</td></tr><tr><td align="left">llen <key></td><td align="left">获得列表长度</td></tr><tr><td align="left">linsert <key>  before <value><newvalue></td><td align="left">在<value>的后面插入<newvalue>插入值</td></tr><tr><td align="left">lrem <key><n><value></td><td align="left">从左边删除n个value(从左到右)</td></tr><tr><td align="left">lset<key><index><value></td><td align="left">将列表key下标为index的值替换成value</td></tr></tbody></table><p>其底层的数据结构</p><ul><li><p><font color="red"><strong>快速链表quickList</strong></font></p><p>①在存储的元素较少的情况采用的是压缩列表(zipList)，它将所有的元素都集中在一起，使用一块连续的内存空间存储数据</p><p>②在存储的数据量较大的情况下Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用</p><p>​既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p></li></ul><p><img src="https://s1.ax1x.com/2022/04/28/LOlzND.png" alt="quickList的结构"></p><h3 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h3><p>集合(Set)存储的都是无序，不可重复的元素</p><p>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的<font color="red"><strong>复杂度都是O(1)</strong></font></p><table><thead><tr><th align="left">常用命令</th><th align="left">命令的说明</th></tr></thead><tbody><tr><td align="left">sadd <key><value1><value2> …..</td><td align="left">将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</td></tr><tr><td align="left">smembers <key></td><td align="left">取出该集合的所有值。</td></tr><tr><td align="left">sismember</td><td align="left">判断集合<key>是否为含有该<value>值，有1，没有0</td></tr><tr><td align="left">scard<key></td><td align="left">返回该集合的元素个数。</td></tr><tr><td align="left">srem <key><value1><value2> ….</td><td align="left">删除集合中的某个元素。</td></tr><tr><td align="left">spop <key></td><td align="left">随机从该集合中取出一个值</td></tr><tr><td align="left">srandmember <key><n></td><td align="left">随机从该集合中取出n个值。不会从集合中删除 。</td></tr><tr><td align="left">smove <source><destination>value</td><td align="left">把集合中一个值从一个集合移动到另一个集合</td></tr><tr><td align="left">sinter <key1><key2></td><td align="left">返回两个集合的交集元素</td></tr><tr><td align="left">sunion <key1><key2></td><td align="left">返回两个集合的并集元素。</td></tr><tr><td align="left">sdiff <key1><key2></td><td align="left">返回两个集合的差集元素(key1中的，不包含key2中的)</td></tr></tbody></table><p>其底层的数据结构</p><ul><li><p>Set数据结构是<font color="red"><strong>dict字典</strong></font>，字典是用哈希表实现的。</p><p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。</p><p>Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p></li></ul><h3 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h3><p>Redis hash 是一个键值对集合。</p><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。类似Java里面的Map&lt;String,Object&gt;</p><p>主要有2种存储方式：</p><p><img src="https://s1.ax1x.com/2022/04/28/LO1kut.png" alt="存储方式"></p><table><thead><tr><th align="left">常用命令</th><th align="left">命令的说明</th></tr></thead><tbody><tr><td align="left">hset <key><field><value></td><td align="left">给<key>集合中的  <field>键赋值<value></td></tr><tr><td align="left">hget <key1><field></td><td align="left">从<key1>集合<field>取出 value</td></tr><tr><td align="left">hmset <key1><field1><value1><field2><value2>…</td><td align="left">批量设置hash的值</td></tr><tr><td align="left">hexists<key1><field></td><td align="left">查看哈希表 key 中，给定域 field 是否存在。</td></tr><tr><td align="left">hkeys <key></td><td align="left">列出该hash集合的所有field</td></tr><tr><td align="left">hvals <key></td><td align="left">列出该hash集合的所有value</td></tr><tr><td align="left">hincrby <key><field><increment></td><td align="left">为哈希表 key 中的域 field 的值加上增量 1  -1</td></tr><tr><td align="left">hsetnx <key><field><value></td><td align="left">将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</td></tr></tbody></table><p>其底层的数据结构</p><ul><li><p>Hash类型对应的数据结构是两种：<font color="red"><strong>ziplist（压缩列表），hashtable（哈希表）</strong></font></p><p>①当field-value长度较短且个数较少时，使用ziplist，</p><p>②当field-value长度较长且个数较多时，使用hashtable。</p></li></ul><h3 id="有序集合Zset-Sorted-set"><a href="#有序集合Zset-Sorted-set" class="headerlink" title="有序集合Zset(Sorted set)"></a>有序集合Zset(Sorted set)</h3><p>有序集合Zset同样是存储一个<font color="red"><strong>没有重复元素的字符串集合</strong></font>，但每一个元素都携带了<font color="red"><strong>评分(score)</strong></font></p><p>因此可以通过评分对集合中的成员进行从最低分到最高分的排序，集合元素是唯一的，但评分可以是重复的</p><table><thead><tr><th align="left">常用命令</th><th align="left">命令的说明</th></tr></thead><tbody><tr><td align="left">zadd  <key><score1><value1><score2><value2>…</td><td align="left">将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</td></tr><tr><td align="left">zrange <key><start><stop>  [WITHSCORES]</td><td align="left">返回有序集 key 中，下标在<start><stop>之间的元素。带WITHSCORES，可以让分数一起和值返回到结果集。</td></tr><tr><td align="left">zrangebyscore key minmax [withscores] [limit offset count]</td><td align="left">返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</td></tr><tr><td align="left">zrevrangebyscore key maxmin [withscores] [limit offset count]</td><td align="left">同上，改为从大到小排列。</td></tr><tr><td align="left">zincrby <key><increment><value></td><td align="left">为元素的score加上增量</td></tr><tr><td align="left">zrem  <key><value></td><td align="left">删除该集合下，指定值的元素</td></tr><tr><td align="left">zcount <key><min><max></td><td align="left">统计该集合，分数区间内的元素个数</td></tr><tr><td align="left">zrank <key><value></td><td align="left">返回该值在集合中的排名，从0开始。</td></tr></tbody></table><ul><li><p>其底层的数据结构</p><p>zset底层使用了两个数据结构：</p><p>（1）<font color="red"><strong>hash</strong></font>，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。</p><p>（2）<font color="red"><strong>跳跃表</strong></font>，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p></li></ul><p>​①一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，</p><p>​②另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p><hr><h2 id="Redis新数据类型"><a href="#Redis新数据类型" class="headerlink" title="Redis新数据类型"></a>Redis新数据类型</h2><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><p>Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><p>①Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ，可以理解尾它是<font color="red"><strong>专门进行位操作的字符串</strong></font></p><p>②可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p><table><thead><tr><th align="left">常用命令</th><th align="left">命令的说明</th></tr></thead><tbody><tr><td align="left">setbit<key><offset><value></td><td align="left">设置Bitmaps中某个偏移量的值（0或1）offset:偏移量从0开始</td></tr><tr><td align="left">getbit<key><offset></td><td align="left">获取Bitmaps中某个偏移量的值</td></tr><tr><td align="left">bitcount<key>[start end]</td><td align="left">统计字符串从start字节到end字节比特值为1的数量  。-1 表示最后一个位，而 -2 表示倒数第二个位，</td></tr><tr><td align="left">bitop and(or&#x2F;not&#x2F;xor) <destkey> [key…]</td><td align="left">bitop是一个复合操作， 把对多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</td></tr></tbody></table><ul><li>Bitmaps与set对比之下：Bitmaps针对活跃用户的存储更能节省空间和内存，反之，如果活跃用户较少用set储存更好</li></ul><h3 id="HyperLoglog"><a href="#HyperLoglog" class="headerlink" title="HyperLoglog"></a>HyperLoglog</h3><ul><li><p>HyperLoglog可以用于解决基数统计问题(求集合中不重复元素个数的问题称为基数问题)。</p></li><li><p>其优点是在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>但是 HyperLogLog 不能像集合那样，返回输入的各个元素。</p></li></ul><table><thead><tr><th align="left">常用命令</th><th align="left">命令的说明</th></tr></thead><tbody><tr><td align="left">pfadd <key>&lt; element&gt; [element …]</td><td align="left">添加指定元素到 HyperLogLog 中，成功则返回1，失败则返回0。</td></tr><tr><td align="left">pfcount<key> [key …]</td><td align="left">计算HLL的近似基数，可以计算多个HLL</td></tr><tr><td align="left">pfmerge<destkey><sourcekey> [sourcekey …]</td><td align="left">将一个或多个HLL合并后的结果存储在另一个HLL中</td></tr></tbody></table><h3 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h3><p>GEO：Geographic，地理信息的缩写。</p><ul><li>redis提供了对经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</li></ul><table><thead><tr><th align="left">常用命令</th><th align="left">命令的说明</th></tr></thead><tbody><tr><td align="left">geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]</td><td align="left">加地 理位置（经度，纬度，名称）</td></tr><tr><td align="left">geopos  <key><member> [member…]</td><td align="left">获得指定地区的坐标值</td></tr><tr><td align="left">geodist<key><member1><member2>  [m|km|ft|mi]</td><td align="left">获取两个位置之间的直线距离</td></tr><tr><td align="left">georadius<key>&lt; longitude&gt;<latitude>radius m|km|ft|mi</td><td align="left">以给定的经纬度为中心，找出某一半径内的元素</td></tr></tbody></table><hr><h2 id="Redis的发布和订阅"><a href="#Redis的发布和订阅" class="headerlink" title="Redis的发布和订阅"></a>Redis的发布和订阅</h2><ul><li><p>Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p></li><li><p>Redis 客户端可以订阅任意数量的频道。</p></li></ul><p><img src="https://s1.ax1x.com/2022/04/28/LO1Mgs.png" alt="通信演示"></p><hr><h2 id="Jedis实例"><a href="#Jedis实例" class="headerlink" title="Jedis实例"></a>Jedis实例</h2><ul><li><strong>完成一个手机验证码功能</strong></li></ul><p>要求：</p><p>1、输入手机号，点击发送后随机生成6位数字码，2分钟有效</p><p>2、输入验证码，点击验证，返回成功或失败</p><p>3、每个手机号每天只能输入3次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneCode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Jedis jedis;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        jedis = <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.231.133&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//模拟输入手机号后获取验证码的过程</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入你的手机号:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> scan.next();</span><br><span class="line">        <span class="comment">//判断手机号是否已存在</span></span><br><span class="line">        checkPhone(phone);</span><br><span class="line">        <span class="comment">//获取当前手机号已获取验证码的次数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> jedis.get(phone);</span><br><span class="line">        <span class="comment">//转换位int类型</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> Integer.parseInt(num);</span><br><span class="line">        <span class="comment">//实现限制一天只能获取三次的目的</span></span><br><span class="line">        <span class="keyword">if</span> (p &gt; <span class="number">3</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;今日获取验证码的次数已达到3次，请明日再试&quot;</span>);</span><br><span class="line">            jedis.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟生成验证码并从键盘中获取验证码的过程</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> getCode();</span><br><span class="line">        System.out.print(<span class="string">&quot;你的验证码是：&quot;</span> + code + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入你的验证码:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">use</span> <span class="operator">=</span> scan.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行具体业务</span></span><br><span class="line">        checkCode(code);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示验证信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> isSuccess(use);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭jedis</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.生成6位数的验证码字符串</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getCode</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * (<span class="number">999999</span> - <span class="number">100000</span> + <span class="number">1</span>) + <span class="number">100000</span>);</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.设置验证码相关</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">checkCode</span><span class="params">(String code)</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取验证码并放入redis中，同时设置过期时间</span></span><br><span class="line">        jedis.setex(<span class="string">&quot;code&quot;</span>,<span class="number">120</span>,code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置手机号相关的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkPhone</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">        <span class="comment">//设置发送的次数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">isExists</span> <span class="operator">=</span> jedis.get(phone);</span><br><span class="line">        <span class="keyword">if</span> (isExists == <span class="literal">null</span>)&#123;</span><br><span class="line">            jedis.setex(phone,<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            jedis.incr(phone);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.进行判断</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">isSuccess</span><span class="params">(String use)</span>&#123;</span><br><span class="line">        <span class="comment">//判断验证码是否过期</span></span><br><span class="line">        <span class="comment">//没过期可用</span></span><br><span class="line">        <span class="keyword">if</span> (jedis.exists(<span class="string">&quot;code&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (jedis.get(<span class="string">&quot;code&quot;</span>).equals(use))&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span>  <span class="string">&quot;验证码错误，请重新输入&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//已过期不可用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;验证码已过期，请重新获取&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p><font color="red"><strong>Redis事务的主要作用就是串联多个命令防止别的命令插队。</strong></font></p><ul><li><p>事务的执行顺序命令：</p><p>Multi命令 开启事务，进入组队阶段(即将所有命令加入到一个队列中)</p><p>Exec命令 执行事务 (执行队列中的命令)，进入执行阶段，按顺序执行</p><p>discard命令 放弃事务的执行 (放弃执行队列的命令)，即中断执行阶段</p></li><li><p>对命令的监听</p><p>watch命令 可用监听一个或多个key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p><p>unwatch命令 取消对所有key的监听，如果在执行watch命令之后，先执行了EXEC 或DISCARD的命令，那么就用再执行UNWATCH 了。</p></li><li><p>事务执行的特殊情况：</p><p>①在<strong>组队</strong>阶段，队列中的<font color="orange"><strong>任意一个命令出错都会导致执行阶段报错</strong></font></p><p>②在<strong>执行</strong>阶段，队列中的<font color="orange"><strong>有一个命令出错后，出错的命令不会执行，其余的依旧执行</strong></font></p></li></ul><p><img src="https://s1.ax1x.com/2022/04/28/LO13D0.png" alt="事务"></p><h3 id="解决事务冲突"><a href="#解决事务冲突" class="headerlink" title="解决事务冲突"></a>解决事务冲突</h3><ul><li><p><font color="orange"><strong>悲观锁</strong></font>：给数据加锁</p><p>悲观锁认为每次都会对数据进行修改，因此在获取数据之后都会给数据加上锁，在数据处理完成之后才会解锁。</p><p>悲观锁多用于<strong>关系型数据库</strong>，如行锁、表锁、读锁、写锁等等</p><p><img src="https://s1.ax1x.com/2022/04/28/LO1YUU.png" alt="悲观锁示意"></p></li><li><p><font color="orange"><strong>乐观锁</strong></font>：给操作的数据添加版本号</p><p>乐观锁认为每次都不会对数据进行修改，因此每个线程都能获取到数据，但在数据更改进行都会对比数据的版本号是否一则</p><p><strong>乐观锁适用于多读的应用类型，这样可以提高数据的查询效率</strong></p><p><img src="https://s1.ax1x.com/2022/04/28/LO1d29.png" alt="乐观锁示意"></p></li></ul><h3 id="Redis事务的三个特性"><a href="#Redis事务的三个特性" class="headerlink" title="Redis事务的三个特性"></a>Redis事务的三个特性</h3><p>① 单独的隔离操作 </p><p>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </p><p>②没有隔离级别的概念 </p><p>队列中的命令没有提交之前都不会实际被执行，因此添加的数据不会被其他线程读取到</p><p>③不保证原子性 </p><p>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </p><h3 id="lua脚本"><a href="#lua脚本" class="headerlink" title="lua脚本"></a>lua脚本</h3><ul><li><p>Lua由于自身原因(完整lua解释器才200k)不适合作为开发独立应用程序的语言，而是作为嵌入式脚本语言。</p></li><li><p>LUA脚本在Redis中的优势：</p><p>将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。提升性能。</p></li></ul><p>​LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作。</p><h3 id="Redis事务的案例"><a href="#Redis事务的案例" class="headerlink" title="Redis事务的案例"></a>Redis事务的案例</h3><p>版本一：未添加事务和锁，出现了超卖的问题</p><p>版本二：添加事务和乐观锁，解决了超卖问题，但又出现了连接超时和少买的问题</p><p>版本三：使用jedis数据连接池，解决了连接超时的问题</p><p>版本四：使用lua脚本解决库存遗留问题，少买问题是出现是因为乐观锁在每次修改数据都更新数据的版本号，在同一时间上版本号不同导致数据不能修改。</p><p>通过lua脚本解决库存遗留问题，实际上是<font color="red"><strong>redis 利用其单线程的特性，用任务队列的方式解决多任务并发问题</strong>*</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//秒杀过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">doSecKill</span><span class="params">(String uid,String prodid)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//1 uid和prodid非空判断</span></span><br><span class="line"><span class="keyword">if</span>(uid == <span class="literal">null</span> || prodid == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.连接redis</span></span><br><span class="line"><span class="type">JedisPool</span> <span class="variable">jedisPoolInstance</span> <span class="operator">=</span> JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPoolInstance.getResource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.判断用户是否已参加过秒杀活动</span></span><br><span class="line"></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> jedis.sismember(<span class="string">&quot;userId&quot;</span>,uid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//为空说明没参加过秒杀活动</span></span><br><span class="line"><span class="keyword">if</span> (!result)&#123;</span><br><span class="line"><span class="comment">//监视库存</span></span><br><span class="line">jedis.watch(<span class="string">&quot;stock&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.获取库存的值，判断秒杀活动是否开始</span></span><br><span class="line"><span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;stock&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (count == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//为空代表活动暂未开始</span></span><br><span class="line">System.out.println(<span class="string">&quot;活动暂未开始&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.判断库存是否为0，为0则代表秒杀活动已经结束了</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Integer.parseInt(count) == <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀活动已经结束了&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.不为空，开始执行秒杀过程</span></span><br><span class="line"><span class="comment">//使用事务</span></span><br><span class="line"><span class="comment">//获取事务对象</span></span><br><span class="line"><span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将各个命令添加到队列中</span></span><br><span class="line"><span class="comment">//6.1用户秒杀的商品库存 -1</span></span><br><span class="line">multi.decr(<span class="string">&quot;stock&quot;</span>);</span><br><span class="line"><span class="comment">//6.2 将参加秒杀成功的用户id加入到redis中</span></span><br><span class="line">multi.sadd(<span class="string">&quot;userId&quot;</span>,uid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">List&lt;Object&gt; results = multi.exec();</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否正常执行</span></span><br><span class="line"><span class="keyword">if</span> (results == <span class="literal">null</span> | results.size() == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;秒杀失败&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀成功&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;每个用户只能参加一次秒杀活动&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>RDB全称是Redis Database，它是指在<font color="red"><strong>指定的时间间隔内将内存中的数据集快照写入磁盘</strong></font>， 可理解为Snapshot快照，它恢复时是将快照文件读到内存里。</p><p>fork：复制一个与当前进程一样的进程。新进程的所有数据都和原进程一致，但它是一个全新的进程，并作为原进程的子进程。</p><p>​   <strong>一般情况父进程和子进程会共用同一段物理内存</strong>。</p><p>1.RDB的持久化过程</p><p>Redis通过fork单独创建一个属于父进程的子进程负责对redis内存中的数据进行持久化工作，其使用的是<font color="red"><strong>写时复制技术</strong></font>，</p><p>写时复制技术即同步之前先将数据从redis内存中写入到一个临时文件中，等同步完成后，再用临时文件替换原来的持久化文件(dump.rdb)</p><p>持久化文件(dump.rdb)：redis在哪个文件目录下启动就在哪个文件目录下生成</p><p><font color="red"><strong>RDB备份的缺点是最后一次持久化后的数据可能丢失。</strong></font>特别是在最后一次进行持久化未完成的过程中服务器宕机了</p><p>2.命令  save 和 bgsave的区别</p><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p><p>bgsave：Redis会在后台异步进行快照操作， 快照同时还可以响应客户端请求。</p><ul><li>可以通过lastsave 命令获取最后一次成功执行快照的时间</li></ul><p>3.rdb的备份与恢复</p><p>①先通过config get dir 查询rdb文件生成的目录，再将*.rdb的文件拷贝到别的地方</p><p>②rdb的恢复</p><p>第一步：关闭Redis</p><p>第二步：先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</p><p>第三步：启动Redis, 备份数据会直接加载</p><p>4.RDB持久化的优点和缺点</p><ul><li><p>优点：</p><p>①适合大规模的数据恢复，但对数据完整性和一致性要求较高则不适合使用</p><p>②节省磁盘空间，恢复速度快</p></li><li><p>缺点：</p><p>①数据过于庞大时比较消耗性能。</p><p>②最后一次持久化后的数据可能丢失</p><p>③在进行fork操作的过程中，需要2倍的内存空间</p></li></ul><p><img src="https://s1.ax1x.com/2022/04/28/LO1c5D.png" alt="优劣点"></p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>AOF的全称是(Append Only File)。</p><p>它是指以日志的形式来保存每个写操作(增删改)的数据以及Redis执行过相应的写指令(读操作不记录)， 只许追加文件但不可以改写文件。</p><ul><li><font color="red"><strong>AOF和RDB同时开启的情况下，系统会默认取AOF的数据（数据不会存在丢失）</strong></font></li><li>AOF默认不开启,而EDB是默认开启的，两者生成的保存路径都一致，即启动目录在哪保存在哪</li></ul><p>1.AOF的持久化过程</p><p>①客户端的请求写命令会被append追加到AOF缓冲区内；</p><p>②AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</p><p>③AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</p><p>④Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</p><p><img src="https://s1.ax1x.com/2022/04/28/LO1W2d.png" alt="持久化示例"></p><p>2.AOF的备份和恢复</p><ul><li><p>正常情况下，AOF的备份和恢复和RDB是一致的</p></li><li><p>特殊情况下的异常恢复，当AOF的文件出现损坏时，</p><p>①修改默认的appendonly no，改为yes</p><p>②通过&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-check-aof–fix appendonly.aof进行恢复</p><p>③备份被写坏的AOF文件</p><p>④恢复：重启redis，然后重新加载</p></li></ul><p>3.AOF的同步频率</p><p>①appendfsync always</p><p>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p><p>②appendfsync everysec</p><p>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p><p>③appendfsync no</p><p>redis不主动进行同步，把同步时机交给操作系统。</p><p>4.Rewrite压缩</p><p>Rewrite压缩是指在AOF采用文件追加方式，文件会越来越大，为避免出现此种情况，因此新增了重写机制。 </p><p>当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.</p><ul><li>触发Rewrite压缩的条件：Redis的AOF文件当前大小&gt;&#x3D; base_size(上一次AOF持久化文件的大小) * 2 且当前大小&gt;&#x3D;64mb(默认)</li></ul><p>5.AOF的优势和劣势</p><ul><li><p>优势：</p><p>①备份机制更稳健，丢失数据概率更低。</p><p>②可读的日志文本，通过操作AOF稳健，可以处理误操作。</p></li><li><p>劣势：</p><p>①比起RDB占用更多的磁盘空间。</p><p>②恢复备份速度要慢。</p><p>③每次读写都同步的话，有一定的性能压力。</p><p>④存在个别Bug，造成恢复不能。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>官方推荐两个都启用。</p><p>如果对数据不敏感，可以选单独用RDB。</p><p>不建议单独用 AOF，因为可能会出现Bug。</p><p>如果只是做纯内存缓存，可以都不用。</p><hr><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><p>1.<font color="red"><strong>主从复制</strong></font>：主机数据更新后根据配置和策略， 自动同步到备机的一种名为master&#x2F;slaver机制</p><ul><li>一般都是一主多从，在这个机制中master为主机，主要负责写的操作，slaver为从机，主要负责读的操作</li></ul><p>2.主从复制的优点：①读写分离，可以提升性能  ②能够快速应对服务器宕机的情况，容灾恢复</p><p><img src="https://s1.ax1x.com/2022/04/28/LO1zq0.png" alt="主从复制"></p><h3 id="主从复制的原理"><a href="#主从复制的原理" class="headerlink" title="主从复制的原理"></a>主从复制的原理</h3><p>①当从服务器<font color="red"><strong>第一次</strong></font>连接上主服务器，<font color="red"><strong>从服务器就会主动向主服务器发起数据同步的消息</strong></font></p><p>②主服务器接受到从服务器发起的数据同步消息后，将主服务器的数据进行持久化到rdb文件中，</p><p>​把rdb文件发个从服务器，从服务器拿到rdb文件并读取完成数据同步</p><p>③<font color="red"><strong>除了第一次以外</strong></font>，每次主服务器进行写操作，<font color="red"><strong>都会主动把数据发给从服务器进行同步</strong></font></p><ul><li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</li></ul><h3 id="主机从机之间的说明"><a href="#主机从机之间的说明" class="headerlink" title="主机从机之间的说明"></a>主机从机之间的说明</h3><ul><li><p>一主多从的情况说明：</p><p>①当从机宕机后，重新启动后会自动将主机中的数据同步到本机中</p><p>②当主机宕机后，从机依旧是从机，但是在从机的信息中能记录此刻主机已挂</p></li><li><p>采用一个主机管理一个从机，这个从机是另一个从机的主机的情况：</p><p>当中间的从机宕机后，后面从机的数据的同步就会停止</p></li><li><p>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</p><p>用 slaveof  no one 命令将从机变为主机。</p></li></ul><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p>哨兵模式：能够后台监控主机是否故障，如果故障了根据投票数自动将从机转换为主机</p><p>1.如何设置哨兵模式？</p><p>​需要设置名为sentinel.conf的配置文件，在配置文件内编写sentinel monitor mymaster 127.0.0.1 6379 1</p><ul><li>mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。</li></ul><h4 id="复制延时"><a href="#复制延时" class="headerlink" title="复制延时"></a>复制延时</h4><p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，</p><p>所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，</p><p>延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p><h4 id="主机宕机后的操作"><a href="#主机宕机后的操作" class="headerlink" title="主机宕机后的操作"></a>主机宕机后的操作</h4><p><img src="https://s1.ax1x.com/2022/04/28/LO3eqx.png" alt="哨兵模式监控流程"></p><p>①优先级在redis.conf中默认：replica-priorit 100，值越小优先级越高</p><p>②偏移量是指获得原主机数据最全的</p><p>③每个redis实例启动后都会随机生成一个40位的runid</p><hr><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><p>redis集群的概念：实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1&#x2F;N。</p><p>redis集群可以解决redis容量不足以及在并发写操作下分摊redis主机的压力</p><ul><li>在主从模式，薪火相传模式，主机宕机，都会导致ip地址发生变化等问题的出现，需要在配置文件中修改配置信息和端口</li></ul><p>​解决方式：在redis3.0之前通过代理主机来解决，在redis3.0后无中心化集群配置来解决</p><p>​代理主机：可以理解为集中式，即所有请求先访问代理主机，由代理主机分配到指定的服务器进行处理</p><p>​无中心化集群配置：多个redis服务器组成一个集群，集群内每个redis都可以作为请求的入口，</p><p>​接受请求后进行判断，不是自己处理的请求则进行转发，最后转发至目标redis服务器。</p><h3 id="集群的分配"><a href="#集群的分配" class="headerlink" title="集群的分配"></a>集群的分配</h3><p>redis-cli –cluster create –cluster-replicas 1 是采用最简单的方式分配集群，这里的1代表每个主机分配一个从机。</p><p>而一个集群至少要有三个主节点，总共需要6个服务器。一台主机，一台从机，正好三组。</p><p>分配原则是每一个redis不能使用在同一个服务器下，ip也不能相同，才能保证主机宕机，从机切换的效果。</p><p>cluster nodes可以查看集群中主机和从机的状态信息</p><p><img src="https://s1.ax1x.com/2022/04/28/LO3QiD.png" alt="redis集群分配"></p><h3 id="插槽slots"><a href="#插槽slots" class="headerlink" title="插槽slots"></a>插槽slots</h3><p>All 16384 slots covered.</p><p><font color="red"><strong>每一个Redis集群总共有16384个插槽(hash slot)，数据库中每一个键都是属于13684插槽之一</strong></font></p><p>集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p><p>每一个主机负责处理一部分插槽的数据，参考上图，192.168.231.133：6379这个主机只负责0-5460的插槽</p><ul><li>不在同一个slot下的键值，是不能使用mget,mset等多键操作。</li><li>CLUSTR keyslot cout 返回这个cout键的所在的插槽值</li><li>CLUSTR countkeysinslot 4874 返回4874这个插槽中键的数量</li><li>CLUSTER GETKEYSINSLOT【 slot】【count】 返回 count 个 slot 槽中的键的值</li></ul><h3 id="集群中主机宕机"><a href="#集群中主机宕机" class="headerlink" title="集群中主机宕机"></a>集群中主机宕机</h3><ul><li><p>1.集群中主机宕机之后，15秒内不能恢复，则自动将该主节点的从机升为主节点</p></li><li><p>2.当之前宕机状态的主机恢复后，由原来的主机身份变成了从机</p></li><li><p>3.当集群中某个主机和它的从机都宕机后，根据redis.conf中的参数 </p><p> ​cluster-require-full-coverage的值会有两种情况：</p><p>​①cluster-require-full-coverage为yes，则整个集群都挂掉，不能提供服务</p><p>​②cluster-require-full-coverage为no，则宕机的主机负责的插槽段，既不能使用也无法存储数据、</p></li></ul><h3 id="Jedis集群开发"><a href="#Jedis集群开发" class="headerlink" title="Jedis集群开发"></a>Jedis集群开发</h3><ul><li><p>即使连接的不是主机，集群会自动切换主机存储。主机写，从机读。</p></li><li><p>无中心化主从集群。无论从哪台主机写的数据，其他主机上都能读到数据。</p><p>实际上读取数据是由对应插槽的主机进行查询的，也符合了主机只能查询自己负责的插槽段内的数据的说法</p></li></ul><p><img src="https://s1.ax1x.com/2022/04/28/LO3ao8.png" alt="数据读取的说明"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">HostAndPort</span> <span class="variable">hostAndPort</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HostAndPort</span>(<span class="string">&quot;192.168.231.133&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="type">JedisCluster</span> <span class="variable">jedisCluster</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisCluster</span>(hostAndPort);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行操作</span></span><br><span class="line">        jedisCluster.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedisCluster.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;名字是：&quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        jedisCluster.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="集群的优点和缺点"><a href="#集群的优点和缺点" class="headerlink" title="集群的优点和缺点"></a>集群的优点和缺点</h3><p>优点：</p><p>①解决redis内存不足的问题，进行了扩容</p><p>②分摊了主服务器的压力</p><p>③无中心化配置相对简单</p><p>缺点：</p><p>①多键操作不被支持</p><p>②多键的redis的事务不被支持，也不支持lua脚本</p><p>③由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，</p><p>​需要整体迁移而不是逐步过渡，复杂度较大。</p><hr><h2 id="Redis应用出现的问题"><a href="#Redis应用出现的问题" class="headerlink" title="Redis应用出现的问题"></a>Redis应用出现的问题</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透：指有请求一直在查询缓存和数据库中都不存在的数据。</p><p>例如，用户不断发起请求。发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大，从而崩溃。</p><p>缓存穿透的现象：1.应用服务器的压力变大了  2.redis的命中率降低  3.一直查询数据库</p><p><img src="https://s1.ax1x.com/2022/04/28/LO30Jg.png" alt="缓存穿透"></p><ul><li><p>解决缓存穿透的方案：</p><p>1.对空值缓存：如果查询的数据值为空(不管数据是否存在)，依旧把空结果返回到redis中进行缓存，同时给此空结果设置较短的过期时间</p><p>2.设置白名单：使用bitmap类型定义一个名单，存在于名单中的id可以访问，不存在则拦截</p><p>3.采用布隆过滤器(Bloom Filter)：布隆过滤器是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。</p><p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p><p>将所有可能存在的数据哈希储存到一个足够大的bitmaps中，一个一定不存在的数据会被bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p><p>4.进行实时监控：当redis命中率开始急速降低时，排查出具体的访问对象和数据，设置黑名单限制访问</p></li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿：指在一个时间间隔内某些key恰好过期的同时遇到了极大的请求访问这个key</p><p>缓存击穿的现象：1.数据库访问的压力瞬时增大  2.redis没有出现大量key过期  3.redis正常运行</p><p><img src="https://s1.ax1x.com/2022/04/28/LO3Dzj.png" alt="缓存击穿"></p><ul><li><p>解决缓存击穿的方案：</p><p>1.预先设置热门数据：在redis的高并发访问之前，提前将热门数据缓存到redis中并增加热门数据key的时长</p><p>2.实时调整：根据情况不断调整key的过期时间</p><p>3.使用锁：</p><p>​①就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db。</p><p>​② 先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key</p><p>​③ 当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；</p><p>​④ 当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</p><p><img src="https://s1.ax1x.com/2022/04/28/LO3sQs.jpg" alt="演示"></p></li></ul><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩：指在在一个时间间隔内大量的key全部过期的同时收到大量的请求这些过期的key，</p><p>​这些请求会一瞬间压到数据库，导致最终数据库和redis缓存数据库两者都崩溃</p><p>缓存雪崩的现象：1.极少的时间段内大量查询的key集中过期</p><p><img src="https://s1.ax1x.com/2022/04/28/LO36Lq.png" alt="缓存雪崩"></p><ul><li><p>缓存雪崩的解决方案：</p><p>1.构造多级缓存架构：nginx缓存 + redis缓存 +其他缓存（ehcache等）</p><p>2.使用锁或队列：用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，但效率太低，不适用高并发情况。</p><p>3.设置过期标志更新缓存：对缓存的数据进行监控，在过期前某段时间进行更新。</p><p>4.将缓存的时间分散开：可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低。</p></li></ul><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>在单机部署变成分布式集群部署后，原单机部署情况下的并发控制锁策略失效，即对锁只能对某一个主机生效，而不能对整个集群起作用。</p><p>分布式锁：<font color="red"><strong>多个线程对同一个共享资源进行操作出现的安全问题，在为了解决这个问题产生的一种跨JVM的互斥机制来控制共享资源的访问。</strong></font></p><p>1.在redis中实现分布式锁(以下的内容基本都是基于单机考虑的)</p><p><font color="red"><strong>在set时指定过期时间（推荐）set key value ex sectime nx</strong></font></p><ul><li>除了这个方式还可以通过setnx设置锁，expire设置锁过期的时间，但不推荐，主要是因为两个命令不是同时进行的，不是原子操作</li></ul><p><img src="https://s1.ax1x.com/2022/04/28/LO3fFU.png" alt="分布式锁的实现逻辑"></p><ol start="2"><li>分布式锁在redis中应用的可能出现的问题</li></ol><ul><li>问题1：<font color="red"><strong>误释放其他线程的锁</strong></font></li></ul><p>​分布式锁执行的流程：</p><p>​①手动加锁</p><p>​②业务操作</p><p>​③手动释放锁</p><p>​④如果手动释放锁失败了，则达到超时时间，redis会自动释放锁。</p><p>​解决方案：<font color="red"><strong>在设置加锁的时候设置一个唯一的uuid值，在释放锁之前进行对比，相同则释放锁</strong></font></p><p><img src="https://s1.ax1x.com/2022/04/28/LO3hYF.png" alt="误释放问题"></p><ul><li>问题2：<font color="red"><strong>释放锁的原子性问题</strong></font></li></ul><p>​解决方案：<font color="red"><strong>使用lua脚本释放锁，保证原子性操作</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 释放锁 del</span></span><br><span class="line"><span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line"><span class="comment">// 设置lua脚本返回的数据类型</span></span><br><span class="line">DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 设置lua脚本返回类型为Long</span></span><br><span class="line">redisScript.setResultType(Long.class);</span><br><span class="line">redisScript.setScriptText(script);</span><br><span class="line">redisTemplate.execute(redisScript, Arrays.asList(<span class="string">&quot;lock&quot;</span>),uuid);</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/04/28/LO3ISJ.png" alt="原子性问题"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>确保分布式锁可用必须同时满足以下四个条件：<ul><li>互斥性。在任意时刻，只有一个客户端能持有锁。</li><li>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li><li>加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了</li><li>加锁和解锁必须具有原子性。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2022/04/24/Git/"/>
      <url>/2022/04/24/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Git是一个免费的、开源的<font color='orange'><strong>分布式版本控制系统</strong></font>。</p><p>版本控制：记录文件修改的历史记录，以便后续的查阅和修改以及方便版本切换</p><p><img src="https://s1.ax1x.com/2022/04/24/Lh4qL4.png" alt="Git的结构"></p><hr><h3 id="Git的常用命令"><a href="#Git的常用命令" class="headerlink" title="Git的常用命令"></a>Git的常用命令</h3><p><img src="https://s1.ax1x.com/2022/04/24/Lh5iOe.png" alt="常用命令"></p><ul><li>git切换版本，其底层实际是<font color="orange"><strong>移动的HEAD指针</strong></font>，通过git reset –hard 这一命令不断改变master对不同版本的指针指向</li></ul><p><img src="https://s1.ax1x.com/2022/04/24/Lh5mfP.png" alt="image-20220421221308215切换版本"></p><hr><h3 id="Git分支操作"><a href="#Git分支操作" class="headerlink" title="Git分支操作"></a>Git分支操作</h3><p>分支：在版本控制过程中，使用多条线同时推进多个任务</p><p>1.分支的作用：</p><p>①同时并行推进多个功能开发，提高开发效率 </p><p>②各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。</p><p>2.分支的常用命令</p><table><thead><tr><th align="left">命令名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">git branch 分支名</td><td align="left">创建分支</td></tr><tr><td align="left">git branch -v</td><td align="left">查看分支</td></tr><tr><td align="left">git checkout 分支名</td><td align="left">切换分支</td></tr><tr><td align="left">git merge 分支名</td><td align="left">把指定的分支合并到当前分支上</td></tr></tbody></table><ul><li><p>合并分支会出现的特殊情况：产生冲突</p><p>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。</p><p>Git 无法替 我们决定使用哪一个。必须<font color="red"><strong>人为决定</strong></font>新代码内容。</p></li></ul><p>​解决方法：编辑有冲突的文件，删除特殊符号，决定要使用的内容</p><ul><li>master、hot-fix其实都是指向具体版本记录的指针。当前所在的分支，其实是由 HEAD 决定的。</li></ul><hr><h2 id="GitHub操作"><a href="#GitHub操作" class="headerlink" title="GitHub操作"></a>GitHub操作</h2><h3 id="远程仓库的操作"><a href="#远程仓库的操作" class="headerlink" title="远程仓库的操作"></a>远程仓库的操作</h3><table><thead><tr><th align="left">命令名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">git remote -v</td><td align="left">查看当前所有远程地址别名</td></tr><tr><td align="left">git remote add 别名</td><td align="left">远程地址 起别名</td></tr><tr><td align="left">git push 别名 分支</td><td align="left">推送本地分支上的内容到远程仓库</td></tr><tr><td align="left">git clone 远程地址</td><td align="left">将远程仓库的内容克隆到本地</td></tr><tr><td align="left">git pull 远程库地址别名 远程分支名</td><td align="left">将远程仓库对于分支最新内容拉下来后与 当前本地分支直接合并</td></tr><tr><td align="left">git clone -b “分支名称” 远程地址</td><td align="left">拉取远程指定分支下的代码</td></tr><tr><td align="left">git branch -a</td><td align="left">查看全部分支（包括本地和远程）</td></tr></tbody></table><p>pull拉取的特殊情况：</p><ul><li>pull 则是将<strong>远程主机的master</strong>分支最新内容拉下来后与当前本地分支直接合并</li></ul><p>​①当要拉取的远程分支名和本地分支名不一致时</p><p>​使用  git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p><p>​②当要拉取的远程分支名和本地分支名相同时，“:”冒号后面的内容可以省略</p><p>​使用  git pull &lt;远程主机名&gt; &lt;远程分支名&gt;</p><hr><h2 id="IDEA集成Git"><a href="#IDEA集成Git" class="headerlink" title="IDEA集成Git"></a>IDEA集成Git</h2><p>①配置 Git 忽略文件</p><p>②在IDEA中定位Git程序 </p><ul><li><p><font color="red"><strong>github和gitee的操作几乎是一样的</strong></font></p></li><li><p><font color="red"><strong>实操啥的太长了在此不做记录了，无他，多用就能掌握</strong></font></p></li></ul><h2 id="IDEA集成GitLab"><a href="#IDEA集成GitLab" class="headerlink" title="IDEA集成GitLab"></a>IDEA集成GitLab</h2><ul><li>GitLab 是由 GitLabInc.开发，使用 MIT 许可证的基于网络的 Git 仓库管理工具，且具有 wiki 和 issue 跟踪功能。</li></ul><p>搭建GitLab服务器的步骤</p><p>①服务器准备</p><p>②准备安装包 </p><p><a href="https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm">https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm</a></p><p>直接将此包上传到服务器&#x2F;opt&#x2F;module 目录下即可</p><p>③编写安装脚本</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@gitlab-server module]# vim gitlab-install.sh</span><br><span class="line">sudo rpm -ivh /opt/module/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm</span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server cronie</span><br><span class="line">sudo lokkit -s http -s ssh</span><br><span class="line">sudo yum install -y postfix</span><br><span class="line">sudo service postfix start</span><br><span class="line">sudo chkconfig postfix on</span><br><span class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlabce/script.rpm.sh | sudo bash</span><br><span class="line">sudo EXTERNAL_URL=&quot;http://gitlab.example.com&quot; yum -y install gitlabce</span><br><span class="line"></span><br><span class="line">给脚本增加执行权限</span><br><span class="line">[root@gitlab-server module]# chmod +x gitlab-install.sh</span><br><span class="line">[root@gitlab-server module]# ll</span><br><span class="line">总用量 403104</span><br><span class="line">-rw-r--r--. 1 root root 412774002 4 月 7 15:47 gitlab-ce-13.10.2-</span><br><span class="line">ce.0.el7.x86_64.rpm</span><br><span class="line">-rwxr-xr-x. 1 root root 416 4 月 7 15:49 gitlab-install.sh</span><br><span class="line"></span><br><span class="line">然后执行该脚本，开始安装 gitlab-ce。注意一定要保证服务器可以上网。</span><br><span class="line">[root@gitlab-server module]# ./gitlab-install.sh </span><br><span class="line">警告：/opt/module/gitlab-ce-13.10.2-ce.0.el7.x86_64.rpm: 头 V4 </span><br><span class="line">RSA/SHA1 Signature, 密钥 ID f27eab47: NOKEY</span><br><span class="line">准备中... ################################# </span><br><span class="line">[100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line"> 1:gitlab-ce-13.10.2-ce.0.el7 </span><br><span class="line">################################# [100%]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>④启动 GitLab 服务 执行以下命令启动 GitLab 服务，如需停止，执行 gitlab-ctl stop</p><p> [root@gitlab-server module]# gitlab-ctl start </p><p>ok: run: alertmanager: (pid 6812) 134s </p><p>ok: run: gitaly: (pid 6740) 135s </p><p>ok: run: gitlab-monitor: (pid 6765) 135s</p><p>⑤使用浏览器访问 GitLab并创建远程库</p><ul><li><font color="red"><strong>IDEA集成Gitlab的方式与github、gitee大同小异</strong></font>，除了下面这一步有所变化</li></ul><p><img src="https://s1.ax1x.com/2022/04/24/Lh5Kl8.png" alt="添加gitlab服务器"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM-CRUD整合</title>
      <link href="/2022/04/22/SSM-CRUD/"/>
      <url>/2022/04/22/SSM-CRUD/</url>
      
        <content type="html"><![CDATA[<h2 id="Demo简介"><a href="#Demo简介" class="headerlink" title="Demo简介"></a>Demo简介</h2><h3 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h3><p>开发环境：SSM框架+MySql8.0+JDK1.8+Tomcat8.0+Maven3.6+bootstrap框架</p><p>开发工具：IDEA2020+SQLyog</p><ul><li>实现网站基础增删改查的操作</li></ul><h3 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h3><ul><li><p>分页功能</p></li><li><p>实现数据校验</p><p>通过 jquery前端 + JSR303后端 双重校验 </p></li><li><p>局部页面更新</p><p>使用ajax发起异步请求</p></li><li><p>Rest风格的URI(统一资源标识符)</p></li></ul><p>​实现访问同一个地址，根据不同的请求方式实现对资源的不同操作</p><h3 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h3><ol><li><p>使用IDEA创建Maven工程，并将Maven的打包方式设置为war</p></li><li><p>引入相关依赖</p><p>spring、springMVC、mabatis、数据库连接池、mysql驱动包、其他</p></li><li><p>引入bootstap前端框架</p></li><li><p>编写SSM整合的关键配置文件</p><p>web.xml、spring、springMVC</p></li></ol><ul><li>web.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  1.启动Spring的容器  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- needed for ContextLoaderListener --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstraps the root web application context before servlet initialization --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置字符编码过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   配置HiddenHttpMethodFilter --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  将get或者post请求经过过滤器转换为指定的put或者delete请求  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--   2.springMVC的前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring的配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ssm_crud.service&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring配置文件的核心点（数据源、与mybatis的整合，事务控制） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ssm_crud&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  Spring的配置文件，这里主要配置和逻辑业务有关的  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  数据源，事务控制，xxx --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pooledDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.jdbcUrl&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  配置mybatis的整合  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  指定mybatis的全局核心配置文件位置    --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;pooledDataSource&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定mybatis的映射配置文件位置          --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   配置扫描器，将mybatis接口的实现类加入到ioc容器中    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--     扫描所有dao接口的实现，加入到ioc容器中       --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ssm_crud.dao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--   配置一个可以执行批量的sqlSession     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;executorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BATCH&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--   事务控制配置     --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   1.开启事务控制器     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--     事务管理器控制的数据源       --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;pooledDataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    配置通知：可以理解为对切入点实现的具体操作    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  所有方法都是事务  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  以get开始的所有方法  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--   增强的配置   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  配置切入点</span></span><br><span class="line"><span class="comment">            id：切入点的标识，下方切面所需要</span></span><br><span class="line"><span class="comment">            expression切入点表达式：表示将通知应用再哪个类的哪个方法下</span></span><br><span class="line"><span class="comment">            此处代表的是通知将应用在ssm_crud.service包下的所有方法</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* ssm_crud.service..*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--      配置切面</span></span><br><span class="line"><span class="comment">                 advice-ref：通知的标识</span></span><br><span class="line"><span class="comment">                 pointcut-ref：切入点的标识id</span></span><br><span class="line"><span class="comment">                 切面是指将通知应用到切入点的过程</span></span><br><span class="line"><span class="comment">                 此处表示将标识为txadvice的通知的应用到切入点id为txPoint的过程</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPoint&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>springMVC的配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- springMVC的配置文件包含网站跳转逻辑的控制   --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.开启组件扫描       --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ssm_crud&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--      只扫描控制器      --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    2.视图解析器    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--   3.mvc视图控制器     --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mvc:view-controller path=&quot;/&quot; view-name=&quot;index&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--   4.静态资源的默认处理器     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    开启mvc注解驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询功能"><a href="#查询功能" class="headerlink" title="查询功能"></a>查询功能</h2><p>1.直接让index界面向服务器发起查询的ajax请求</p><p>2.控制层组件处理index的请求，使用注解@ResponseBody将查询方法的返回值作为响应体返回</p><p>​新造一个Message类给予相关提示，里面包含了状态码、提示信息以及用户想要的数据</p><p>3.在jackson依赖的作用下直接将数据转换为json字符串回传给客户端</p><p>4.客户端将接受到的json字符串解析为json对象</p><p>5.使用此json对象对页面需要的信息进行填充</p><ul><li><p>解析并显示员工数据、解析并显示分页信息、解析并显示分页条都是在第4、5步完成的</p><p>使用的是JQuery的each函数遍历封装在json对象中的分页条和员工信息，</p><p>通过从外到内先利用$()和addClass()创建相应的标签及设置标签样式，</p><p>再通过append()方法进行内容设置以及attr()方法进行自定义属性的设置。</p></li><li><p>利用分页插件封装的数据给分页条绑定点击的ajax事件</p></li></ul><p><img src="https://s1.ax1x.com/2022/04/22/LgsmKU.png" alt="查询页面"></p><hr><h2 id="增加功能"><a href="#增加功能" class="headerlink" title="增加功能"></a>增加功能</h2><p>1.采用bootstrap框架提供的模拟框提供填写的表单</p><p>2.为新增选项绑定单击事件，发起ajax请求，查询所有部门的姓名并显示在下拉框中</p><p>3.为提交选项绑定单击事件，在发起保存请求之前对添加的数据进行<strong>前端JQuery校验和ajax请求后端校验邮箱是否可用</strong>，</p><p>​表单数据使用JQuery的serialize()方法实现序列化并发送给服务器，<strong>针对重要的数据后端使用JSR303</strong>完成双端验证</p><p>4.提交完成后由bootstrap框架提供的$(‘#myModal’).modal(‘hide’)自动关闭模拟框</p><p>5.模拟框关闭后再次发起ajax请求访问最后一页</p><ul><li>第5步没有采用pageHelper提供的限制只能访问最大页数的功能，仅是在js中定义一个全局变量，记录总记录数</li><li>根据查询接口返回的pageInfo封装的数据，判断当总记录数 &#x2F; 每页显示数据 是否大于 0 来决定全局变量是否需要 +1</li></ul><p><img src="https://s1.ax1x.com/2022/04/22/Lgsub4.png" alt="新增员工"></p><p><img src="https://s1.ax1x.com/2022/04/22/LgsQa9.png" alt="校验邮箱是否符合规则"></p><hr><h2 id="修改功能"><a href="#修改功能" class="headerlink" title="修改功能"></a>修改功能</h2><p>1.采用bootstrap框架提供的模拟框提供填写的表单</p><p>2.为新增选项绑定单击事件，发起ajax请求查询指定员工的信息，回显在表单中</p><p>3.为提交选项绑定单击事件，在发起修改请求之前对添加的数据进行<strong>前端JQuery校验校验邮箱是否符合规则</strong></p><p>​校验完成之后表单数据使用JQuery的serialize()方法实现序列化并发送给服务器，</p><p>4.提交完成后由bootstrap框架提供的$(‘#myModal’).modal(‘hide’)自动关闭模拟框</p><p>5..模拟框关闭后再次发起ajax请求访问数据修改时所在的页码</p><ul><li>在js中定义一个全局变量，记录当前页数</li></ul><p><img src="https://s1.ax1x.com/2022/04/22/Lgsl5R.png" alt="修改员工的校验"></p><hr><h2 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h2><p>1.为删除按钮绑定单击事件，根据confirm()函数的选择状态决定是否发送ajax请求删除数据</p><p>2.添加全选或者全不选的功能</p><p>​$(“.check_item:checked”).length可以获取状态处于选中的选项框的个数</p><p>​<strong>选择prop()函数可以获取选项框的状态(true或者false)，不使用attr()函数的原因是只会返回(undefined)</strong></p><p>3.给第一行的删除绑定统一删除的功能，通过$(this).parents(“tr”).find(“td:eq(1)”).text()寻找当前dom对象的祖父元素中的tr元素后</p><p>​再获取子元素中的第二个td元素的文本值，封装成json字符串由ajax请求发往服务器</p><p>4.服务器利用<strong>jackson</strong>依赖转换字符串为map集合对象，获取map集合中的被删除id并将利用String的split()分割每一个数字获取一个String数组</p><p>5.将String数组的元素逐个遍历转换为数字调用service层进行删除</p><p><img src="https://s1.ax1x.com/2022/04/22/Lgs88x.png" alt="删除功能展示"></p><hr><h2 id="SSM-CRUD总结"><a href="#SSM-CRUD总结" class="headerlink" title="SSM-CRUD总结"></a>SSM-CRUD总结</h2><p><img src="https://s1.ax1x.com/2022/04/22/LgsG26.png" alt="项目流程示意图"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2022/04/22/MyBatis/"/>
      <url>/2022/04/22/MyBatis/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h2><ul><li>MyBatis是一个基于Java的持久层框架。持久层框架包括SQL Maps和Data Access Objects（DAO）</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li><li>MyBatis 是一个<strong>半自动</strong>的ORM（Object Relation Mapping）框架</li><li><strong>核心配置文件主要设置连接数据库的信息和mybatis的全局配置信息，映射配置文件主要用于写sql语句</strong></li></ul><h2 id="前置操作说明"><a href="#前置操作说明" class="headerlink" title="前置操作说明"></a>前置操作说明</h2><h3 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h3><blockquote><p> MyBatis中的mapper接口相当于之前具体操作某张表的dao。但是mapper仅仅是接口，我们不需要提供实现类，因为mybatis框架支持面向接口编程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">//表--实体类--mapper接口--映射文件</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h3><p>相关概念：ORM（Object Relationship Mapping）对象关系映射。</p><ul><li>对象：Java的实体类对象 </li><li>关系：关系型数据库 </li><li>映射：二者之间的对应关系</li></ul><table><thead><tr><th align="left">Java概念</th><th align="left">数据库概念</th></tr></thead><tbody><tr><td align="left">类</td><td align="left">表</td></tr><tr><td align="left">属性</td><td align="left">字段&#x2F;列</td></tr><tr><td align="left">对象</td><td align="left">记录&#x2F;行</td></tr></tbody></table><ul><li><p>MyBatis面向接口编程的两个一致</p><p>1.映射文件的nameSpace和mapper接口的全类名保持一致</p><p>2.映射文件中sql语句的id 要和mapper接口中的方法名保持一致</p></li></ul><p>因此，<strong>当使用mapper接口的对象调用接口的方法时，会根据接口名找到相应的映射文件，再根据调用的方法名找到相应的sql语句并执行</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    int insertUser()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user values(null,&#x27;test&#x27;,&#x27;test&#x27;,10,&#x27;男&#x27;,&#x27;test@qq.com&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试功能"><a href="#测试功能" class="headerlink" title="测试功能"></a>测试功能</h3><ul><li>SqlSession：<strong>代表Java程序和数据库之间的会话。</strong></li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”。</li><li>工厂模式：将创建所需对象的过程进行封装，并返回所需对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : TODO</span></span><br><span class="line"><span class="comment">     * sqlSession默认设置不自动提交事务，若需要自动提交事务</span></span><br><span class="line"><span class="comment">     * 则需要设置sqlSessionFactory.openSession()方法括号内的形参为true</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/14</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">stream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(stream);</span><br><span class="line">        <span class="comment">//获取SqlSession</span></span><br><span class="line">        <span class="comment">//形参内为true则代表设置为自动提交事务</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//底层使用了代理模式，返回此接口的实现类对象</span></span><br><span class="line">        <span class="comment">//获取mapper接口对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//测试功能</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertUser();</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line"><span class="comment">//        sqlSession.commit();</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="log4j日志记录"><a href="#log4j日志记录" class="headerlink" title="log4j日志记录"></a>log4j日志记录</h3><p>需要记录日志文件需要引入log4j的依赖并进行配置，log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下</p><blockquote><p>日志的级别 FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) </p><p>从左到右打印的内容越来越详细</p></blockquote><hr><h2 id="MyBatis的CRUD操作"><a href="#MyBatis的CRUD操作" class="headerlink" title="MyBatis的CRUD操作"></a>MyBatis的CRUD操作</h2><p>1.增</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    int insertUser()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user values(null,&#x27;test&#x27;,&#x27;test&#x27;,10,&#x27;男&#x27;,&#x27;test@qq.com&#x27;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.删</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    int deleteUser(@Param(&quot;id&quot;) Integer id)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">        delete from t_user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    int updateUser(@Param(&quot;id&quot;) Integer id);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">        update t_user set username = &#x27;测试名字&#x27; where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.查</p><ul><li><p>查询功能必须设置resultType或resultMap属性</p><ul><li>resultType：设置默认的映射关系，用于属性名和表中字段名一致的情况</li><li>resultMap ：设置自定义的映射关系，用于一对多或多对一或字段名和属性名不一致的情况</li></ul></li><li><p>①查询的数据只有<strong>一条</strong>，可以用**实体类对象或者集合(list、map)**接收</p><p>②若查询的数据有<strong>多条</strong>只能用<strong>集合(list、map)来接收，否则抛异常</strong></p><p>也可以在mapper接口上添加**@MapKey注解**方式来接收</p><p>此方式以某个字段作为键，以每条数据转换的map集合作为值，放在同一个map集合中</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@MapKey的value值必须是一个唯一标识不能重复的字段</span></span><br><span class="line">    <span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">    Map&lt;String,Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//结果演示：</span></span><br><span class="line"><span class="comment">//&#123;&#123;3=&#123;password=test, sex=男, id=3, age=10, email=test@qq.com, username=test&#125;, </span></span><br><span class="line"><span class="comment">//5=&#123;password=123456, sex=男, id=5, age=20, email=admin@qq.com, username=admin&#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>查询<strong>特殊值</strong>的情况，在MyBatis中<strong>设置了默认的类型别名</strong></p><p>java.lang.Integer —&gt; int,integer</p><p>int —&gt;_int,_integer</p><p>Map —&gt; map</p><p>String —&gt; string</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    User getUserById(@Param(&quot;id&quot;) Integer id)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    List&lt;User&gt; GetAllUser()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;GetAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    Integer getUserCount()--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    此处的resultType填写的可以是全类名也可以MyBatis中设置的默认的类型别名 _integer等等--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        select count(*) from t_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    Map&lt;String,Object&gt; getUserByIdToMap(@Param(&quot;id&quot;) Integer id);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByIdToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where id = #&#123;id&#125;;</span><br><span class="line"><span class="comment">&lt;!--  结果：&#123;password=test, sex=男, id=3, age=10, email=test@qq.com, username=test&#125;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    List&lt;Map&lt;String,Object&gt;&gt; getAllUserToList();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user;</span><br><span class="line"><span class="comment">&lt;!--  结果为List数组，值是map类型的键值对：</span></span><br><span class="line"><span class="comment">[&#123;password=test, sex=男, id=3, age=10, email=test@qq.com, username=test&#125;, </span></span><br><span class="line"><span class="comment">&#123;password=123456, sex=男, id=5, age=20, email=admin@qq.com, username=admin&#125;]--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="核心配置文件解析"><a href="#核心配置文件解析" class="headerlink" title="核心配置文件解析"></a>核心配置文件解析</h2><ul><li><p>核心配置文件中的标签必须按照固定的顺序配置：</p><p>properties?,settings?,typeAliases?,typeHandlers?,</p><p>objectFactory?,objectWrapperFactory?,reflectorFactory?,</p><p>plugins?,environments?,databaseIdProvider?,mappers?</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  引入数据库的数据源配置文件，可以$&#123;属性名&#125;的方式访问属性值  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  设置类型别名  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   设置单个bean类的别名     --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    typeAlias：设置某个类的别名</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                    type：设置需要设置别名的类型</span></span><br><span class="line"><span class="comment">                    alias：设置某个类型的别名</span></span><br><span class="line"><span class="comment">                        ①设置了alias属性，那么该类型，则只能使用指定的别名</span></span><br><span class="line"><span class="comment">                        ②若没有设置了alias属性，则该类型拥有默认的别名，即其类名，且不区分大小写</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;mybatis.bean.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     在typeAlias和package之间，通常使用 package ，其效率更高 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     以包为单位，将包下的所有类型设置默认的类型别名，即类名且不区分大小写   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  配置连接数据库的环境  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environments：设置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environment：设置具体的连接数据库的环境信息</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">            type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">            type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span></span><br><span class="line"><span class="comment">            type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            dataSource：设置数据源</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">            type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">            type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从</span></span><br><span class="line"><span class="comment">            缓存中直接获取，不需要重新创建</span></span><br><span class="line"><span class="comment">            type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span></span><br><span class="line"><span class="comment">            type=&quot;JNDI&quot;：调用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  引入映射文件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        以包为单位，将包下所有的映射文件引入核心配置文件</span></span><br><span class="line"><span class="comment">        要求：</span></span><br><span class="line"><span class="comment">        1.mapper接口所在的包全路径要和映射文件所在的包全路径一致</span></span><br><span class="line"><span class="comment">        2.mapper接口名和映射文件的名字一致</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="MyBatis获取参数值"><a href="#MyBatis获取参数值" class="headerlink" title="MyBatis获取参数值"></a>MyBatis获取参数值</h2><p>MyBatis获取参数值的两种方式：${} 和 #{}</p><p><strong>${} 本质上是字符串拼接赋值，即Statement</strong></p><p><strong>#{}本质上是占位符赋值，即PreparedStatement</strong></p><h3 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h3><ul><li>可以通过${}或 #{} 以任意的名称获取参数值，<strong>但是选择使用的是${}则需要注意额外添加一对单引号</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    User getUserByName(String username)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--         select * from t_user where username = #&#123;username&#125;;--&gt;</span></span><br><span class="line">                select * from t_user where username = &#x27;$&#123;username&#125;&#x27;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h3><ul><li><p>MyBatis会自动将这些参数放在一个map集合中，</p><p>以arg0,arg1…为键，以参数为值；以 param1,param2…为键，以参数为值；</p><p>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，但需<strong>注意${}需要手动加单引号</strong></p></li></ul><p><img src="https://s1.ax1x.com/2022/04/22/LgYeG4.png" alt="存储数据的map集合"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    User checkLogin(String username,String password)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        select * from t_user where username = &#x27;$&#123;arg0&#125;&#x27; and password = &#x27;$&#123;arg1&#125;&#x27; ;--&gt;</span></span><br><span class="line">        select * from t_user where username = #&#123;arg0&#125; and password = #&#123;param2&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h3><ul><li><p>此处的键都是由自己提供的，与上面mybatis提供的并不一样</p><p>但也是只需要通过${}和#{}访问map集合的键就可以获取相对应的值，但需<strong>注意${}需要手动加单引号</strong></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h3><ul><li><p>若mapper接口中的方法参数为实体类对象时 </p><p><strong>此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</strong></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    int addUser(User user)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> &gt;</span></span><br><span class="line">        insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h3><ul><li><p>这些参数会被放在map集合中，<strong>以@Param注解的value属性值为键，以参数为值；以 param1,param2…为键，以参数为值；</strong></p><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值， 注意${}需要手动加单引号</p></li></ul><p><img src="https://s1.ax1x.com/2022/04/22/LgYMs1.png" alt="map集合中可用的键"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  User checkUserByAnnotation(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;)String password);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkUserByAnnotation&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username = #&#123;ttt&#125; and password = #&#123;password&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="特殊SQL语句"><a href="#特殊SQL语句" class="headerlink" title="特殊SQL语句"></a>特殊SQL语句</h2><p>1.模糊查询</p><ul><li><p><strong>只能使用${}</strong></p><p>若使用#{}，占位符会被解析成？，当中参数里面的一部分，而不是起填充的作用</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByFuzzy()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByFuzzy&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    select * from t_user where username like &#x27;%$&#123;username&#125;%&#x27;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    select * from t_user where username like concat(&#x27;%&#x27;,#&#123;username&#125;,&#x27;%&#x27;);--&gt;</span></span><br><span class="line">            select * from t_user where username like &quot;%&quot;#&#123;username&#125;&quot;%&quot;;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.批量删除</p><ul><li><p><strong>只能使用${}</strong></p><p>若使用#{}，则不会有任何数据的删除，原因是解析后会自动添加单引号，而在in的()里面不允许有单引号</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    int deleteMore(@Param(&quot;ids&quot;) String ids);--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span> &gt;</span></span><br><span class="line">            delete from t_user where id in ($&#123;ids&#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.动态设置表名</p><ul><li><p><strong>只能使用${}</strong></p><p>表名不能有单引号，因此不能使用#{}</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByTableName(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTableName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">            select * from $&#123;tableName&#125;;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.添加功能获取自增的主键</p><ul><li><p>useGeneratedKeys:设置当前标签中的sql使用了自增的主键</p><p>keyProperty：将自增的主键的值赋值给传入到映射文件中参数的某个属性</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    void insertUser(User user)      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h2><h3 id="字段和属性的映射关系"><a href="#字段和属性的映射关系" class="headerlink" title="字段和属性的映射关系"></a>字段和属性的映射关系</h3><p>方式一：<strong>通过为字段起别名的方式，保证和实体类中的属性名保持一致</strong>，与之前在原生jdbc查询数据库使用方式一致</p><p>方式二：在MyBatis的核心配置文件中设置一个全局配置信息mapUnderscoreToCamelCase</p><p>​可以在查询表中数据时，<strong>自动将_类型的字段名转换为驼峰</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  设置MyBatis的全局配置  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        自动将_类型的字段名转换为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式三：通过resultMap设置自定义映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    List&lt;Emp&gt; getAllEmp()--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  resultMap：设置自定义映射</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    id：表示自定义映射的唯一标识</span></span><br><span class="line"><span class="comment">    type：查询的数据要映射的实体类的类型</span></span><br><span class="line"><span class="comment">    子标签：</span></span><br><span class="line"><span class="comment">    id：设置主键的映射关系</span></span><br><span class="line"><span class="comment">    result：设置普通字段的映射关系</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多对一映射关系处理"><a href="#多对一映射关系处理" class="headerlink" title="多对一映射关系处理"></a>多对一映射关系处理</h3><p><strong>多对一 对应的是  对象</strong></p><p>方式一：级联属性赋值</p><ul><li>将查出的不属于emp的字段的值，赋给Dept类对象dept对象的属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  多对一映射处理关系方式一：级联属性赋值  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;dept1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--级联属性赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpDeptByEid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;dept1&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM  t_emp LEFT JOIN t_dept ON t_emp.did = t_dept.`did` WHERE t_emp.eid = #&#123;eid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：association标签</p><ul><li><p>通过传入的Dept利用反射获取对应的属性名，将emp中的多余字段分别根据字段和属性进行赋值</p><p>最后将Dept的对象赋值给emp类中的dept</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;dept2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  association：设置多对一的映射关系</span></span><br><span class="line"><span class="comment">              property:需要处理多对一的映射关系的属性名</span></span><br><span class="line"><span class="comment">              javaType：该属性的类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式三：分步查询</p><ul><li><p>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：</p><p>延迟加载：即在什么时候需要什么时候调用执行对应sql语句，不会在一次查询执行所有的分步sql</p><p>lazyLoadingEnabled(默认关闭)：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载 </p><p>aggressiveLazyLoading(默认关闭)：当开启时，任何方法的调用都会加载该对象的所有属性。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分步查询第一步--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    Emp getEmpDeptByStep1(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;dept3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select：设置分步查询，查询某个属性的值的sql的唯一标识（namespace.sqlId或mapper接口的全类名.方法名）</span></span><br><span class="line"><span class="comment">        column：将sql以及查询结果中的某个字段设置为分步查询的条件</span></span><br><span class="line"><span class="comment">        fetchType：当开启了全局的延迟加载之后，可以通过此属性手动控制延迟加载的效果</span></span><br><span class="line"><span class="comment">          - lazy：表示延迟加载</span></span><br><span class="line"><span class="comment">          - eager：表示立即加载</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">select</span>=<span class="string">&quot;mybatis.mapper.DeptMapper.getDeptByEmpDidStep2&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByEmpDidStep1&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;dept3&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp where eid = #&#123;eid&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 分步查询第二步--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptByEmpDidStep2(@Param(&quot;did&quot;) Integer did)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用resultType 需要配置全局信息，自动把_转换为驼峰命名的方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByEmpDidStep2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dept where did = #&#123;did&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="一对多映射关系处理"><a href="#一对多映射关系处理" class="headerlink" title="一对多映射关系处理"></a>一对多映射关系处理</h3><p><strong>一对多  对应的是 集合</strong></p><p>方式一：collection标签 </p><p>目的：设置字段和属性的映射关系</p><ul><li><p>从ofType中获取集合的泛型参数类型，进而获取该类型属性，</p><p>将查询得到的字段和属性建立映射关系，创建该类型对象并将每一个对象放进集合中</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    Dept getDeptAndEmps(@Param(&quot;did&quot;) Integer did)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;emp1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--collection：处理一对多的映射关系</span></span><br><span class="line"><span class="comment">             ofType：表示该属性的泛型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmps&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;emp1&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：分步查询</p><ul><li>collection标签用于处理一对多的映射关系</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分步查询第一步--&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--    Dept getDeptAndEmpStep1(@Param(&quot;did&quot;) Integer did)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;emp2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">&quot;mybatis.mapper.EmpMapper.getDeptAndEmpStep2&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpStep1&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;emp2&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dept where did = #&#123;did&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 分步查询第二步--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpStep2(@Param(&quot;did&quot;) Integer did)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpStep2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp where t_emp.did = #&#123;did&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><ul><li><strong>动态SQL是由MyBatis框架提供的一种根据特定条件动态拼接SQL语句的功能</strong></li></ul><p>1.if标签</p><p>where 后的 1&#x3D;1 是一个恒成立的条件，目的是确保当第一个test不成立的时候sql语句的拼接不出错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp)--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   if:根据标签中的test属性所对象的表达式决定标签中的内容是否需要拼接到SQL中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp where 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and emp_name = #&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 2.where标签</p><p>①where标签中由内容时，会自动生成where关键字，并且将内容前多余的and 或 or去掉</p><p>②where标签中没有内容时，此时where标签没有任何效果</p><ul><li><strong><font color="orange">where标签不能将内容后多余的and 或 or去掉</font></strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                emp_name = #&#123;empName&#125; </span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                 and age = #&#123;age&#125; </span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span>      </span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 3.trim标签</p><p>①若标签中有内容时;</p><p>prefix | suffix：将trim标签中内容前面或后面添加指定内容</p><p>suffixOverrides | prefixOverrides： 将trim标签中内容前面或后面去掉指定内容</p><p>②若标签中没有内容时，trim标签没有任何效果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                emp_name = #&#123;empName&#125; and</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                age = #&#123;age&#125; or</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 4.choose、when、otherwise标签</p><ul><li><strong>choose、when、otherwise标签的结构类似java中的switch-case，满足一个条件后其余判断不再执行</strong></li></ul><p>choose作为when、otherwise的<font color="orange"><strong>父标签</strong></font></p><p>在choose标签里面，<font color="orange"><strong>when标签至少得有一个，otherwise标签最多只能有一个</strong></font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    choose、when、otherwise标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    emp_name = #&#123;empName&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    age = #&#123;age&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span>             </span><br><span class="line">                <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                    did = 1</span><br><span class="line">                <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 5.foreach标签</p><ul><li>collection属性值：当前要遍历的数组或集合对象</li></ul><p>​item属性：数组或集合当次遍历获取到的表示对象</p><p>​    separator属性：遍历数据以什么分隔</p><p>​        open属性：foreach标签所有循环内容从什么开始</p><p>​        close属性：foreach标签所有循环内容到什么结束</p><p>①批量删除操作：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    int deleteByArray(@Param(&quot;eids&quot;) Integer[] eids)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByArray&quot;</span>&gt;</span></span><br><span class="line">        delete from t_emp where eid in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;eid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    方式二--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByArray&quot;</span>&gt;</span></span><br><span class="line">        delete from t_emp where</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            eid = #&#123;eid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②批量添加操作：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    int insertEmpByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmpByList&quot;</span>&gt;</span></span><br><span class="line">        insert into t_emp values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  6.sql标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置sql片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span></span><br><span class="line">  eid,emp_name,age,sex,email</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- include引用sql片段  refid设置引用片段的id--&gt;</span></span><br><span class="line">   select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>/&gt;</span>  from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="MyBatis的缓存"><a href="#MyBatis的缓存" class="headerlink" title="MyBatis的缓存"></a>MyBatis的缓存</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul><li><p>默认级别是一级缓存，且是默认开启的</p></li><li><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存</p><p>在第二次进行查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</p></li><li><p>一级缓存失效的情况：</p></li></ul><p>​①不同的SqlSession对应不同的一级缓存</p><p>​②同一个SqlSession但是查询条件不同</p><p>​③同一个SqlSession两次查询期间执行了任何一次增删改操作</p><p>​④同一个SqlSession两次查询期间手动清空了缓存(只对一级缓存有效，对二级缓存无效)</p><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul><li><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；</p><p>此后若再次执行相同的查询语句，结果就会从缓存中获取</p></li><li><p>二级缓存开启的条件：</p></li></ul><p>​①在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置 </p><p>​②在映射文件中设置catch缓存标签</p><p>​③二级缓存必须在SqlSession关闭或提交之后有效 </p><p>​④查询的数据所转换的实体类类型必须实现序列化的接口</p><ul><li>使二级缓存失效的情况： 两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</li></ul><h3 id="二级缓存的配置文件"><a href="#二级缓存的配置文件" class="headerlink" title="二级缓存的配置文件"></a>二级缓存的配置文件</h3><p>在mapper配置文件中添加的cache标签可以设置一些属性：</p><ul><li>eviction属性：缓存回收策略</li></ul><p>  LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。 </p><p>  FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。 </p><p>  SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。 </p><p>  WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。 </p><p>  默认的是 LRU。 </p><ul><li><p>flushInterval属性：刷新间隔，单位毫秒 </p><p>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新 </p></li><li><p>size属性：引用数目，正整数 </p><p>代表缓存最多可以存储多少个对象，太大容易导致内存溢出 </p></li><li><p>readOnly属性：只读，true&#x2F;false </p><p>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重要的性能优势。 </p><p>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。</p></li></ul><h3 id="缓存查询的顺序"><a href="#缓存查询的顺序" class="headerlink" title="缓存查询的顺序"></a>缓存查询的顺序</h3><p>①先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。 </p><p>②如果二级缓存没有查询到数据，再查询一级缓存 </p><p>③如果一级缓存也没有查询到数据，则查询数据库 </p><ul><li><strong>只有当SqlSession关闭之后，一级缓存中的数据才会写入二级缓存</strong></li></ul><hr><h2 id="MyBatis的逆向工程"><a href="#MyBatis的逆向工程" class="headerlink" title="MyBatis的逆向工程"></a>MyBatis的逆向工程</h2><ul><li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的。</li><li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：<ul><li>Java实体类 </li><li>Mapper接口 </li><li>Mapper映射文件</li></ul></li></ul><p>创建逆向工程的步骤：</p><p>①添加依赖和插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②创建MyBatis的核心配置文件</p><p>③创建逆向工程的配置文件 </p><p>​<strong>文件名必须是：generatorConfig.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple: 生成基本的CRUD</span></span><br><span class="line"><span class="comment">    MyBatis3: 生成带条件的CRUD</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm_crud?characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>rewriteBatchedStatements=true&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;ssm_crud.bean&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;ssm_crud.dao&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;tbl_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Employee&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;tbl_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Department&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>④执行maven工程中的插件generate目标</p><h3 id="QCB查询"><a href="#QCB查询" class="headerlink" title="QCB查询"></a>QCB查询</h3><p>带有Selective选择性的方法在传入的某个属性为null值的情况下，不会将对应字段值修改为null</p><p>而没有带Selective选择性的方法在传入的某个属性为null值的情况下，会将对应字段值修改为null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">            <span class="comment">//查询所有数据</span></span><br><span class="line">            List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">            System.out.println(emps);</span><br><span class="line">            <span class="comment">//根据条件查询</span></span><br><span class="line">            <span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line">        <span class="comment">////创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</span></span><br><span class="line">            example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;emp1&quot;</span>).andAgeGreaterThan(<span class="number">5</span>);</span><br><span class="line">            <span class="comment">//将之前添加的条件通过or拼接其他条件</span></span><br><span class="line">            example.or().andDidIsNotNull();</span><br><span class="line">            List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="line">            System.out.println(emps);</span><br><span class="line">            mapper.updateByPrimaryKeySelective(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">8</span>,<span class="string">&quot;test11&quot;</span>,<span class="number">20</span>,<span class="literal">null</span>,<span class="string">&quot;test11@g.com&quot;</span>,<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><ul><li>使用分页插件的前提：</li></ul><p>​①添加依赖</p><p>​②在mybatis的核心配置文件中配置插件</p><ul><li><p>使用MyBatis分页插件实现分页功能</p><p>①需要在查询功能之前开启分页</p><p>   PageHelper.startPage(int pageNum, int pageSize)</p><p>   <strong>pageNum：当前页的页码 pageSize：每页显示的条数</strong></p></li></ul><p>​②在查询功能之后获取相关信息</p><p>​  PageInfo pageInfo &#x3D; new PageInfo&lt;&gt;(List list, int navigatePages)</p><p>​  <strong>list：分页之后的数据 navigatePages：导航分页的页码数</strong></p><p>分页相关数据 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PageInfo&#123;</span><br><span class="line">pageNum=<span class="number">2</span>, pageSize=<span class="number">4</span>, size=<span class="number">3</span>, startRow=<span class="number">5</span>, </span><br><span class="line">endRow=<span class="number">7</span>, total=<span class="number">7</span>, pages=<span class="number">2</span>, </span><br><span class="line">list=Page&#123;count=<span class="literal">true</span>, pageNum=<span class="number">2</span>, pageSize=<span class="number">4</span>, startRow=<span class="number">4</span>, endRow=<span class="number">8</span>, </span><br><span class="line">total=<span class="number">7</span>, pages=<span class="number">2</span>, reasonable=<span class="literal">false</span>, pageSizeZero=<span class="literal">false</span>&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//当前页的数据</span></span><br><span class="line">[Emp&#123;eid=<span class="number">8</span>, empName=<span class="string">&#x27;test11&#x27;</span>, age=<span class="number">20</span>, sex=<span class="string">&#x27;女&#x27;</span>, email=<span class="string">&#x27;test11@g.com&#x27;</span>, did=<span class="number">3</span>&#125;, Emp&#123;eid=<span class="number">9</span>, empName=<span class="string">&#x27;1&#x27;</span>, age=<span class="number">1</span>, sex=<span class="string">&#x27;男&#x27;</span>, email=<span class="string">&#x27;test@qq.com&#x27;</span>, did=<span class="literal">null</span>&#125;, Emp&#123;eid=<span class="number">10</span>, empName=<span class="string">&#x27;2&#x27;</span>, age=<span class="number">2</span>, sex=<span class="string">&#x27;男&#x27;</span>, email=<span class="string">&#x27;test@qq.com&#x27;</span>, did=<span class="literal">null</span>&#125;], </span><br><span class="line"><span class="comment">//分页插件中封装的数据         </span></span><br><span class="line">prePage=<span class="number">1</span>, nextPage=<span class="number">0</span>, isFirstPage=<span class="literal">false</span>, isLastPage=<span class="literal">true</span>, </span><br><span class="line">hasPreviousPage=<span class="literal">true</span>, hasNextPage=<span class="literal">false</span>, navigatePages=<span class="number">5</span>, </span><br><span class="line">navigateFirstPage=<span class="number">1</span>, navigateLastPage=<span class="number">2</span>, navigatepageNums=[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>常用数据： </p><p>pageNum：当前页的页码 </p><p>pageSize：每页显示的条数 </p><p>size：当前页显示的真实条数 </p><p>total：总记录数 </p><p>pages：总页数 </p><p>prePage：上一页的页码 </p><p>nextPage：下一页的页码  </p><p> isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页 </p><p>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页 </p><p>navigatePages：导航分页的页码数 </p><p>navigatepageNums：导航分页的页码，[1,2,3,4,5]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2022/04/14/SpringMVC/"/>
      <url>/2022/04/14/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h2 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h2><h3 id="MVC的概念"><a href="#MVC的概念" class="headerlink" title="MVC的概念"></a>MVC的概念</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程：</p><p>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller</p><p>再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p><ul><li>SpringMVC 是 Spring 为<strong>表述层</strong>开发提供的一整套完备的解决方案。</li><li>三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet程序</li></ul><hr><h2 id="一个测试DEMO"><a href="#一个测试DEMO" class="headerlink" title="一个测试DEMO"></a>一个测试DEMO</h2><p>配置web.xml的两种方式</p><p>1.默认配置方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--  配置SpringMVC的前端控制器,对浏览器发送的请求进行统一的处理  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">       /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">       但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">       - jsp本质上就是一个servlet程序，.jsp请求路径由其相应的servlet程序进行处理</span></span><br><span class="line"><span class="comment">       - 如果不进行排除，则前端控制器也会对.jsp请求进行默认处理，一旦处理了.jsp的就不能正常显示</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.扩展配置方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置SpringMVC的前端控制器,对浏览器发送的请求进行统一的处理  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  配置SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  如果没有设置init-param标签，那么SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name&gt;标签中的昵称</span></span><br><span class="line"><span class="comment">       例如没有设置，则以下配置所对应SpringMVC的配置文件位于WEB-INF下web.xml中，文件名为DispatcherServlet-servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  将前端控制器DispatcherServlet的初始化时间提前到服务器启动时 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">       /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">       但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">       - jsp本质上就是一个servlet程序，.jsp请求路径由其相应的servlet程序进行处理</span></span><br><span class="line"><span class="comment">       - 如果不进行排除，则前端控制器也会对.jsp请求进行处理，一旦处理了.jsp的请求，就找不到相应的页面也就不能正常显示</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试请求转发"><a href="#测试请求转发" class="headerlink" title="测试请求转发"></a>测试请求转发</h3><p>在前端控制器中定义请求处理的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SpringMVC的控制器由一个POJO（普通的Java类）担任，</span></span><br><span class="line"><span class="comment">//因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理</span></span><br><span class="line"><span class="comment">//此时SpringMVC才能够识别控制器的存在</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"><span class="comment">//@RequestMapping注解的作用是将当前请求与控制器方法之间创建映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/target&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testTarget</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//返回视图名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建跳转页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用th:href标签渲染后，在@&#123;&#125;识别到里面属性值是绝对路径，就会自动此路径前面添加上下文路径，也就是工程路径&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/target&#125;&quot;</span>&gt;</span>点击跳转至目标页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>总结请求页面的过程： </p><p>①浏览器发送请求，若请求地址符合前端控制器的 url-pattern，该请求就会被前端控制器DispatcherServlet处理。 </p><p>②前端控制器会读取 SpringMVC 的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中 @RequestMapping 注解的 value 属性值进行匹配，</p><p>③若匹配成功，该注解所标识的控制器方法就是处理请求的方法。 </p><p>④处理请求的方法需要返回一个字符串类型的视图名称，</p><p>⑤该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过 Thymeleaf 对视图进行渲染，最终转发到视图所对应页面。</p></li></ul><hr><h2 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h2><p>作用：将当前请求与控制器方法之间创建映射关系</p><ul><li>必须保证请求地址与所有的控制器里面RequestMapping注解的value值是唯一匹配的，</li><li>也就是说一个控制器方法只能对应一个请求路径，不能会产生冲突</li></ul><h3 id="此注解的位置区别"><a href="#此注解的位置区别" class="headerlink" title="此注解的位置区别"></a>此注解的位置区别</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><ul><li>如果一个类和类中的方法都设置了@RequestMapping注解，在默认情况下要先访问初始信息，再访问具体信息</li><li>请求映射的地址多一层目录才能正常访问</li><li>可用于在多个模块中存在统一的请求参数，如order和user模块都有list参数，可用通过在类上添加@RequestMapping进行区分</li><li>则请求地址分别变为&#x2F;order&#x2F;list&#x2F;.. 、&#x2F;user&#x2F;list&#x2F;..</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="value属性"><a href="#value属性" class="headerlink" title="value属性"></a>value属性</h3><p>①value属性通过请求的请求地址匹配请求映射</p><p>②value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求，满足其中一个即可</p><p>③value属性必须设置，至少通过请求地址匹配请求映射</p><ul><li>第②点的总结就是：一个请求地址只能匹配一个控制器方法，而一个控制器方法可以去匹配多个请求地址</li><li>404-没有与任何一个@RequestMapping的value值匹配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/test1&quot;, &quot;/test2&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test1&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test2&#125;&quot;</span>&gt;</span>测试@RequesstMappsing的value属性--&gt;/test2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="method属性"><a href="#method属性" class="headerlink" title="method属性"></a>method属性</h3><p>①method属性通过请求的请求方式（get或post）匹配请求映射</p><p>②method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求，满足其中一个即可</p><ul><li>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</li><li>405-没有与任何一个@RequestMapping的method值匹配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此@RequestMapping的属性表示请求地址满足&quot;/test1&quot;,&quot;/test2&quot;其中即可，</span></span><br><span class="line">    <span class="comment">//但请求方式必须是get请求才可以匹配此控制器方法</span></span><br><span class="line">    <span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">            value = &#123;&quot;/test1&quot;,&quot;/test2&quot;&#125;,</span></span><br><span class="line"><span class="meta">            method = &#123;RequestMethod.GET&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">测试成功 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test1&#125;&quot;</span>&gt;</span>测试method的get方式提交<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test2&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>派生的其他注解</p><blockquote><p>SpringMVC中提供了@RequestMapping的派生注解</p><p>①处理get请求的映射–&gt;@GetMapping</p><p>②处理post请求的映射–&gt;@PostMapping</p><p>③处理put请求的映射–&gt;@PutMapping</p><p>④处理delete请求的映射–&gt;@DeleteMapping</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示请求地址为testGetMapping且请求方式必须是get才能匹配上</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/testGetMapping&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testGetMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="params属性"><a href="#params属性" class="headerlink" title="params属性"></a>params属性</h3><p>param是通过请求参数来进行匹配请求映射，<strong>params属性是要求必须全部满足才能实现匹配</strong></p><ul><li><p>400-没有满足任何一个@RequestMapping的全部params值</p></li><li><p>params &#x3D; {“!username”}  要求请求地址不能携带username参数</p></li><li><p>params &#x3D; {“username”,”password&#x3D;123”}  要求请求地址必须携带username参数且password参数必须是123</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试RequestMapping的params和headers属性</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/testParamsAndHeaders&quot;,</span></span><br><span class="line"><span class="meta">            params = &#123;&quot;!username&quot;&#125;)</span><span class="comment">//此处要求请求参数必须不能携带username的参数</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParamsAndHeaders</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="headers属性"><a href="#headers属性" class="headerlink" title="headers属性"></a>headers属性</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系，<strong>headers属性是要求必须全部满足才能实现匹配</strong></p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><ul><li>404-没有满足任何一个@RequestMapping的全部headers值</li></ul><h3 id="springMVC支持ant风格路径"><a href="#springMVC支持ant风格路径" class="headerlink" title="springMVC支持ant风格路径"></a>springMVC支持ant风格路径</h3><p>？：表示任意的单个字符 </p><p>*：表示任意的0个或多个字符 </p><p>**：表示任意的一层或多层目录 </p><p>注意：在使用**时，只能使用&#x2F;&#x2F;xxx的方式</p><h3 id="springMVC支持路径中的占位符"><a href="#springMVC支持路径中的占位符" class="headerlink" title="springMVC支持路径中的占位符"></a>springMVC支持路径中的占位符</h3><p>原始方式：&#x2F;deleteUser?id&#x3D;1 </p><p>restful方式：&#x2F;deleteUser&#x2F;1 </p><p>过程：SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中</p><p>​就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，</p><p>​在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testPath/1/username&#125;&quot;</span>&gt;</span>测试@RequestMapping注解中springMVC支持路径中的占位符<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试springMVC支持路径中的占位符</span></span><br><span class="line">    <span class="comment">//每一个要传的参数都要使用一个/&#123;&#125;占位符</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testPath/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testPath</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id,<span class="meta">@PathVariable(&quot;username&quot;)</span>String username)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span> + id + <span class="string">&quot;,username:&quot;</span> + username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h2><p>1.通过原生的ServletAPI获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line">    <span class="comment">//原生的servletAPI获取请求参数</span></span><br><span class="line">    <span class="comment">//形参位置的request表示当前请求</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span> + username + <span class="string">&quot;,password:&quot;</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.通过控制器方法的形参获取请求</p><p>当控制器方法的形参名字和请求参数名字相同的时候</p><p>当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testServletAPI(username=&#x27;admin&#x27;,password=123)&#125;&quot;</span>&gt;</span>测试使用控制器的形参获取请求参数<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line">    <span class="comment">//使用控制器的形参获取请求参数</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span> + username + <span class="string">&quot;,password:&quot;</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3.@RequestParam注解</p><ul><li>当请求参数的名字和控制器方法形参名字不同的时候可以采用此注解获取请求参数</li></ul><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><p>①若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String </p><p>parameter ‘xxx’ is not present；</p><p>②若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””空串时，则使用默认值为形参赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testParam&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user_name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;b&quot;</span>&gt;</span>b</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span>&gt;</span>c<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试使用控制器的形参获取请求参数&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line">    <span class="comment">//使用@RequestParam注解获取请求参数</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(</span></span><br><span class="line"><span class="params">            //required属性代表是否要传输value中的请求参数,默认为<span class="literal">true</span>，不传将报错</span></span><br><span class="line"><span class="params">            //而以下改成了required = <span class="literal">false</span>，就意味传不传也可以，不传默认赋值为<span class="literal">null</span></span></span><br><span class="line"><span class="params">            //defaultValue属性代表不传值或传的是空串将以属性默认值赋值，传值以传的属性值赋值</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;user_name&quot;, required = false, defaultValue = &quot;default&quot;)</span> String username,</span></span><br><span class="line"><span class="params">            String password,</span></span><br><span class="line"><span class="params">            String[] hobby,  </span></span><br><span class="line"><span class="params">        <span class="meta">@RequestHeader(value = &quot;defaultname&quot;, required = true, defaultValue = &quot;default&quot;)</span> String host,</span></span><br><span class="line"><span class="params">            <span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String JSESSIONID)</span>&#123;</span><br><span class="line">        <span class="comment">//若请求参数中出现多个同名的请求参数，可以再控制器方法的形参位置设置字符串类型或字符串数组接收此请求参数</span></span><br><span class="line">        <span class="comment">//若使用字符串类型的形参，最终结果为请求参数的每一个值之间使用逗号进行拼接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password+<span class="string">&quot;,hobby:&quot;</span>+ Arrays.toString(hobby));</span><br><span class="line">       <span class="comment">//hobby的值是 ---&gt; hobby：[a,b,c]</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 4、@RequestHeader</p><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><p> 5、@CookieValue</p><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><p>6.通过使用实体类接收请求参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testBean&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;使用实体类接收请求参数&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testBean&quot;)</span></span><br><span class="line">    <span class="comment">//使用实体类获取请求参数</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testBean</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//打印的结果是User&#123;id=null, username=&#x27;test&#x27;, password=&#x27;gyS52W6F3irsaEM&#x27;, age=12, sex=&#x27;男&#x27;, email=&#x27;123456@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>7.解决获取请求参数的乱码问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</li></ul><hr><h2 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h2><ul><li><strong>需要记住一点是：无论使用的哪一种方式共享数据，最终都会将视图名称和共享的域数据封装在一个ModelAndView对象中</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在执行控制器方法之前mv是null，执行完之后此mv对象的属性为视图名称和共享的域数据</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.applyDefaultViewName(processedRequest, mv);</span><br></pre></td></tr></table></figure><p>1.使用原生的ServletAPI向request域对象共享数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestServletAPI&#125;&quot;</span>&gt;</span>通过ServletAPI向request域中共享数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过原生的ServletAPI共享数据 </span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestServletAPI&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;RequestServletAPI&quot;</span>,<span class="string">&quot;RequestServletAPI&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.使用ModelAndView向request域对象共享数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用ModelAndView向request域对象共享数据</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line">    <span class="comment">//必须将ModelAndView对象作为返回值，这样才能被前端控制器所解析</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">//处理模型数据，即向request对象中共享数据</span></span><br><span class="line">        mav.addObject(<span class="string">&quot;RequestServletAPI&quot;</span>,<span class="string">&quot;test success&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置视图名称</span></span><br><span class="line">        mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3.使用Model向request域对象共享数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Model向request域对象共享数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;request&quot;</span>,<span class="string">&quot;test success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4.使用map向request域对象共享数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用map向request域对象共享数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String,Object&gt; map)</span>&#123;</span><br><span class="line">        map.put(<span class="string">&quot;request&quot;</span>,<span class="string">&quot;test success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>5.使用ModelMap向request域对象共享数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用ModelMap向request域对象共享数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">        modelMap.addAttribute(<span class="string">&quot;request&quot;</span>,<span class="string">&quot;test success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>6.Model、Model、Map三者的相关</p><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类的对象实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Model</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendedModelMap</span> <span class="keyword">extends</span> <span class="title class_">ModelMap</span> <span class="keyword">implements</span> <span class="title class_">Model</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BindingAwareModelMap</span> <span class="keyword">extends</span> <span class="title class_">ExtendedModelMap</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/04/14/LQL82R.png" alt="继承与实现图示"></p><p>7.向session域共享数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向session域共享数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;testSession&quot;</span>,<span class="string">&quot;hello session&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>8.向application域共享数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向application域共享数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;servletContext&quot;</span>,<span class="string">&quot;hello Application&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>SpringMVC中的视图是View接口，其作用是渲染数据，将模型Model中的数据展示给用户。</p><ul><li><p>SpringMVC视图默认有转发视图(InternalResourceView)和重定向视图(RedirectView)</p></li><li><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p></li><li><p>若视图技术为Thymeleaf，且SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView视图</p></li></ul><h3 id="ThymeleafView"><a href="#ThymeleafView" class="headerlink" title="ThymeleafView"></a>ThymeleafView</h3><ul><li><strong>当视图名称没有任何前缀的时候才会被视图解析器所解析，从而拼接前后缀创建thymeleafView视图</strong>，最后通过转发的方式实现跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testThymeleafView&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testThymeleafView</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/04/14/LQLNqK.png" alt="thymeleafView视图底层创建"></p><h3 id="转发视图"><a href="#转发视图" class="headerlink" title="转发视图"></a>转发视图</h3><ul><li><p><strong>当视图名称以”forward:”为前缀时，实际上是创建了两次视图</strong>，先创建InternalResourceView视图，</p><p>此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，</p><p>而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p></li><li><p>SpringMVC中默认的转发视图是InternalResourceView</p></li></ul><p>补充点：在有thymeleaf渲染的html页面不能直接通过具体网页名字进行访问，必须经过thymeleaf视图解析器解析才能访问</p><p>​因为html页面都是位于WEB-INF文件夹，这个文件夹对外进行了保护，不能直接访问，只能通过请求转发进行访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/testThymeleafView&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重定向视图"><a href="#重定向视图" class="headerlink" title="重定向视图"></a>重定向视图</h3><ul><li><p><strong>当视图名称以”redirect:”为前缀时，实际上是创建了两次视图</strong>，先创建RedirectView视图，</p><p>此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，</p><p>而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p></li><li><p>SpringMVC中默认的重定向视图是RedirectView</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/testThymeleafView&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="视图控制器"><a href="#视图控制器" class="headerlink" title="视图控制器"></a>视图控制器</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">        view-name：设置请求地址对应的视图名称</span></span><br><span class="line"><span class="comment">          注：当在SpringMVC的配置文件中添加上了视图控制器后</span></span><br><span class="line"><span class="comment">          将会导致控制器中的所有请求映射全部失效，</span></span><br><span class="line"><span class="comment">          必须在下方开启MVC注解驱动才能保证正常的请求映射</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   开启MVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="RESTful风格"><a href="#RESTful风格" class="headerlink" title="RESTful风格"></a>RESTful风格</h2><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><p>表现层：前台html等页面和控制层 </p><p>资源：部署到服务器上工程的文件内容</p><p>资源状态：资源的表现形式，如jsp、html等</p><p>状态转移：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><ul><li><strong>核心就是一句话：相同的请求url路径根据不同的请求方式来实现不同的操作</strong></li></ul><h3 id="RESTful的实现"><a href="#RESTful的实现" class="headerlink" title="RESTful的实现"></a>RESTful的实现</h3><p>RESTful的实现就是在Http协议中，以四个操作动词区分不同的资源操作方式</p><p>①增：POST 用来新建资源</p><p>②删：DELETE 用来删除资源</p><p>③改：PUT 用来更新资源</p><p>④查：GET 用来获取资源</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id&#x3D;1</td><td>user&#x2F;1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id&#x3D;1</td><td>user&#x2F;1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h3 id="HiddenHttpMethodFilter"><a href="#HiddenHttpMethodFilter" class="headerlink" title="HiddenHttpMethodFilter"></a>HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 可以<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><ul><li><strong>注：但必须要满足两个两个条件</strong><ul><li>第一个条件是：提交方式必须是post</li><li>第二个条件是：必须携带一个 **name&#x3D;”_method“，value&#x3D;”当前想要提交的请求方式“ **的隐藏域</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除用户&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在web.xml中配置HiddenHttpMethodFilter</p><ul><li>在所有注册的Filter过滤器中，用于处理编码集的Filter过滤器必须在第一个<ul><li>原因是：<strong>在处理编码集的Filter过滤器执行之前获取过参数，那么此过滤器就不再有效</strong></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Restful案例"><a href="#Restful案例" class="headerlink" title="Restful案例"></a>Restful案例</h3><p>仅展示部分代码，详情请在SpringMVC04的maven工程下查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span> 15:40</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@user</span> hcxs1986</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.springframework.web.servlet.ModelAndView</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/employee&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">getAllEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        mav.setViewName(<span class="string">&quot;employee_list&quot;</span>);</span><br><span class="line">        Collection&lt;Employee&gt; empList = employeeDao.getAll();</span><br><span class="line">        mav.addObject(<span class="string">&quot;empList&quot;</span>,empList);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 删除指定用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span> 16:20</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@user</span> hcxs1986</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 要删除的用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteEmpById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id )</span>&#123;</span><br><span class="line">        employeeDao.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span> 16:33</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@user</span> hcxs1986</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee 添加的用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/employee&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        employeeDao.save(employee);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 实现更新回显的功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span> 18:00</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@user</span> hcxs1986</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 更新的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model 用于共享域数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id, Model model)</span>&#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;employee&quot;</span>,employee);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;updateEmp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 更新用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span> 18:03</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@user</span> hcxs1986</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee 更新的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/employee&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        employeeDao.save(employee);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="HttpMessageConverter"><a href="#HttpMessageConverter" class="headerlink" title="HttpMessageConverter"></a>HttpMessageConverter</h2><ul><li><p>概念：报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p></li><li><p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，ResponseEntity</p></li></ul><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><ul><li>用于在控制器方法的形参上</li></ul><p>用法：此注解可以获取请求体，需要在控制器方法设置<strong>一个形参</strong></p><p>​使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testRequestBody&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String  <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span>  String requestBody)</span>&#123;</span><br><span class="line">        System.out.println(requestBody);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="RequestEntity"><a href="#RequestEntity" class="headerlink" title="RequestEntity"></a>RequestEntity</h3><ul><li>用于在控制器方法的形参其类型上</li></ul><p>用法：RequestEntity封装请求报文的一种类型，<strong>需要在控制器方法的形参中设置该类型的形参</strong>，当前请求的请求报文就会赋值给该形参，</p><p>​可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testRequestEntity&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String  <span class="title function_">testRequestBody</span><span class="params">(RequestEntity&lt;String&gt;  requestEntity)</span>&#123;</span><br><span class="line">        <span class="comment">//requestEntity代表整个请求报文的信息</span></span><br><span class="line">        System.out.println(requestEntity.getHeaders());</span><br><span class="line">        System.out.println(requestEntity.getBody());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><ul><li>用于在控制器方法上</li></ul><p>作用：此注解用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/testResponseBody&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody()</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="RestController注解"><a href="#RestController注解" class="headerlink" title="@RestController注解"></a>@RestController注解</h3><p><strong>@RestController注解是springMVC提供的一个复合注解，此注解标识在控制器的类上</strong>，</p><p><strong>就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</strong></p><h3 id="ResponseEntity"><a href="#ResponseEntity" class="headerlink" title="ResponseEntity"></a>ResponseEntity</h3><ul><li>用于在控制器方法的返回值类型</li></ul><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><h3 id="SpringMVC处理json"><a href="#SpringMVC处理json" class="headerlink" title="SpringMVC处理json"></a>SpringMVC处理json</h3><p>步骤：</p><p>①导入jackson的依赖</p><p>②在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：</p><p>​MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p><p>③在处理器方法上使用@ResponseBody注解进行标识</p><p>④将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p><hr><h2 id="SpingMVC处理文件的上传和下载"><a href="#SpingMVC处理文件的上传和下载" class="headerlink" title="SpingMVC处理文件的上传和下载"></a>SpingMVC处理文件的上传和下载</h2><p>1.文件的下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">        <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/蓝屏.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//创建输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">        <span class="comment">//创建字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">        <span class="comment">//将流读到字节数组中</span></span><br><span class="line">        is.read(bytes);</span><br><span class="line">        <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">        headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(<span class="string">&quot;蓝屏.jpg&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="comment">//设置响应状态码</span></span><br><span class="line">        <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">        <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">        ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">        <span class="comment">//关闭输入流</span></span><br><span class="line">        is.close();</span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.文件的上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/testUp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testUp</span><span class="params">(MultipartFile photo,HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">        <span class="comment">//获取上传的文件的后缀名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffixName</span> <span class="operator">=</span> filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//将UUID作为文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//将uuid和后缀名拼接后的结果作为最终的文件名</span></span><br><span class="line">        filename = uuid + suffixName;</span><br><span class="line">        <span class="comment">//通过ServletContext获取服务器的photo目录</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">        <span class="comment">//getRealPath()该方法用于获取虚拟路径的真实路径。</span></span><br><span class="line">        <span class="comment">//在这里表示获取文件上传存放的目录，即photo文件夹在真实的服务器上的位置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">        <span class="comment">//判断photoPath所对应路径是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + filename;</span><br><span class="line">        photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><ul><li>拦截器用于拦截控制器方法的执行</li></ul><p>SpringMVC中的拦截器需要实现HandlerInterceptor，因此必须在SPringMVC的配置文件中进行配置</p><p>配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;bean class=&quot;mvc.intercepts.Intercept1&quot;/&gt;  会拦截dispatchServlet的所有的请求--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;ref bean=&quot;intercept1&quot;&gt;&lt;/ref&gt;  会拦截dispatchServlet的所有的请求--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    此拦截其表示拦截上下文路径也就是工程路径下任何请求，但把首页的请求排除在外，不会进行拦截    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;intercept1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Intercept1</span>  <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Intercept1--&gt;preHandle&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//返回值为true表示放行，返回值为false表示拦截</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Intercept1--&gt;postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Intercept1--&gt;afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拦截器的抽象方法"><a href="#拦截器的抽象方法" class="headerlink" title="拦截器的抽象方法"></a>拦截器的抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，</p><p>​  返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕render()方法之后执行afterCompletion()</p><h3 id="多个拦截器的先后顺序"><a href="#多个拦截器的先后顺序" class="headerlink" title="多个拦截器的先后顺序"></a>多个拦截器的先后顺序</h3><ul><li>情况一：a&gt;若每个拦截器的preHandle()都返回true</li></ul><p>​此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>​<strong>preHandle()会按照拦截器在配置中的正序执行，</strong></p><p>​<strong>而postHandle()和afterComplation()会按照拦截器在配置中的反序执行</strong></p><ul><li>情况二：b&gt;若某个拦截器的preHandle()返回了false</li></ul><p>​<strong>preHandle()返回false和它之前的拦截器的preHandle()都会执行，</strong></p><p>​<strong>postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</strong></p><p><img src="https://s1.ax1x.com/2022/04/14/LQLDGd.png" alt="处理器执行链"></p><p><strong>HandlerExecutionChain处理器执行链，其中的数据包含了当前的控制器方法、拦截器集合以及拦截器的索引</strong></p><hr><h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h2><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver(处理常见的在控制器方法执行过程中出现的异常)</p><p>​  SimpleMappingExceptionResolver(处理自定义的异常)</p><h3 id="自定义异常处理器"><a href="#自定义异常处理器" class="headerlink" title="自定义异常处理器"></a>自定义异常处理器</h3><ul><li>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver</li></ul><p>1.基于配置方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置异常处理</span></span><br><span class="line"><span class="comment">       prop标签中key是异常的全类名，prop标签的内容是出现异常即将跳转的视图名称</span></span><br><span class="line"><span class="comment">       无任何前后缀创建ThymeLeaf视图</span></span><br><span class="line"><span class="comment">       有前缀的名称将创建InternalResourceView视图</span></span><br><span class="line"><span class="comment">       有后缀的名称将创建RedirectView视图</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   设置将异常信息共享在请求域中的键：</span></span><br><span class="line"><span class="comment">        在异常页面就可以从request域中获取异常信息</span></span><br><span class="line"><span class="comment">        其中，下方标签的value为键，所出现的异常信息为值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.基于注解方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">//此注解也具备了将类标识为组件的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 当出现了value内的异常之一，就会将下方的方法作为新的控制器方法进行执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/12</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span> 23:02</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@user</span> hcxs1986</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;ArithmeticException.class,NullPointerException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Exception ex, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>,ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="注解配置SpringMVC"><a href="#注解配置SpringMVC" class="headerlink" title="注解配置SpringMVC"></a>注解配置SpringMVC</h2><ul><li>可以使用配置类和注解代替web.xml和springMVC的配置文件</li></ul><p>实现的过程是：</p><p>①基于Servlet3.0环境，tomcat服务器查找实现  javax.servlet.ServletContainerInitializer接口的类</p><p>②SpringServletContainerInitializer此类 实现了 上述接口</p><p>③SpringServletContainerInitializer此类 查找实现 WebApplicationInitializer接口的类</p><p>④AbstractAnnotationConfigDispatcherServletInitializer 实现了 WebApplicationInitializer接口</p><p>⑤若自定义类继承了 AbstractAnnotationConfigDispatcherServletInitializer类 则会自动使用它配置Servlet上下文。</p><p>1.初始化类代替web.xml</p><ul><li>web.xml作用是告诉servlet容器(tomcat服务器)要部署哪些servlet，以及servlet与URL的映射关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//web工程的初始化类，用来代替web.xml</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/12</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span> 23:28</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@user</span> hcxs1986</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Class&lt;?&gt;[]</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 指定springMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/12</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span> 23:29</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@user</span> hcxs1986</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Class&lt;?&gt;[]</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 指定DispatchServlet的映射规则，即url-patten</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/12</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span> 23:30</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@user</span> hcxs1986</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String[]</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 注册过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/12</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span> 23:38</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@user</span> hcxs1986</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> javax.servlet.Filter[]</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">characterEncodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        characterEncodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        characterEncodingFilter.setForceResponseEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;characterEncodingFilter,hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建SpringConfig配置类，代替spring的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建WebConfig配置类，代替SpringMVC.xml</p><ul><li><p><strong>注：①使用@Bean修饰的方法，其返回值将作为IOC容器中的一个bean实例</strong></p><p>​<strong>②使用@Bean修饰的方法中形参列表如果有参数，则会在IOC容器中寻找同类型的bean，采用自动装配为其赋值</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于代替springMVC的配置文件</span></span><br><span class="line"><span class="comment">//1.开启组件扫描 2.视图解析器 3.视图控制器 4.静态资源处理的default-Servlet 5.mvc注解驱动 6.文件上传解析器 7.过滤器 8.异常处理器</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//将当前类标识为一个配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;mvc.controller&quot;)</span> <span class="comment">//1.开启组件扫描</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">//5.mvc注解驱动</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 配置静态资源处理的default-Servlet-handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/13</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configurer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();<span class="comment">//此方法可以开启静态资源处理的默认处理器default-Servlet-handler</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 配置拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/13</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">TestIntercept</span> <span class="variable">testIntercept</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestIntercept</span>();</span><br><span class="line">        registry.addInterceptor(testIntercept).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 配置视图控制器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/13</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/test&quot;</span>).setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 配置文件上传解析器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/13</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.springframework.web.multipart.MultipartResolver</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CommonsMultipartResolver</span> <span class="variable">commonsMultipartResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">        <span class="keyword">return</span> commonsMultipartResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 配置异常处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/4/13</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resolvers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureHandlerExceptionResolvers</span><span class="params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMappingExceptionResolver</span> <span class="variable">exceptionResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMappingExceptionResolver</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;java.lang.ArithmeticException&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        exceptionResolver.setExceptionMappings(properties);</span><br><span class="line">        exceptionResolver.setExceptionAttribute(<span class="string">&quot;ex&quot;</span>);</span><br><span class="line">        resolvers.add(exceptionResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置视图解析器</span></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h3><ul><li>DispatcherServlet：<strong>前端控制器</strong>，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，由框架提供</li></ul><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p><ul><li><p>Handler：<strong>处理器</strong>，需要自己提供</p><p>处理器也就是控制器，即需要根据相应业务生成的xxxControler类(控制层组件)</p></li></ul><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，由框架提供</li></ul><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p><ul><li>ViewResolver：<strong>视图解析器</strong>，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p><ul><li>View：<strong>视图</strong></li></ul><p>作用：将模型数据通过页面展示给用户</p><h3 id="前端控制器的初始化过程"><a href="#前端控制器的初始化过程" class="headerlink" title="前端控制器的初始化过程"></a>前端控制器的初始化过程</h3><ul><li>DispatcherServlet 实际上依然是一个 Servlet程序，因此也会遵循Servlet程序的生命周期规则</li><li>调用的过程虽然是在不同的类中进行调用，但真正通过继承或实现放在同一个类，实际上是在同一个类中查看方法的调用</li><li>创建的ioc容器如果是java工程则创建applicationContext，如果是web工程则创建webapplicationContext</li></ul><p><img src="https://s1.ax1x.com/2022/04/14/LQXZ7T.png" alt="初始化过程"></p><p>①初始化WebApplicationContext</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><ul><li><p><strong>WebApplicationContext是专门为web应用准备的,</strong></p><p><strong>它允许从相对于web根目录的路径中装载配置文件完成初始化工作，</strong></p><p>从WebApplicationContext中可以获得ServletContext的引用，</p><p>整个Web应用上下文对象将作为属性放置在ServletContext中。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span></span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        <span class="comment">//寻找WebApplicationContext是否存在</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②创建WebApplicationContext</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><ul><li>关于整合的个人理解<ul><li>各管各的，所以需要整合。共用一个，不需要整合。</li><li>整合&#x3D;需要进行整合，不整合&#x3D;不需要进行整合</li><li>整合之后各管各的，那么需要创建两个IOC容器，springMVC的IOC是子容器，spring的IOC是父容器</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(</span><br><span class="line">            <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">            <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在ApplicationContext接口中有一个子接口ConfigurableWebApplicationContext</span></span><br><span class="line">    <span class="comment">//在ApplicationContext持有一个ConfigurableWebApplicationContext的ioc容器</span></span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span></span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③DispatcherServlet初始化策略</p><p>FrameworkServlet创建WebApplicationContext后，刷新容器，</p><p>调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，</p><p>调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initStrategies</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端控制器调用组件处理请求"><a href="#前端控制器调用组件处理请求" class="headerlink" title="前端控制器调用组件处理请求"></a>前端控制器调用组件处理请求</h3><p>①processRequest()</p><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">failureCause</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">previousLocaleContext</span> <span class="operator">=</span> LocaleContextHolder.getLocaleContext();</span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">localeContext</span> <span class="operator">=</span> buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">previousAttributes</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> <span class="title class_">RequestBindingInterceptor</span>());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②doService()</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.flashMapManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">FlashMap</span> <span class="variable">inputFlashMap</span> <span class="operator">=</span> <span class="built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> <span class="title class_">FlashMap</span>());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="built_in">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">RequestPath</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="literal">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③doDispatch()</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">           <span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④processDispatchResult()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">errorView</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> (mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler() : <span class="literal">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h3><p>1.用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p><p>2.DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p><p>第一种情况：不存在</p><p>①再判断是否配置了mvc:default-servlet-handler</p><p>②如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p>③如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p><p>第二种情况：存在则执行下面的流程</p><p>3.根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），</p><p>​最后以HandlerExecutionChain执行链对象的形式返回。</p><p>4.DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p><p>5.如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p><p>6.提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。</p><p>​在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p><p>① HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>②数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>③数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>④ 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><p>7.Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p><p>8.此时将开始执行拦截器的postHandle(…)方法【逆向】。</p><p>9.根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，</p><p>​则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p><p>10.渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p><p>11.将渲染结果返回给客户端。</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThymeLeaf、VUE、Axios</title>
      <link href="/2022/04/08/JavaWebNew/"/>
      <url>/2022/04/08/JavaWebNew/</url>
      
        <content type="html"><![CDATA[<h2 id="ThymeLeaf"><a href="#ThymeLeaf" class="headerlink" title="ThymeLeaf"></a>ThymeLeaf</h2><ul><li>在html页面上加载java内存中的数据的过程称为渲染(render)。</li></ul><p>概念：thymeleaf是用于实现视图渲染的技术        </p><p>实现步骤</p><p>①添加thymeleaf包</p><p>②新建ViewBaseServlet类(名字不是固定的，可以随便取得)继承HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewBaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建Thymeleaf解析器对象</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(servletContext);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.给解析器对象设置参数</span></span><br><span class="line">        <span class="comment">// ①HTML是默认模式，明确设置是为了代码更容易理解</span></span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ②设置前缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">viewPrefix</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;view-prefix&quot;</span>);</span><br><span class="line"></span><br><span class="line">        templateResolver.setPrefix(viewPrefix);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ③设置后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">viewSuffix</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;view-suffix&quot;</span>);</span><br><span class="line"></span><br><span class="line">        templateResolver.setSuffix(viewSuffix);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ④设置缓存过期时间（毫秒）</span></span><br><span class="line">        templateResolver.setCacheTTLMs(<span class="number">60000L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⑤设置是否缓存</span></span><br><span class="line">        templateResolver.setCacheable(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ⑥设置服务器端编码方式</span></span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.创建模板引擎对象</span></span><br><span class="line">        templateEngine = <span class="keyword">new</span> <span class="title class_">TemplateEngine</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.给模板引擎对象设置模板解析器</span></span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processTemplate</span><span class="params">(String templateName, HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.设置响应体内容类型和字符集</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建WebContext对象</span></span><br><span class="line">        <span class="type">WebContext</span> <span class="variable">webContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebContext</span>(req, resp, getServletContext());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.处理模板数据</span></span><br><span class="line">        templateEngine.process(templateName, webContext, resp.getWriter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③在web.xml文件中添加配置</p><ul><li><p>上述类中的processTemplate()方法获取了前缀、后缀的值</p></li><li><p>配置前缀 view-prefix</p></li><li><p>配置后缀 view-suffix</p></li></ul><p>在xml中配置上下文参数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在上下文参数中配置视图前缀和视图后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-prefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-suffix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>.html<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>④将实际上执行方法的servlet继承ViewBaseServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitServlet</span> <span class="keyword">extends</span> <span class="title class_">ViewBaseServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//调用FruitDao实现类对象 查询业务</span></span><br><span class="line">        <span class="type">FruitDao</span> <span class="variable">fruitDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FruitDaoImpl</span>();</span><br><span class="line">        List&lt;Fruit&gt; fruitList = fruitDao.getFruitList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把查询的对象集合保存到session域中</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;fruitList&quot;</span>,fruitList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此处的视图名称是index，  thymeleaf会将这个逻辑视图名称对应到 物理视图名称上去</span></span><br><span class="line">        <span class="comment">//逻辑视图 index</span></span><br><span class="line">        <span class="comment">//物理视图名称 view-prefix + 逻辑视图名称 + view-suffix</span></span><br><span class="line">        <span class="comment">//也就是 /index.html</span></span><br><span class="line">        <span class="comment">//相当于把原来的重定向连接进行了拼接，只不过重定向由resp做的，在这里是由thymeLeaf实现</span></span><br><span class="line">        <span class="built_in">super</span>.processTemplate(<span class="string">&quot;index&quot;</span>,req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2>{{}} - 相当于innerText<p>v-bind:attr 绑定属性值。例如，v-bind:value - 绑定value值，可以简写：    :value</p><p>v-model 双向绑定。例如，v-model:value   , 简写  v-model</p><p>v-if , v-else , v-show</p><p>v-if和v-else之间不能有其他的节点</p><p>v-show是通过样式表display来控制节点是否显示</p><p>v-for 迭代，v-for&#x3D;{fruit in fruitList}</p><p>v-on 绑定事件，例如，v-on:click&#x3D;”test”,可以简写了@click&#x3D;“test”</p><p>其他：</p><ul><li>trim:去除首尾空格 , split() , join()</li><li>watch表示侦听属性</li><li>生命周期</li></ul><h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p>axios是Ajax的一个框架，简化Ajax的操作</p><table><thead><tr><th align="left">属性名</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">config</td><td align="left">调用axios(config对象)方法时传入的JSON对象</td></tr><tr><td align="left">data</td><td align="left">服务器端返回的响应体数据</td></tr><tr><td align="left">headers</td><td align="left">响应消息头</td></tr><tr><td align="left">request</td><td align="left">原生JavaScript执行Ajax操作时使用的XMLHttpRequest</td></tr><tr><td align="left">status</td><td align="left">响应状态码</td></tr><tr><td align="left">statusText</td><td align="left">响应状态码的说明文本</td></tr></tbody></table><p>axios实现AJax的操作：</p><p>在引入axios的js文件后</p><ul><li><p>基本格式： axios().then().catch()</p><p>​①发送普通参数axios内为method、url、params</p><p>​②发送json格式数据axios内method、url、data</p></li><li><p>在axios的异步请求中</p><p>①当method&#x3D;post的时候，可以选择使用data或者param</p><ul><li><p>使用param的情况</p><p>若使用<strong>Map</strong>接收参数，必须使用 <strong>@RequestParam 修饰</strong>。</p><p>但是如果想传<strong>list类型的数据</strong>，需要使用单独的方法处理。</p></li><li><p>使用data的情况</p><p>必须使用<strong>一个实体类</strong>接收参数，而且需要添加注解 @RequestBody 进行修饰。</p></li></ul><p>②当method&#x3D;get的时候，只能使用param，原因是get中没有data方式</p></li></ul><p>1.客户端向服务器端异步发送普通参数值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例 --&gt;</span></span><br><span class="line">      axios(&#123;</span><br><span class="line">        method:&quot;POST&quot;,</span><br><span class="line">        url:&quot;....&quot;,</span><br><span class="line">        params:&#123;</span><br><span class="line">            uname:&quot;lina&quot;,</span><br><span class="line">            pwd:&quot;ok&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(function(value)&#123;&#125;)         <span class="comment">&lt;!--成功响应时执行的回调        value.data可以获取到服务器响应内容 --&gt;</span></span><br><span class="line">      .catch(function(reason)&#123;&#125;);       <span class="comment">&lt;!--有异常时执行的回调         reason.response.data可以获取到响应的内容 --&gt;</span></span><br><span class="line">                                                     <span class="comment">&lt;!--reason.message / reason.stack 可以查看错误的信息 --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/04/08/LpghaF.png" alt="axios程序接收到的响应对象结构"></p><p>2.客户端向服务器发送JSON格式的数据</p><p>前端vue+axios代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;methods&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;requestBodyJSON&quot;</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">axios</span>(&#123;</span><br><span class="line">            <span class="string">&quot;method&quot;</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>:<span class="string">&quot;/demo/AjaxServlet?method=requestBodyJSON&quot;</span>,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;stuId&quot;</span>: <span class="number">55</span>,</span><br><span class="line">                <span class="string">&quot;stuName&quot;</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">                <span class="string">&quot;subjectList&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;subjectName&quot;</span>: <span class="string">&quot;java&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;subjectScore&quot;</span>: <span class="number">50.55</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;subjectName&quot;</span>: <span class="string">&quot;php&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;subjectScore&quot;</span>: <span class="number">30.26</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&quot;teacherMap&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;one&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;teacherName&quot;</span>:<span class="string">&quot;tom&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;tearcherAge&quot;</span>:<span class="number">23</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&quot;two&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;teacherName&quot;</span>:<span class="string">&quot;jerry&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;tearcherAge&quot;</span>:<span class="number">31</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端服务器代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">requestBodyJSON</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.由于请求体数据有可能很大，所以Servlet标准在设计API的时候要求我们通过输入流来读取</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> request.getReader();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.创建StringBuilder对象来累加存储从请求体中读取到的每一行</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.声明临时变量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">bufferStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.循环读取</span></span><br><span class="line">    <span class="keyword">while</span>((bufferStr = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        builder.append(bufferStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.关闭流</span></span><br><span class="line">    reader.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.累加的结果就是整个请求体</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">requestBody</span> <span class="operator">=</span> builder.toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.创建Gson对象用于解析JSON字符串</span></span><br><span class="line">    <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8.将JSON字符串还原为Java对象</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> gson.fromJson(requestBody, Student.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;student = &quot;</span> + student);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody = &quot;</span> + requestBody);</span><br><span class="line"></span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;服务器端返回普通文本字符串作为响应&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThymeLeaf </tag>
            
            <tag> Vue </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2022/04/08/Spring/"/>
      <url>/2022/04/08/Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h2><p><strong>Spring是轻量级的开源的JavaEE框架</strong>，可以解决企业应用开发的复杂性</p><p>Spring 有两个核心部分：IOC 和 Aop</p><p>1.IOC：控制反转，把创建对象过程交给Spring进行管理</p><p>2.Aop：面向切面，不修改源代码进行功能增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入门案例</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.加载spring配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取配置创建的对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>概念：IOC(Inversion Of Control)  控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理</p><p>作用：可以降低耦合度</p><p>底层原理：xml解析、工厂模式、反射</p><ul><li>IoC是一种<strong>设计思想</strong> </li><li><strong>IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value）,Map 中存放的是各种对象。</strong></li></ul><h3 id="IOC-接口"><a href="#IOC-接口" class="headerlink" title="IOC(接口)"></a>IOC(接口)</h3><p>1.IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p><p>2.Spring提供IOC容器实现的两种方式:(两个接口)</p><p>①BeanFactory：Spring内部使用接口，一般开发不使用</p><p>特点：在加载配置文件时不会同时创建对象，仅在获取或使用对象时才会创建对象</p><p>②<strong>ApplicationContext：BeanFactory接口的子接口，功能更多，开发通常使用这个接口</strong></p><p>特点：在加载配置文件时就同时创建对象</p><p>ApplicationContext的实现类：</p><p><img src="https://s1.ax1x.com/2022/04/08/Lpcklt.png" alt="实现类"></p><h3 id="Bean管理"><a href="#Bean管理" class="headerlink" title="Bean管理"></a>Bean管理</h3><ul><li>bean管理是指两个操作，即<strong>Spring创建对象，Spring注入属性</strong></li></ul><p>bean管理操作的两种方式：</p><h4 id="基于xml配置文件实现"><a href="#基于xml配置文件实现" class="headerlink" title="基于xml配置文件实现"></a>基于xml配置文件实现</h4><p>1.实现方式</p><p>①基于xml方式创建对象</p><p>在spring配置文件中使用bean标签，标签里面添加对应属性即可</p><ul><li>注意一点：创建对象时默认执行的是无参构造器方法，缺少无参构造器将报错</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置User对象创建  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：唯一标识  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- class属性：类的全路径(包类路径) --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②基于xml方式注入属性</p><p>DI(Dependency Injection) 依赖注入就是注入属性</p><p>方式一：set方法注入 必须先创建对象后才能调用set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="comment">//创建属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建相应的set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;=&quot;</span> + author);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testBook</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.加载spring配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取配置创建的对象</span></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line">        book.test();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>spring文件配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.配置Book对象创建  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.Book&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    2.set 方法注入属性--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用property完成属性注入</span></span><br><span class="line"><span class="comment">           name属性代表类里面属性的名称</span></span><br><span class="line"><span class="comment">           value属性代表想要向属性注入的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：有参构造注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="comment">//创建属性</span></span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">(String orderId, String orderName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.orderName = orderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(orderId + <span class="string">&quot;=&quot;</span> + orderName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.加载spring配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取配置创建的对象</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;order&quot;</span>, Order.class);</span><br><span class="line">        order.test();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>spring文件配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.配置Order对象创建  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;order&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.有参构造方法注入属性</span></span><br><span class="line"><span class="comment">          使用constructor-arg完成属性注入</span></span><br><span class="line"><span class="comment">           name属性代表类里面属性的名称</span></span><br><span class="line"><span class="comment">           value属性代表想要向属性注入的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;orderId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;orderName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>2.xml注入其他类型的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   设置某个属性为空值     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  设置某个属性包含特殊值</span></span><br><span class="line"><span class="comment">              1.把《》用转义字符表示</span></span><br><span class="line"><span class="comment">              2.把特殊符号内容写到CDATA中</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;property name=&quot;address&quot; value=&quot;&amp;lt;&amp;lt;广东&amp;gt;&amp;gt;&quot;&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;广东&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   注入属性-外部bean     --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1 service 和 dao 对象创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.service.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入 userDao 对象</span></span><br><span class="line"><span class="comment">        name 属性：类里面属性名称</span></span><br><span class="line"><span class="comment">        ref 属性：创建 userDao 对象 bean 标签 id 值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userdaoimpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userdaoimpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  注入属性-内部bean  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  设置普通属性      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    设置对象属性    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dept1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  级联赋值  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  设置普通属性      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--    设置对象属性    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dept2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.bean.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.xml注入集合属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  1.创建Student配置对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collecttype.Student&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   2.使用property标签进行属性注入     --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   数组类型属性注入     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;course&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span> java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span> C++<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span> JS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--   list集合类型属性注入     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>s2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>s3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--   map集合类型属性注入     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;t1key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t1value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;t2key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t2value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--   set集合类型属性注入     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   list集合类型属性注入,值是对象     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;coures1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;coures2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  创建多个course对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;coures1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collecttype.Course&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c++&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;coures2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collecttype.Course&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 将重复的配置提取成公共部分，便于调用   --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.提取list集合类型属性注入   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;booklist&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> &gt;</span>test1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> &gt;</span>test2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span> &gt;</span>test3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 2.提取list集合类型属性注入使用   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collecttype.Book&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;booklist&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h4><p><strong>此处的FactoryBean与最上面的BeanFactory并不一样，FactoryBean是一个接口，而BeanFactory是spring内置的工厂bean</strong></p><p>Spring 有两种类型 bean：</p><p>①普通 bean：在配置文件中定义 bean 类型就是返回类型</p><p>②工厂 bean（FactoryBean）：在配置文件定义 bean 类型可以和返回类型不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义返回的bean类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Course&gt;&#123;</span><br><span class="line">    <span class="comment">//定义返回bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Course <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">        course.setClassName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h4><p><strong>作用域：在 Spring 里面，设置创建 bean 实例是单实例还是多实例</strong></p><ul><li><strong>在 Spring 里面，默认情况下，bean 是单实例对象</strong></li></ul><p>1.设置单实例还是多实例的方法</p><p>①在 spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例 </p><p>②scope 属性值 第一个值 默认值，singleton，表示是单实例对象 第二个值 prototype，表示是多实例对象</p><p>2.singleton 和 prototype 区别</p><p>① singleton 单实例，prototype 多实例 </p><p>② scope 值是 singleton ，加载 spring 配置文件时候就会创建单实例对象 </p><p>​ scope 值是 prototype，不是在加载 spring 配置文件时候创建 对象，在调用 getBean 方法时候创建多实例对象</p><h4 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h4><p>1.生命周期：对象创建到对象销毁的过程</p><p>2、bean 生命周期 </p><p>①通过构造器创建 bean 实例（无参数构造） </p><p>②为 bean 的属性设置值和对其他 bean 引用（调用 set 方法） </p><p>③调用 bean 的初始化的方法（需要进行配置初始化的方法） </p><p>④bean 可以使用了（对象获取到了） </p><p>⑤当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line"> <span class="comment">//无参数构造</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第一步 执行无参数构造创建 bean 实例&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">private</span> String oname;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOname</span><span class="params">(String oname)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.oname = oname;</span><br><span class="line"> System.out.println(<span class="string">&quot;第二步 调用 set 方法设置属性值&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建执行的初始化的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第三步 执行初始化的方法&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建执行的销毁的方法</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;第五步 执行销毁的方法&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean3</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// ApplicationContext context =</span></span><br><span class="line"><span class="comment">// new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);</span></span><br><span class="line"> <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean4.xml&quot;</span>);</span><br><span class="line"> <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line"> System.out.println(<span class="string">&quot;第四步 获取创建 bean 实例对象&quot;</span>);</span><br><span class="line"> System.out.println(orders);</span><br><span class="line"> <span class="comment">//手动让 bean 实例销毁</span></span><br><span class="line"> context.close();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>执行的init初始化方法和销毁方法需要在spring的xml文件中进行配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Orders&quot;</span> <span class="attr">init</span><span class="attr">method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.bean 的后置处理器，bean 生命周期有七步</p><p>①通过构造器创建 bean 实例（无参数构造） </p><p>②为 bean 的属性设置值和对其他 bean 引用（调用 set 方法） </p><p>③把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization  </p><p>④调用 bean 的初始化的方法（需要进行配置初始化的方法） </p><p>⑤把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization </p><p>⑥bean 可以使用了（对象获取到了） </p><p>⑦当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）创建类，实现接口 BeanPostProcessor，创建后置处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPost</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> </span><br><span class="line"><span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> bean;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> </span><br><span class="line"><span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> bean;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--配置后置处理器--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;myBeanPost&quot;</span> class=<span class="string">&quot;com.atguigu.spring5.bean.MyBeanPost&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="xml自动装配"><a href="#xml自动装配" class="headerlink" title="xml自动装配"></a>xml自动装配</h4><ul><li>使用较少</li></ul><p>自动装配：根据指定装配规则（属性名称或属性类型），spring自动将匹配的属性值进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  实现自动装配</span></span><br><span class="line"><span class="comment">        bean标签autowire，配置自动装配</span></span><br><span class="line"><span class="comment">        autowire属性常用两个值：</span></span><br><span class="line"><span class="comment">        byName根据属性名称注入，注入值得bean的id值和类属性名称一样</span></span><br><span class="line"><span class="comment">        byType根据属性类型注入</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置对象的创建   --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;emp&quot; class=&quot;autowire.Emp&quot; autowire=&quot;byName&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="引入外部属性"><a href="#引入外部属性" class="headerlink" title="引入外部属性"></a>引入外部属性</h4><p>①创建外部属性文件，properties 格式文件，写数据库信息</p><p>②把外部 properties 属性文件引入到 spring 配置文件中</p><ul><li>引入 context 名称空间</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span>//<span class="attr">util</span> 名称空间</span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>//<span class="attr">context</span> 名称空间</span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:property-placeholder不能写在bean标签里面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    配置连接池    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于注解方式实现"><a href="#基于注解方式实现" class="headerlink" title="基于注解方式实现"></a>基于注解方式实现</h4><p>1.注解的概念</p><ul><li><strong>注解：是代码特殊标记，格式：@注解名称(属性名称&#x3D;属性值,属性名称&#x3D;属性值)</strong></li></ul><p>注解可以作用在类上面，方法上面，属性上面，注解可以简化xml配置</p><p>2.spring提供的注解</p><p><strong>bean管理中创建对象提供注解：</strong></p><p>①@Component 普通组件</p><p>②@Service  业务层组件</p><p>③@Controller 控制层组件</p><p>④@Repository 持久层组件</p><ul><li>这四个注解的功能都是一样的，都可以用来创建bean的对象实例</li></ul><p> <strong>bean管理中提供的属性注入的注解：</strong></p><p>①@Autowired：根据属性类型进行自动装配</p><p>②@Qualifier：根据名称进行注入，常用@autowired搭配使用</p><ul><li><strong>PS:当出现接口的实现类不止这一个，就不能单独使用@Autowired，因为如果根据类型获取系统就不知道你想获取具体的实现类对象，</strong></li></ul><p><strong>所以要根据名获取，@Autowired 和@Qualifier搭配一起用</strong></p><p>③@Resource：可以根据类型注入，可以根据名称注入</p><p>④@Value：注入普通类型属性</p><p>3.实现方式</p><p>①引入jar包</p><p>②在xml文件中利用名称空间和开启组件扫描</p><p>③创建类，在类上添加创建对象的注解</p><p>3.1实现对象的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在注解里面value属性值可以省略不写</span></span><br><span class="line"><span class="comment">//不写则是默认值，而默认值通常是类名的首字母小写</span></span><br><span class="line"><span class="comment">//UserService ==&gt; userService</span></span><br><span class="line"><span class="meta">@Controller(value = &quot;userService&quot;)</span> <span class="comment">//&lt;bean id=&quot;userService&quot; class=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring的xml配置文件开启组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    开启组件扫描--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    1.如果扫描多个包，多个包使用逗号隔开--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    2.扫描包的上层目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;dao,service &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>组件扫描的细节</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例 1</span></span><br><span class="line"><span class="comment"> use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span></span><br><span class="line"><span class="comment"> context:include-filter ，设置扫描哪些内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span> <span class="attr">use-default</span><span class="attr">filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--示例 2</span></span><br><span class="line"><span class="comment"> 下面配置扫描包所有内容</span></span><br><span class="line"><span class="comment"> context:exclude-filter： 设置哪些内容不进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span>  <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.2实现在对象创建后注入属性</p><p>第一步：把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解 </p><p>第二步：在 service 注入dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span>  <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is UserDaoImpl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="meta">@Value(value = &quot;test&quot;)</span><span class="comment">//注入普通属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义dao类型的属性</span></span><br><span class="line">    <span class="comment">//不需要添加set方法</span></span><br><span class="line"><span class="comment">//    @Autowired //根据类型进行注入</span></span><br><span class="line"><span class="comment">//    @Qualifier(value = &quot;userDaoImpl1&quot;) //根据名称进行注入</span></span><br><span class="line"><span class="comment">//    private UserDao userDao;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Resource根据属性类型注入</span></span><br><span class="line">     <span class="meta">@Resource(name = &quot;userDaoImpl1&quot;)</span> <span class="comment">//根据属性名称注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is UserService,&quot;</span> + name);</span><br><span class="line">        userDao.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）创建配置类，替代 xml 配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类，替代 xml 配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//（2）编写测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService2</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//加载配置类</span></span><br><span class="line"> <span class="type">ApplicationContext</span> <span class="variable">context</span></span><br><span class="line"> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    </span><br><span class="line"> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line"> System.out.println(userService);</span><br><span class="line"> userService.add();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Aop"><a href="#Aop" class="headerlink" title="Aop"></a>Aop</h2><p>aop的概念：Aspect oriented programming 面向切面编程，<strong>AOP 是 OOP（面向对象编程）的一种延续。</strong></p><p>作用：在不改变源代码的情况下，添加其他模块的代码，根本上解耦合，避免横切逻辑代码重复。</p><p>aop的底层原理是：动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建接口实现类代理对象</span></span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">userDaoImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(userDaoImpl));</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> userDao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(add);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前 ...&quot;</span> + method.getName() + <span class="string">&quot;传递的参数&quot;</span> + Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后&quot;</span> + obj);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="操作术语"><a href="#操作术语" class="headerlink" title="操作术语"></a>操作术语</h4><p>1.连接点：类里面哪些方法可以被增强，这些方法成为连接点</p><p>2.切入点：实际被增强的方法，这些方法称为切入点</p><p>3.通知(增强)：实际上在被增强的方法中的逻辑部分(代码) ，称为通知</p><p><strong>通知有多种类型：</strong></p><p>①前置通知：在增强方法前执行</p><p>②后置通知：在增强方法后执行</p><p>③环绕通知：在增强方法前后分别执行</p><p>④异常通知：在增强方法出现异常后执行</p><p>⑤最终通知：无论增强方法怎么样，都会执行</p><p>4.切面：它是个动作，把通知应用到切入点的过程</p><h4 id="AOP操作"><a href="#AOP操作" class="headerlink" title="AOP操作"></a>AOP操作</h4><ul><li><strong>spring框架一般都是基于AspectJ实现AOP操作</strong></li></ul><p>1.AspectJ 的概念：<strong>它不是Spring的组成部分，它是独立AOP框架，一般把AspectJ经常与Spring框架一起使用，进行AOP操作</strong></p><p>2.切入点表达式</p><p>作用：指定对哪个类里面的哪个方法进行增强</p><p>语法结构：<strong>execution（[ 权限修饰符] -[返回类型]- [类全路径]-[方法名称]-(参数列表)）</strong></p><ul><li>权限修饰符可以省略不写</li></ul><h4 id="实现AOP操作"><a href="#实现AOP操作" class="headerlink" title="实现AOP操作"></a>实现AOP操作</h4><p>1.基于xml配置文件实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、创建两个类，增强类和被增强类，创建方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2、在 spring 配置文件中创建两个类对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3、在 spring 配置文件中配置切入点--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置 aop 增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* </span></span></span><br><span class="line"><span class="string"><span class="tag">com.atguigu.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--增强作用在具体的方法上--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.基于注解方法时实现(使用)</p><p>①创建类，在类里面定义方法</p><p>②创建增强类（编写增强逻辑）</p><p>③进行通知的配置</p><p>④配置不同类型的通知(在增强的类中)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被增强的类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        int i = 10/0;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;test success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增强的类</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相同切入点抽取</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(void aop.aopanno.Student.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">point</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="comment">//@Before注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;point()&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@After</span>和<span class="doctag">@AfterReturning</span>存在一定的差异，</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@After</span>最终通知表示在方法之后执行</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@AfterReturning</span>后置通知表示在方法返回值之后执行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//最终通知</span></span><br><span class="line">    <span class="comment">//@After注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(void aop.aopanno.Student.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(void aop.aopanno.Student.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(void aop.aopanno.Student.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(void aop.aopanno.Student.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around 之前&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;around 之后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通知的xml文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    开启注解组件扫描--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    1.如果扫描多个包，多个包使用逗号隔开--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    2.扫描包的上层目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ioc,aop.aopanno&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  开启Aspect生成代理对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> &gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>相同切入点表达式的提取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相同切入点抽取</span></span><br><span class="line">   <span class="meta">@Pointcut(value = &quot;execution(void aop.aopanno.Student.add(..))&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">point</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//前置通知</span></span><br><span class="line">   <span class="comment">//@Before注解表示作为前置通知</span></span><br><span class="line">   <span class="meta">@Before(&quot;point()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>有多个增强类多同一个方法进行增强，@Order设置增强类优先级</p><p>数字越小，代表优先级越高</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonProxy</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Order(3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentProxy</span> &#123;</span><br></pre></td></tr></table></figure><hr><h2 id="jdbcTemplate"><a href="#jdbcTemplate" class="headerlink" title="jdbcTemplate"></a>jdbcTemplate</h2><p>①引入相关 jar 包</p><p>druid-1.1.10.jar</p><p>mysql-connector-java-8.0.11.jar</p><p>spring-orm-5.2.6.RELEASE.jar</p><p>spring-tx-5.2.6.RELEASE.jar</p><p>spring-jdbc-5.2.6.RELEASE.jar</p><p>②在 spring 配置文件配置数据库连接池</p><p>③配置 JdbcTemplate 对象，注入 DataSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   开启注解组件扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;jdbctemplate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    配置连接池    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  jdbcTemplate对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   注入     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>④创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入dao的对象属性</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入jdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体方法的增删改查操作与自己封装的jdbcutils相差不多，不在此浪费篇幅说明 具体看spring下的jdbctemplate包</li></ul><hr><h2 id="spring事务管理"><a href="#spring事务管理" class="headerlink" title="spring事务管理"></a>spring事务管理</h2><p>1.事务即数据库的一组逻辑操作单元由一种状态到另一种状态</p><p>2.事务一般添加在JavaEE的service层</p><p>3.<strong>spring事务管理分为了编程式事务管理和声明式事务管理(推荐)</strong></p><ul><li>Spring使用的声明式事务管理，其底层使用了<strong>Aop技术</strong></li><li>Spring提供了一个事务管理API</li></ul><p><img src="https://s1.ax1x.com/2022/04/08/LpcmTg.png" alt="事务管理API"></p><h3 id="基于注解方式实现事务管理"><a href="#基于注解方式实现事务管理" class="headerlink" title="基于注解方式实现事务管理"></a>基于注解方式实现事务管理</h3><p>实现步骤：</p><p>1.在 spring 配置文件配置事务管理器</p><p>2.在 spring 配置文件，开启事务注解</p><p>①在 spring 配置文件引入名称空间 tx</p><p>②开启事务注解</p><p>3.在 service 类上面（或者 service 类里面方法上面）添加事务注解</p><ul><li>@Transactional，这个注解添加到类上面，也可以添加方法上面 </li><li>如果把这个注解添加类上面，这个类里面所有的方法都添加事务 </li><li>如果把这个注解添加方法上面，为这个方法添加事务</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  开启注解组件扫描  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;jdbctemplate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbctemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  1.创建事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   注入数据源    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  2.开启事务注解  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.在 service 类上面添加事务注解</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入属性</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//转账的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moneyIn</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">        accountDao.changeMoney(account);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="声明式事务管理参数配置"><a href="#声明式事务管理参数配置" class="headerlink" title="声明式事务管理参数配置"></a>声明式事务管理参数配置</h3><ul><li>在注解@Transacional里面可以配置事务相关参数</li></ul><p>1.propagation：事务传播行为  </p><p>概念：事务传播行为用来描述由某一个事务方法被嵌套进另一个普通方法的时侯事务如何传播。</p><p>事务方法：对数据库表数据进行变化的操作，如增删改等操作，但不包括查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>&#123;</span><br><span class="line">methodB();</span><br><span class="line"><span class="comment">//doSomething</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transaction(Propagation=XXX)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//doSomething</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">事务传播行为类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">PROPAGATION_REQUIRED(默认)</td><td align="left">如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是默认的选择。</td></tr><tr><td align="left">PROPAGATION_REQUIRES_NEW</td><td align="left">新建事务，如果当前存在事务，把当前事务挂起，以新的事务进行管理</td></tr><tr><td align="left">PROPAGATION_SUPPORTS</td><td align="left">支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td align="left">PROPAGATION_MANDATORY</td><td align="left">使用当前的事务，如果当前没有事务，就抛出异常</td></tr><tr><td align="left">PROPAGATION_NOT_SUPPORTED</td><td align="left">以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td align="left">PROPAGATION_NEVER</td><td align="left">以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td align="left">PROPAGATION_NESTED</td><td align="left">如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</td></tr></tbody></table><p>2.ioslation：事务隔离级别</p><ul><li>事务有特性成为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题</li></ul><p>数据库并发问题：脏读、不可重复读、幻读</p><p>隔离级别：读未提交、读已提交、可重复读、串行化</p><p>3.timeout：超时时间 </p><p>①事务需要在一定时间内进行提交，如果不提交进行回滚 </p><p>②默认值是 -1 ，设置时间以秒单位进行计算 </p><p><img src="https://s1.ax1x.com/2022/04/08/LpcMfs.png" alt="举例"></p><p>4.readOnly：是否只读 </p><p>①读：查询操作，写：添加修改删除操作</p><p>②readOnly 默认值 false，表示可以查询，可以添加修改删除操作 </p><p>③设置 readOnly 值是 true，设置成 true 之后，只能查询 </p><p>5.rollbackFor：回滚 </p><p>①设置出现哪些异常进行事务回滚 </p><p>6.noRollbackFor：不回滚 </p><p>①设置出现哪些异常不进行事务回滚</p><h3 id="基于xml配置文件实现-1"><a href="#基于xml配置文件实现-1" class="headerlink" title="基于xml配置文件实现"></a>基于xml配置文件实现</h3><p>实现步骤</p><p>在 spring 配置文件中进行配置</p><p>①配置事务管理器</p><p>②配置通知</p><p>③配置切入点和切面  </p><ul><li>补充知识：<ul><li>在面向切面编程时，一般用<a href="aop:aspect">aop:aspect</a>。<a href="aop:aspect">aop:aspect</a>定义切面（包括通知（前置通知，后置通知，返回通知等等）和切点（pointcut））</li><li>在进行事务管理时，一般用<a href="aop:advisor">aop:advisor</a>。<a href="aop:advisor">aop:advisor</a>定义通知器(其中通知器跟切面一样，也包括通知和切点)</li><li><a href="aop:advisor">aop:advisor</a>大多用于事务管理。</li><li><a href="aop:aspect">aop:aspect</a>大多用于日志、缓存</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2 配置通知--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--tx:advice用于定义通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置事务参数--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--指定哪种规则的方法上面添加事务--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3 配置切入点和切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* </span></span></span><br><span class="line"><span class="string"><span class="tag">com.atguigu.spring5.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="完全注解开发-1"><a href="#完全注解开发-1" class="headerlink" title="完全注解开发"></a>完全注解开发</h3><ul><li>@Component：表示这是一个组件。IOC会托管这个类的对象。</li><li>@bean：方法返回的对象交给IOC管理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、创建配置类，使用配置类替代 xml 配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu&quot;)</span> <span class="comment">//组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxConfig</span> &#123;</span><br><span class="line"> <span class="comment">//创建数据库连接池</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> DruidDataSource <span class="title function_">getDruidDataSource</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line"> dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"> dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>);</span><br><span class="line"> dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"> dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> dataSource;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建 JdbcTemplate 对象</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line"> <span class="comment">//到 ioc 容器中根据类型找到 dataSource</span></span><br><span class="line"> <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line"> <span class="comment">//注入 dataSource</span></span><br><span class="line"> jdbcTemplate.setDataSource(dataSource);</span><br><span class="line"> <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//创建事务管理器</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> DataSourceTransactionManager </span><br><span class="line"><span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line"> <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line"> transactionManager.setDataSource(dataSource);</span><br><span class="line"> <span class="keyword">return</span> transactionManager;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Spring5-新功能"><a href="#Spring5-新功能" class="headerlink" title="Spring5 新功能"></a>Spring5 新功能</h2><h3 id="Nullable注解"><a href="#Nullable注解" class="headerlink" title="@Nullable注解"></a>@Nullable注解</h3><p>Spring5框架的核心容器支持Nullable注解</p><ul><li>此注解可以使用在方法、属性、参数上面，表示以上的返回值都可以为空，避免报空指针异常</li></ul><h3 id="函数式风格"><a href="#函数式风格" class="headerlink" title="函数式风格"></a>函数式风格</h3><p>Spring5 核心容器支持函数式风格 GenericApplicationContext</p><ul><li>函数式风格创建对象，交给 spring 进行管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数式风格创建对象，交给 spring 进行管理</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenericApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="comment">//1 创建 GenericApplicationContext 对象</span></span><br><span class="line"> <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line"> <span class="comment">//2 调用 context 的方法对象注册</span></span><br><span class="line"> context.refresh();</span><br><span class="line"> context.registerBean(<span class="string">&quot;user1&quot;</span>,User.class,() -&gt; <span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line"> <span class="comment">//3 获取在 spring 注册的对象</span></span><br><span class="line"> <span class="comment">// User user = (User)context.getBean(&quot;com.atguigu.spring5.test.User&quot;);</span></span><br><span class="line"> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)context.getBean(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line"> System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringWebFlux"><a href="#SpringWebFlux" class="headerlink" title="SpringWebFlux"></a>SpringWebFlux</h3><p>前置知识：springMVC spirngboot java8新特性 maven</p><ul><li>P53 日后填坑</li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常问题的处理</title>
      <link href="/2022/04/03/Expection/"/>
      <url>/2022/04/03/Expection/</url>
      
        <content type="html"><![CDATA[<h1 id="学习过程中异常问题的处理"><a href="#学习过程中异常问题的处理" class="headerlink" title="学习过程中异常问题的处理"></a>学习过程中异常问题的处理</h1><p>1.<strong>java.lang.NumberFormatException: For input string: “”</strong></p><p><img src="https://s1.ax1x.com/2022/04/03/qHE4mQ.png"></p><p>抛异常处代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">add</span> <span class="operator">=</span> moneyAdd.toString();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(add);</span><br><span class="line">            count += num;</span><br></pre></td></tr></table></figure><p>原因是：</p><p>在调用StringUtils.split()，Integer.parseInt（），Long.parseLong()等方法时，不管传入的参数的值是什么，都能进入不为null或“”的判断中，</p><p>然后就运行执行下面的代码，就可能出现 java.lang.NumberFormatException: For input string: “null”的异常。</p><ul><li>解决办法：在转换类型之前进行不为空值或不为空字符串的判断即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解决方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">add</span> <span class="operator">=</span> moneyAdd.toString();</span><br><span class="line">        <span class="keyword">if</span> (add != <span class="literal">null</span> &amp;&amp; !add.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(add);</span><br><span class="line">            count += i;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>2.<strong>Exception in thread “main” java.net.SocketException: Connection reset</strong></p><p><img src="https://s1.ax1x.com/2022/04/03/qHETkn.png"></p><p>socket.shutdownOutput方法说明，shutdownInput方法同理</p><p>①在客户端或者服务端通过socket.shutdownOutput()都是单向关闭的，</p><p>即关闭客户端的输出流并不会关闭服务端的输出流，所以是一种单方向的关闭流；</p><p>②通过socket.shutdownOutput()关闭输出流，但socket仍然是连接状态，连接并未关闭</p><p>③如果直接关闭输入或者输出流，即：in.close()或者out.close()，会直接关闭socket</p><p>3.<strong>Exception in thread “main” java.lang.NullPointerException</strong></p><p><img src="https://s1.ax1x.com/2022/04/03/qHEO6U.png"></p><p>抛异常的代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处必须使用static修饰静态代码块</span></span><br><span class="line"> <span class="keyword">static</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">resource</span> <span class="operator">=</span> JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            pro.load(resource);</span><br><span class="line">            source = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UtilsTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        JDBCUtils.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于Idea德鲁伊数据库连接池空指针异常问题 ，找了许久发现在代码块中使用的是<strong>非静态修饰</strong></p><p>原因是：</p><p>对于德鲁伊创建池子使用的代码块必须是静态代码块，静态代码块随着类的加载而执行，也就是说在类加载完成的时候数据库连接池内的数据连接就创建好了，</p><p>但很不幸 ，当时使用了非静态代码块，导致空指针的出现，因为非静态代码块是在对象创建的时候才会执行完成，像上面直接通过类调用静态方法是没有</p><p>加载过非静态代码块的，因此此时数据库连接池还是为null的。</p><p>采用静态代码块修饰，解决空指针问题</p><p><img src="https://s1.ax1x.com/2022/04/03/qHEx0J.png"></p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven基础</title>
      <link href="/2022/04/03/MavenBase/"/>
      <url>/2022/04/03/MavenBase/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven基础"><a href="#Maven基础" class="headerlink" title="Maven基础"></a>Maven基础</h2><p>Maven是由Apache组织维护的为java项目提供构建和依赖管理(jar包管理)支持的工具</p><p>1.构建</p><p>  构建是指使用<strong>原材料生产产品</strong>的过程。</p><ul><li><p>原材料</p><ul><li><p>Java 源代码</p></li><li><p>基于 HTML 的 Thymeleaf 文件</p></li><li><p>图片</p></li><li><p>配置文件</p></li><li><p><a href="http://heavy_code_industry.gitee.io/code_heavy_industry/pro002-maven/chapter01/verse02.html#">#</a> ……</p></li></ul></li><li><p>产品</p><ul><li>一个可以在服务器上运行的项目</li></ul></li></ul><p>构建过程包含的主要的环节：</p><ul><li>清理：删除上一次构建的结果，为下一次构建做好准备</li><li>编译：Java 源程序编译成 *.class 字节码文件</li><li>测试：运行提前准备好的测试程序</li><li>报告：针对刚才测试的结果生成一个全面的信息</li><li>打包<ul><li>Java工程：jar包</li><li>Web工程：war包</li></ul></li><li>安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库</li><li>部署<ul><li>部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上</li><li>部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上</li></ul></li></ul><p>2.依赖</p><p>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。</p><ul><li>例如junit-4.12 依赖 hamcrest-core-1.3</li></ul><p>3.Maven的工作机制</p><p><img src="https://s1.ax1x.com/2022/04/03/qHpnk8.png"></p><hr><h3 id="核心概念：向量"><a href="#核心概念：向量" class="headerlink" title="核心概念：向量"></a>核心概念：向量</h3><p>1.向量说明</p><p>使用三个<strong>『向量』</strong>在<strong>『Maven的仓库』</strong>中<strong>唯一</strong>的定位到一个<strong>『jar』</strong>包。</p><ul><li><strong>groupId</strong>：公司或组织的 id</li><li><strong>artifactId</strong>：一个项目或者是项目中的一个模块的 id</li><li><strong>version</strong>：版本号</li></ul><p>2.三个向量的取值方式</p><ul><li>groupId：公司或组织域名的倒序，通常也会加上项目名称<ul><li>例如：com.atguigu.maven</li></ul></li><li>artifactId：模块的名称，将来作为 Maven 工程的工程名</li><li>version：模块的版本号，根据自己的需要设定<ul><li>例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本</li><li>例如：RELEASE 表示正式版本</li></ul></li></ul><p>举例：</p><ul><li>groupId：com.atguigu.maven</li><li>artifactId：pro01-atguigu-maven</li><li>version：1.0-SNAPSHOT</li></ul><p>3.坐标和仓库中 jar 包的存储路径之间的对应关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面坐标对应的 jar 包在 Maven 本地仓库中的位置是：<strong>Maven本地仓库根目录\javax\servlet\servlet-api\2.5\servlet-api-2.5.jar</strong></p><hr><h3 id="dos窗口生成一个Maven-java工程"><a href="#dos窗口生成一个Maven-java工程" class="headerlink" title="dos窗口生成一个Maven-java工程"></a>dos窗口生成一个Maven-java工程</h3><ul><li>在dos窗口运行 <strong>mvn archetype:generate</strong> 命令</li></ul><blockquote><p>dos 窗口生成中的信息填写</p><p>Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:【直接回车，使用默认值】</p><p>Define value for property ‘groupId’: com.atguigu.maven</p><p>Define value for property ‘artifactId’: pro01-maven-java</p><p>Define value for property ‘version’ 1.0-SNAPSHOT: :【直接回车，使用默认值】</p><p>Define value for property ‘package’ com.atguigu.maven: :【直接回车，使用默认值】</p><p>Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro01-maven-java version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认。如果前面有输入错误，想要重新输入，则输入 N 再回车。】</p></blockquote><p><img src="https://s1.ax1x.com/2022/04/03/qHpGmq.png" alt="命令的格式解析"></p><p>pom.xml文件的配置信息及其含义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- project根标签：表示对当前工程进行配置、管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- modelVersion 标签：从Maven 2 开始就固定是4.0.0 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 代表当前的pom.xml所采用的结构 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 坐标信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- groupId 标签：代表公司或者组织开发的某一个项目 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.year21.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- artifactId 标签：代表项目下的某一个模块 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- version 标签：代表当前模块的版本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- packaging 标签：代表当前工程的打包方式 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 取值 jar：生产jar包，说明这是个java工程 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 取值 war：生产war包，说明这是个web工程 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 取值 pom：说明这个工程用来管理其他工程的工程--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- properties 标签：在Maven中定义属性值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在构建过程中读取源码时使用的字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- dependencies 标签：配置具体的依赖信息，可以包含多个dependency 子标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- dependency 标签：配置具体的某一个依赖信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 坐标信息：想要导入哪个jar包，就配置它的坐标信息即可 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- scope 标签：配置当前依赖的范围 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="核心概念：POM"><a href="#核心概念：POM" class="headerlink" title="核心概念：POM"></a>核心概念：POM</h3><p>1.含义</p><p>POM：<strong>P</strong>roject <strong>O</strong>bject <strong>M</strong>odel，项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现。</p><p>2.模型化思想</p><p>POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活</p><p>中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据。</p><p>3.对应的配置文件</p><p>POM 理念集中体现在 Maven 工程根目录下 <strong>pom.xml</strong> 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学</p><p>这个文件怎么配置，各个配置有什么用。</p><h3 id="dos窗口下的构建"><a href="#dos窗口下的构建" class="headerlink" title="dos窗口下的构建"></a>dos窗口下的构建</h3><p>1.运行 Maven 中和构建操作相关的命令时，必须进入到<strong>pom.xml 所在的目录</strong>。如果没有在 pom.xml 所在的目录运行 Maven 的构建命令，那么会看到下面的错误信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The goal you specified <span class="keyword">requires</span> a project to execute but there is no POM in <span class="built_in">this</span> directory</span><br></pre></td></tr></table></figure><blockquote><p> mvn -v 命令和构建操作无关，只要正确配置了 PATH，在任何目录下执行都可以。而构建相关的命令要在 pom.xml 所在目录下运行——操作哪个工程，就进入这个工程的 pom.xml 目录。</p></blockquote><p>2、清理操作</p><p>mvn clean</p><p>效果：删除 target 目录</p><p>3、编译操作</p><p>主程序编译：mvn compile</p><p>测试程序编译：mvn test-compile</p><p>主体程序编译结果存放的目录：target&#x2F;classes</p><p>测试程序编译结果存放的目录：target&#x2F;test-classes</p><p>4、测试操作</p><p>mvn test</p><p>测试的报告存放的目录：target&#x2F;surefire-reports</p><p>5、打包操作</p><p>mvn package</p><p>打包的结果——jar 包，存放的目录：target</p><p>6、安装操作</p><p>mvn install</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Installing D:\maven-workspace\space201026\pro01-maven-java\target\pro01-maven-java-1.0-SNAPSHOT.jar to D:\maven-rep1026\com\atguigu\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] Installing D:\maven-workspace\space201026\pro01-maven-java\pom.xml to D:\maven-rep1026\com\atguigu\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.pom</span><br></pre></td></tr></table></figure><p>安装的效果是将本地构建过程中生成的 jar 包存入 Maven 本地仓库。这个 jar 包在 Maven 仓库中的路径是根据它的坐标生成的。</p><p>坐标信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Maven 仓库中生成的路径如下：D:\maven-rep1026\com\atguigu\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.jar</p><p>另外，安装操作还会将 pom.xml 文件转换为 XXX.pom 文件一起存入本地仓库。所以我们在 Maven 的本地仓库中想看一个 jar 包原始的 pom.xml 文件时，查看</p><p>对应 XXX.pom 文件即可，它们是名字发生了改变，本质上是同一个文件。</p><ul><li>dos窗口构建web工程 —-&gt;<a href="http://heavy_code_industry.gitee.io/code_heavy_industry/pro002-maven/chapter03/verse04.html#%E5%AE%9E%E9%AA%8C%E5%9B%9B-%E5%88%9B%E5%BB%BA-maven-%E7%89%88%E7%9A%84-web-%E5%B7%A5%E7%A8%8B">参考</a></li></ul><hr><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><p>标签的位置：dependencies&#x2F;dependency&#x2F;<strong>scope</strong></p><p>标签的可选值：<strong>compile</strong>&#x2F;<strong>test</strong>&#x2F;<strong>provided</strong>&#x2F;system&#x2F;runtime&#x2F;<strong>import</strong></p><p>①compile 和 test 对比</p><table><thead><tr><th></th><th>main目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>有效</td><td>有效</td><td>有效</td><td>有效</td></tr><tr><td>test</td><td>无效</td><td>有效</td><td>有效</td><td>无效</td></tr></tbody></table><p>②compile 和 provided 对比</p><table><thead><tr><th></th><th>main目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>有效</td><td>有效</td><td>有效</td><td>有效</td></tr><tr><td>provided</td><td>有效</td><td>有效</td><td>有效</td><td>无效</td></tr></tbody></table><p>③结论</p><p>compile：通常使用的第三方框架的 jar 包这样在项目实际运行时真正要用到的 jar 包都是以 compile 范围进行依赖的。比如 SSM 框架所需jar包。</p><p>test：测试过程中使用的 jar 包，以 test 范围依赖进来。比如 junit。</p><p>provided：在开发过程中需要用到的“服务器上的 jar 包”通常以 provided 范围依赖进来。比如 servlet-api、jsp-api。而这个范围的 jar  包之所以不参与部署、不放进 war 包，就是避免和服务器上已有的同类 jar 包产生冲突，同时减轻服务器的负担。说白了就是：“<strong>服务器上已经有了，你就别带啦！</strong>”</p><h4 id="依赖的传递"><a href="#依赖的传递" class="headerlink" title="依赖的传递"></a>依赖的传递</h4><p>①概念</p><p>A 依赖 B，B 依赖 C，那么在 A 没有配置对 C 的依赖的情况下，A 里面能不能直接使用 C？</p><p>②传递的原则</p><p>在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围。</p><ul><li>B 依赖 C 时使用 compile 范围：可以传递</li><li>B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以</li></ul><h4 id="依赖的排除"><a href="#依赖的排除" class="headerlink" title="依赖的排除"></a>依赖的排除</h4><p>当 A 依赖 B，B 依赖 C 而且 C 可以传递到 A 的时候，A 不想要 C，需要在 A 里面把 C 排除掉。而往往这种情况都是为了避免 jar 包之间的冲突。</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img027.2faff879.png" alt="./images"></p><p>所以配置依赖的排除其实就是阻止某些 jar 包的传递。因为这样的 jar 包传递过来会和其他 jar 包冲突</p><hr><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>1.概念</p><p>Maven工程之间，A 工程继承 B 工程</p><ul><li>B 工程：父工程</li><li>A 工程：子工程</li></ul><p>本质上是 A 工程的 pom.xml 中的配置继承了 B 工程中 pom.xml 的配置。</p><p>2、作用</p><p>在父工程中统一管理项目中的依赖信息，具体来说是管理依赖信息的版本。</p><p>它背后的需求是：</p><ul><li>在每一个 module 中各自维护各自的依赖信息很容易发生出入，不易统一管理。</li><li>使用同一个框架内的不同 jar 包，它们应该是同一个版本，所以整个项目中使用的框架版本需要统一。</li><li>使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。</li></ul><p>通过在父工程中为整个项目维护依赖信息的组合既<strong>保证了整个项目使用规范、准确的 jar 包</strong>；又能够将<strong>以往的经验沉淀</strong>下来，节约时间和精力。</p><p><strong>父类工程建立步骤</strong>：<a href="http://heavy_code_industry.gitee.io/code_heavy_industry/pro002-maven/chapter03/verse09.html#_1%E5%88%9B%E5%BB%BA%E7%88%B6%E5%B7%A5%E7%A8%8B">参考</a></p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>1.概念：使用一个“总工程”将各个“模块工程”汇集起来，作为一个整体对应完整的项目。</p><ul><li>项目：整体</li><li>模块：部分</li></ul><p>从继承关系角度来看：</p><ul><li>父工程</li><li>子工程</li></ul><p>从聚合关系角度来看：</p><ul><li>总工程</li><li>模块工程</li></ul><p>2.好处</p><ul><li><p>一键执行 Maven 命令：很多构建命令都可以在“总工程”中一键执行。</p><p>以 mvn install 命令为例：Maven 要求有父工程时先安装父工程；有依赖的工程时，先安装被依赖的工程。我们自己考虑这些规则会很麻烦。但是工程聚合之后，在总工程执行 mvn install 可以一键完成安装，而且会自动按照正确的顺序执行。</p></li><li><p>配置聚合之后，各个模块工程会在总工程中展示一个列表，让项目中的各个模块一目了然。</p></li></ul><hr><h3 id="其他核心概念"><a href="#其他核心概念" class="headerlink" title="其他核心概念"></a>其他核心概念</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>1.作用</p><p>为了让构建过程自动化完成，Maven 设定了三个生命周期，生命周期中的每一个环节对应构建过程中的一个操作。</p><p>2.三个生命周期</p><table><thead><tr><th align="left">生命周期名称</th><th align="left">作用</th><th align="left">各个环节</th></tr></thead><tbody><tr><td align="left">Clean</td><td align="left">清理操作相关</td><td align="left">pre-clean  <br/>clean <br/>post-clean</td></tr><tr><td align="left">Site</td><td align="left">生成站点相关</td><td align="left">pre-site <br/> site <br/>post-site <br/>deploy-site</td></tr><tr><td align="left">Default</td><td align="left">主要构建过程</td><td align="left">validate <br/>generate-sources <br/>process-sources <br/>generate-resources  <br/>rocess-resources 复制并处理资源文件，至目标目录，准备打包 <br/>compile 编译项目 main 目录下的源代码 <br/>process-classes <br/>generate-test-sources <br/>process-test-sources <br/>generate-test-resources <br/>process-test-resources 复制并处理资源文件，至目标测试目录 <br/>test-compile 编译测试源代码 <br/>process-test-classes <br/>test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署 <br/>prepare-package  <br/>package 接受编译好的代码，打包成可发布的格式，如JAR、pre-integration-test <br/>integration-test <br/>post-integration-test <br/>verify <br/>install将包安装至本地仓库，以让其它项目依赖 <br/>deploy将最终的包复制到远程的仓库，以让其它开发人员共享；或者部署到服务器上运行（需借助插件，例如：cargo）。</td></tr></tbody></table><p>3.特点</p><ul><li>前面三个生命周期彼此是独立的。</li><li>在任何一个生命周期内部，执行任何一个具体环节的操作，都是从本周期最初的位置开始执行，直到指定的地方。（记住这句话就行了）</li></ul><p>Maven 之所以这么设计其实就是为了提高构建过程的自动化程度：让使用者只关心最终要干的即可，过程中的各个环节是自动执行的。</p><h4 id="插件和目标"><a href="#插件和目标" class="headerlink" title="插件和目标"></a>插件和目标</h4><p>①插件</p><p>Maven 的核心程序仅仅负责宏观调度，不做具体工作。具体工作都是由 Maven 插件完成的。例如：编译就是由 maven-compiler-plugin-3.1.jar 插件来执行的。</p><p>②目标</p><p>一个插件可以对应多个目标，而每一个目标都和生命周期中的某一个环节对应。</p><p>Default 生命周期中有 compile 和 test-compile 两个和编译相关的环节，这两个环节对应 compile 和 test-compile 两个目标，而这两个目标都是由 maven-</p><p>compiler-plugin-3.1.jar 插件来执行的。</p><h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><ul><li><p>本地仓库：在当前电脑上，为电脑上所有 Maven 工程服务</p></li><li><p>远程仓库：需要联网</p><ul><li>局域网：我们自己搭建的 Maven 私服，例如使用 Nexus 技术。</li><li>Internet<ul><li>中央仓库</li><li>镜像仓库：内容和中央仓库保持一致，但是能够分担中央仓库的负载，同时让用户能够就近访问提高下载速度，例如：Nexus aliyun</li></ul></li></ul></li><li><p>建议：不要中央仓库和阿里云镜像混用，否则 jar 包来源不纯，彼此冲突。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2022/04/02/JavaWeb/"/>
      <url>/2022/04/02/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h2 id="初识JavaWeb"><a href="#初识JavaWeb" class="headerlink" title="初识JavaWeb"></a>初识JavaWeb</h2><p>javaWeb是指所有通过Java语言编写可以通过浏览器访问的程序的总称。</p><p>请求(request)：指客户端给服务器发送数据</p><p>响应(response)：指服务端给客户端回传数据</p><p>根据web资源的不同分为静态(html、css、js)和动态资源(jsp、sevlet程序)</p><p><strong>Tomcat是由Apache提供的web服务器，提供对jsp和servlet的支持，是一种轻量级的javaweb容器(服务器)</strong></p><p>网页由三部分组成：内容(html)、表现(css)、行为(javascript)</p><p>行为指的是是页面中元素与输入设备交互的相应。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HTML：超文本标记语言(Hyper Text Markup Language)</p><p>HTML通过标签标记显示网页的各个部分。通过在文本中添加标签，以告诉浏览器如何显示文本内容(如文字的处理、照片的位置布局)</p><h3 id="HTML的书写规范"><a href="#HTML的书写规范" class="headerlink" title="HTML的书写规范"></a>HTML的书写规范</h3><ol><li><p>HTML的标签</p><p>格式：&lt;标签名&gt;封装的数据&lt;&#x2F;标签名&gt;</p></li><li><p>标签名对大小写不严格区分</p></li><li><p>标签的属性</p><p>①基本属性：bgcolor &#x3D; “red”  —可以修改简单的样式，如背景颜色</p><p>②事件属性：onclick &#x3D; “alert( ‘测试！’ )”  — 可以直接设置事件响应后的代码</p></li><li><p>标签分为单标签和双标签</p><p>单标签：&lt;标签名 &#x2F;&gt;   br 换行、hr 水平线</p><p>双标签：&lt;标签名&gt;封装的数据&lt;&#x2F;标签名&gt;</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>   表示整个html页面的开始</span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>        头信息</span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span>标题</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>  body是页面的主题内容</span><br><span class="line">        页面主体内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">       </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>   表示整个html页面的结束</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span> <span class="comment">&lt;!-- 约束，声明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span>&gt;</span><span class="comment">&lt;!-- html标签表示html的开始，lang=&quot;zh_CN&quot;表示支持中文  html通常分为head 和 body两部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="comment">&lt;!-- 表示头部信息，包含三部分内容，title标签，css样式，js代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span> <span class="comment">&lt;!-- 当前页面使用的字符集utf-8--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="comment">&lt;!-- 表示标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bgcolor表示背景颜色属性</span></span><br><span class="line"><span class="comment">     oncilck表示单击（点击）事件</span></span><br><span class="line"><span class="comment">     alert()是javascript语言提供的一个警告框</span></span><br><span class="line"><span class="comment">     它可以接收任意参数，参数即警告框的函数信息</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> &gt;</span> <span class="comment">&lt;!-- 此标签是整个html显示的主体内容--&gt;</span></span><br><span class="line">    这是测试页面 <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;测试&#x27;)&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​注意事项：</p><p>​①标签不能交叉嵌套</p><p>​②标签必须正确关闭(闭合)</p><p>​③属性必须有值，属性值必须加引号</p><p>​④注释不能嵌套</p><h4 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h4><ol><li><p>front是字体标签</p><p>常用于修改文本的字体(face)，颜色(color)，大小(size)，其中大小的属性值只有1-6</p></li><li><p>特殊字符 </p><p>​<img src="https://s1.ax1x.com/2022/04/02/qIEqFf.png" alt="常用的字符实体"></p></li><li><p>标题标签</p><p>h1 - h6 都是标题标签，其中h1最大，h6最小</p><p>align属性是对齐属性，分别有left(左对齐，默认)、center(居中)、right(右对齐)</p></li><li><p>超链接</p><p>超文本引用（hypertext reference）</p><p>a标签是 超链接</p><p>​href属性设置连接的地址</p><p>​target属性设置针对哪个目标进行跳转 </p><p>​    _self  表示当前页面，作为每次的默认值</p><p>​    _blank  表示打开新页面进行跳转</p></li></ol> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 超链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://year21.top/&quot;</span> &gt;</span>个人博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://year21.top/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span> &gt;</span>个人博客_self<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://year21.top/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> &gt;</span>个人博客_blank<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>列表标签</p><p>无序列表、有序列表、定义列表(使用较少)</p><p>ul是无序列表，type属性可以修改列表项前面的符号，li是列表项</p><p>ol是有序列表，type属性可以修改列表项前面的符号，li是列表项</p><p>**在某些情况下，type的修改是无效的，原因是部分浏览器的兼容性不好 **</p></li><li><p>img标签</p></li></ol><p>​   img标签是图像标签，可用于在html页面上显示图片</p><p>​   src属性可以用于设置图片的路径</p><p>​   weight属性设置图片的宽度</p><p>​       hright属性设置图片的高度</p><p>​       border属性设置图片的边框大小</p><p>​       alt属性设置当前指定路径下不存在图片时，用来代替显示内容的文本</p><p>​web中的路径分为相对路径和绝对路径</p><p>​①相对路径：</p><p>​**. **   表示当前文件的目录</p><p>​<strong>..</strong>表示当前文件的上一级目录</p><p>​            文件名表示当前目录下的文件，相当于  .&#x2F; 文件名，但.&#x2F;可以省略</p><p>​②绝对路径：</p><p>​格式：<a href="http://ip:port/工程名/资源路径">http://ip:port/工程名/资源路径</a></p><ol start="7"><li><p>表格标签</p><p>table标签是表格标签</p><ul><li>border属性设置表格边框</li><li>width设置表格宽度</li><li>height设置表格高度</li><li>align设置表格的相对页面的位置</li><li>cellspacing设置单元格间距</li></ul><p>tr是行标签</p><ul><li>th是表头标签</li><li>td是单元格标签</li><li>align设置单元格文本对齐方式<ul><li>b是文本加粗标签</li></ul></li></ul><p>8.跨行跨列标签</p><p>colspan 属性设置跨列</p><p>rowspan 属性设置跨行</p><p>设置跨行跨列则同时使用</p><ul><li>注意的是要删掉被跨的列与行</li></ul><p>9.iframe标签(内嵌窗口)</p><p>​用于在html页面上打开一个小窗口，去加载单独的页面</p><p>iframe和a标签组合使用：</p><ul><li>①在iframe标签中使用name属性定义一个名称</li><li>②在a标签的target属性上设置iframe的name的属性</li></ul><p>10.表单标签</p><p>form是表单标签，用于在html页面中收集用户信息的元素集合，然后将此集合内的信息发送到服务器</p><p><strong>action属性设置提交的服务器地址</strong>，<strong>method属性设置提交的方式GET(默认值)或POST</strong></p><p>表单提交时数据没有发送给服务器的三种情况：</p><p>①表单项没有name属性值</p><p>②单选、复选(下拉列表中的option标签)都需要添加value属性，以便发送给服务器</p><p>③表单项不再提交的form标签中。</p><p>提交方式<strong>GET</strong>的特点：</p><p>①提交信息的url是 action属性值+ [+?+请求参数 ]，其中中括号内容可以省略</p><p>​请求参数的格式是 name&#x3D;value&amp;name&#x3D;value</p><p>②提交的信息以明文传输，存在安全隐患</p><p>③对数据长度有限制</p><p>提交方式<strong>POST</strong>的特点：</p><p>①提交信息的url只有 action属性值</p><p>②相对于get提交方式更安全</p><p>③理论书没有数据长度的限制</p><p>表单标签常用设置：</p><ul><li><p>input type&#x3D;“text”  —&gt; 文本输入框，可用value属性设置默认值</p></li><li><p>input type&#x3D;“password”  —&gt;密码输入框，可用value属性设置默认值</p></li><li><p>input type&#x3D;“radio”  —&gt;单选框，可用name属性进行分组，checked&#x3D;”checked”表示默认选择</p></li><li><p>input type&#x3D;”checkbox”  —&gt;复选框，checked&#x3D;”checked”可以默认多个选择</p></li><li><p>select标签是下拉列表框，option标签是下拉列表框中的选项，selected&#x3D;”selected”设置默认选择</p></li><li><p>textarea表示多行文本输出框(起始标签和结束标签中的内容是它的默认值)</p><p>rows属性设置显示的行数  cols属性设置显示每行的宽度</p></li><li><p>input type&#x3D;”reset”是重置按钮，通过value属性可以修改其文本内容</p></li><li><p>input type&#x3D;”submit”是提交按钮，也可通过value修改其文本值</p></li><li><p>input type&#x3D;”button”是按钮，也可通过value修改其文本值</p></li><li><p>input type&#x3D;”file”是文件上传选项，可提交文件至服务器</p></li><li><p>input type&#x3D;”hidden”是隐藏域 作用是当需要发送些信息用户不需要看见，但服务器需要的信息</p></li></ul><p>11.其他标签</p><p>div标签默认独占一行</p><p><strong>span标签 它的长度都与封装数据长度一致</strong></p><p>p是段落标签 ，默认在段落的上方或下方各空出一行（在已有情况下不添加）</p></li></ol><hr><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>CSS-层叠样式表单，用于增强、控制页面样式并允许样式信息与网页内容分离的标记性语言</p><p>css的注释于Java的多行注释一致</p><p>在一个选择器中定义多个声明，则要使用分号分开每个声明</p><h3 id="CSS与HTML的结合使用"><a href="#CSS与HTML的结合使用" class="headerlink" title="CSS与HTML的结合使用"></a>CSS与HTML的结合使用</h3><p>第一种：在标签的 style 属性上设置”key:value value;”，修改标签样式</p><p>第二种：在 head 标签中，使用 style 标签来定义各种自己需要的 css 样式</p><p>第三种：把css样式单独写成css文件，再通过link标签引入复用，提高了代码的复用性，修改也更简便</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;test<span class="selector-class">.css</span>&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>1.标签选择器</p><p>作用：可以决定那些标签被动的使用这个样式</p><p>格式：</p><p>标签名{</p><p>​属性：值</p><p>​}</p><p>2.id选择器</p><p>作用：可以通过id属性选择性的使用样式</p><p>格式：</p><p>​#id 属性值{</p><p>​属性：值</p><p>​}</p><p>3.类型选择器</p><p>作用：通过class属性有效的选择性的去使用样式</p><p>格式：</p><p>​.class属性值{</p><p>​属性：值</p><p>​}</p><p>4.组合选择器</p><p>作用：组合选择器可以让多个选择器共用一个css代码</p><p>格式：</p><p>​选择器1，选择器2，选择器n{</p><p>​属性：值</p><p>​}</p><h3 id="常见样式"><a href="#常见样式" class="headerlink" title="常见样式"></a>常见样式</h3><p>1.字体颜色 color:red;</p><p>2.宽度  width:19px;</p><p>3.高度  width:19px;</p><p>4.背景颜色 background-color:#0F2D4C </p><p>5.字体样式：</p><p>color：#FF0000；字体颜色红色 </p><p>font-size：20px; 字体大小 </p><p>6.红色1像素实线边框 border：1px solid red; </p><p>7.DIV 居中 </p><p>margin-left: auto; </p><p>margin-right: auto; </p><p>8.文本居中  text-align: center; </p><p>9.超连接去下划线  text-decoration: none; </p><p>10.表格细线 </p><p>table { </p><p>border: 1px solid black; &#x2F;<em>设置边框</em>&#x2F; </p><p>border-collapse: collapse; &#x2F;<em>将边框合并</em>&#x2F; </p><p>} </p><p>td,th { </p><p>border: 1px solid black; &#x2F;<em>设置边框</em>&#x2F; </p><p>} </p><p>11.列表去除修饰 </p><p>ul { </p><p>list-style: none; </p><p>​}</p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>js是弱类型，类型可变，Java是强类型，在定义变量就确定了类型</p><h3 id="JS与HTML的结合使用"><a href="#JS与HTML的结合使用" class="headerlink" title="JS与HTML的结合使用"></a>JS与HTML的结合使用</h3><p>1.第一种：只需要在 head 标签中，或者在 body 标签中， 使用 script 标签 来书写 JavaScript 代码</p><p>2.第二种：使用 script 标签引入 单独的 JavaScript 代码文件</p><ul><li>注：src属性专门用于引入js文件路径(可以是相对路径或绝对路径)</li><li>script标签可以用于定义js代码，也能引入js文件，但只能二选一执行</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>数值类型(number)、字符串类型(string)、对象类型(object)</p><p>布尔类型(boolean)、函数类型(function)</p><p>JavaScript的特殊值：</p><p>①undefined  未定义，所有js变量未赋予初始值之前，其默认值都是undefined</p><p>②null  空值</p><p>③NAN 全称：Not a number 非数字，非数值</p><p>变量定义的格式：var 变量名 ； var 变量名 &#x3D; 值；</p><p><strong>typeof ()是js语言提供用于查询变量数据类型的函数</strong></p><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><p>1.关系(比较)运算：</p><p>等于(&#x3D;&#x3D;)：简单的做字面值的比较</p><p>全等于(&#x3D;&#x3D;&#x3D;)：除了做字面值比较之外，还会比较两个变量的数据类型</p><p>2.逻辑运算：且运算(&amp;&amp;)、或运算(||)、取反运算(！)</p><p>在js语言中，所有的变量都可以做为一个 boolean 类型的变量去使用。 </p><p><strong>0 、null、 undefined、””(空串) 做判断都认为是 false</strong></p><p> &amp;&amp; 且运算有两种情况： </p><p>第一种：当表达式全为真的时候。返回最后一个表达式的值。 </p><p>第二种：当表达式中，有一个为假的时候。返回第一个为假的表达式的值 </p><p>|| 或运算 </p><p>第一种情况：当表达式全为假时，返回最后一个表达式的值 </p><p>第二种情况：只要有一个表达式为真。就会把回第一个为真的表达式的值 </p><p>并且 &amp;&amp; 与运算 和 ||或运算 有短路。 </p><p>短路就是说，当这个&amp;&amp;或||运算有结果了之后 。后面的表达式不再执行</p><hr><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>格式：</p><p>var 数组名 &#x3D; []; &#x2F;&#x2F; 空数组 </p><p>var 数组名 &#x3D; [1 , ’abc’ , true]; &#x2F;&#x2F; 定义数组同时赋值元素</p><p><strong>js语言中的数组，只有通过数组下标赋值，那么最大的下标值，才能自动的给数组做扩容操作，即数组长度由最大下标值决定</strong></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>定义方式：</p><p>①方式一：使用function关键字</p><p>​function 函数名(形参列表){  函数体  }</p><ul><li>函数必须调用才会执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="comment">// 定义一个无参函数</span></span><br><span class="line">        function <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;无参函数fun()被调用了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 函数调用===才会执行</span></span><br><span class="line">        fun();</span><br><span class="line"></span><br><span class="line">        function <span class="title function_">fun2</span><span class="params">(a ,b)</span> &#123;</span><br><span class="line">            alert(<span class="string">&quot;有参函数fun2()被调用了 a=&gt;&quot;</span> + a + <span class="string">&quot;,b=&gt;&quot;</span>+b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fun2(<span class="number">10</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义带有返回值的函数</span></span><br><span class="line">        function <span class="title function_">sum</span><span class="params">(num1,num2)</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        alert( sum(<span class="number">100</span>,<span class="number">50</span>) );</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>②方式二： </p><p> var 函数名 &#x3D; function 函数名(形参列表){  函数体  }</p><ul><li><strong>Java 中函数允许重载。但是在 JS 中函数的重载会直接覆盖掉上一次的定义</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="comment">//无参函数</span></span><br><span class="line">        <span class="keyword">var</span> test1 = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;无参函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// test1();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//有参函数</span></span><br><span class="line">        <span class="keyword">var</span> test2 = <span class="keyword">function</span> (<span class="params">a,b</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;有参函数被调用了,a的值是&quot;</span> + a + <span class="string">&quot;b的值是&quot;</span> + b)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// test2(10,12);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//带返回值有参函数</span></span><br><span class="line">        <span class="keyword">var</span> test3 = <span class="keyword">function</span> (<span class="params">a,b</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="title function_">test3</span>(<span class="number">10</span>,<span class="number">12</span>));</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="函数的arguments隐形参数"><a href="#函数的arguments隐形参数" class="headerlink" title="函数的arguments隐形参数"></a>函数的arguments隐形参数</h4><p>只能在function函数内，，与java中的可变形参类型，其本身也是一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// alert(arguments.length);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="variable language_">arguments</span>[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// fun(1,&quot;abc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//编写一个函数，用于计算所有参数相加的和并返回</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1,num2</span>)&#123;<span class="comment">//此处num1，num2不会影响隐形参数</span></span><br><span class="line">            <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span> ; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_">typeof</span>(<span class="variable language_">arguments</span>[i]) == <span class="string">&quot;number&quot;</span>)</span><br><span class="line">                sum += <span class="variable language_">arguments</span>[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;abc&quot;</span>,<span class="number">5</span>));</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="js自定义对象"><a href="#js自定义对象" class="headerlink" title="js自定义对象"></a>js自定义对象</h3><p>①Object形式的自定义对象</p><p>对象的定义：</p><p>​var 变量名 &#x3D; new Object(); &#x2F;&#x2F;对象实例</p><p>​变量名.属性名 &#x3D; 值  &#x2F;&#x2F;定义一个属性</p><p>​变量名.函数名 &#x3D; function(){}  &#x2F;&#x2F;定义一个函数</p><p>对象的访问：</p><p>​变量名.属性名 &#x2F; 函数名();</p><p>②{}形式自定义对象</p><p>对象的定义：</p><p>​var 变量名 &#x3D; {} &#x2F;&#x2F;空对象</p><p>​var 变量名 &#x3D; {</p><p>​属性名：值,&#x2F;&#x2F;定义一个属性</p><p>​属性名：值,&#x2F;&#x2F;定义一个属性</p><p>​函数名：function(){}   &#x2F;&#x2F;定义一个函数</p><p>​}</p><p>​对象的访问：</p><p>​变量名.属性名 &#x2F; 函数名();</p><h3 id="js中的事件"><a href="#js中的事件" class="headerlink" title="js中的事件"></a>js中的事件</h3><p>常用事件：</p><ul><li>onload 加载完成事件： 页面加载完成之后，常用于做页面 js 代码初始化操作 </li><li>onclick 单击事件： 常用于按钮的点击响应操作。 </li><li>onblur 失去焦点事件： 常用用于输入框失去焦点后验证其输入内容是否合法。 </li><li>onchange 内容发生改变事件： 常用于下拉列表和输入框内容发生改变后操作 </li><li>onsubmit 表单提交事件： 常用于表单提交前，验证所有表单项是否合法。</li></ul><h4 id="事件的注册-绑定"><a href="#事件的注册-绑定" class="headerlink" title="事件的注册(绑定)"></a>事件的注册(绑定)</h4><p>概念：可以理解为告诉服务器在事件响应后需要执行哪些代码</p><p><strong>事件的注册分为静态注册和动态注册</strong></p><p>静态注册：通过html标签的事件属性赋予事件响应后的代码</p><p>动态注册：先通过js代码得到标签的dom对象，再通过dom对象.事件名 &#x3D; function(){} 这种形式赋予响应后的代码。</p><p>动态注册的基本代码：1.获取标签对象 2.标签对象.事件名 &#x3D; function(){};</p><p>关于onsubmit提交事件的举例，其他事件同理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单提交事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//静态注册</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">form</span> ()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//要验证所有表单项是否合法，如有一个不合法则要阻止表单的提交</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;静态注册表单发现不合法&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//动态注册</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//window.onload是固定写法，onload是文档加载完自动调用的方法，获取元素都需要在文档加载完之后执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//document是js语言提供的一个对象(文档)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//getElementById是通过id获取某一个具体的标签对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//1.获取标签对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;1001&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//2.通过标签对象.事件名 = function()&#123;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            form.<span class="property">onsubmit</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&quot;动态注册表单发现不合法&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//只有此处为true，发现不合法一样提交，除非改成false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--return false可以阻止表单的提交--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://year21.top&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return form()&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;静态注册&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://year21.top&quot;</span> <span class="attr">id</span>=<span class="string">&quot;1001&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;动态注册&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="DOM模型"><a href="#DOM模型" class="headerlink" title="DOM模型"></a>DOM模型</h3><p>DOM：文档对象模型(Document Object Model)</p><p>可以理解为把文档中的标签和文本、属性转换为对象来管理，只要属于这三种之一都是节点</p><p><img src="https://s1.ax1x.com/2022/04/02/qIZzaq.png" alt="DOM模型"></p><p>**Document 对象的理解： **</p><p>①Document 它管理了所有的 HTML 文档内容。 </p><p>②document 它是一种树结构的文档。有层级关系。 </p><p>③它让我们把所有的标签 都 对象化 </p><p>④我们可以通过 document 访问所有的标签对象</p><h4 id="Document对象的方法"><a href="#Document对象的方法" class="headerlink" title="Document对象的方法"></a>Document对象的方法</h4><p>①document.getElementById(elementId) 通过标签的 id 属性查找标签 dom 对象，elementId 是标签的 id 属性值 ，返回单个对象</p><p>②document.getElementsByName(elementName) 通过标签的 name 属性查找标签 dom 对象，elementName 标签的 name 属性值，返回一个集合 </p><p>③document.getElementsByTagName(tagname) 通过标签名查找标签 dom 对象。tagname 是标签名 </p><p>④document.createElement( tagName) 方法，通过给定的标签名，创建一个标签对象。tagName 是要创建的标签名</p><ul><li>优先顺序 ①-②-③-④</li></ul><h4 id="节点的属性和方法"><a href="#节点的属性和方法" class="headerlink" title="节点的属性和方法"></a>节点的属性和方法</h4><p><strong>节点可以理解为标签对象，但除了标签，文本和注释也可以是节点，通常情况下把这些不能操作的忽略了而已</strong></p><p><strong>方法</strong>： </p><p>通过具体的元素节点调用 getElementsByTagName() 方法，获取当前节点的指定标签名孩子节点 </p><p>appendChild( oChildNode ) 方法，可以添加一个子节点，oChildNode 是要添加的孩子节点 </p><p><strong>属性</strong>： </p><p>childNodes 属性，获取当前节点的所有子节点 </p><p>firstChild 属性，获取当前节点的第一个子节点 </p><p>lastChild 属性，获取当前节点的最后一个子节点 </p><p>parentNode 属性，获取当前节点的父节点 </p><p>nextSibling 属性，获取当前节点的下一个节点 </p><p>previousSibling 属性，获取当前节点的上一个节点 </p><p>className 用于获取或设置标签的 class 属性值 </p><p>innerHTML 属性，表示获取&#x2F;设置起始标签和结束标签中的内容 </p><p>innerText 属性，表示获取&#x2F;设置起始标签和结束标签中的文本</p><hr><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><img src="https://s1.ax1x.com/2022/04/02/qIeHT1.png" alt="部分表达式"></p><p><img src="https://s1.ax1x.com/2022/04/02/qIeLY6.png" alt="部分表达式"></p><p>部分使用表达式代码举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求字符串中，是否包含字母e</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = new RegExp(&quot;e&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /e/; // 也是正则表达式对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求字符串中，是否包含字母a或b或c</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /[abc]/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求字符串，是否包含小写字母</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /[a-z]/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求字符串，是否包含任意大写字母</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /[A-Z]/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求字符串，是否包含任意数字</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /[0-9]/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求字符串，是否包含字母，数字，下划线</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /\w/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求 字符串中是否包含至少一个a</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /a+/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求 字符串中是否 *包含* 零个 或 多个a</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /a*/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求 字符串是否包含一个或零个a</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /a?/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求 字符串是否包含连续三个a</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /a&#123;3&#125;/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求 字符串是否包 至少3个连续的a，最多5个连续的a</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /a&#123;3,5&#125;/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求 字符串是否包 至少3个连续的a，</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /a&#123;3,&#125;/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求 字符串必须以a结尾</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /a$/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 表示要求 字符串必须以a打头</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /^a/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 要求字符串中是否*包含* 至少3个连续的a </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//在某种以上此包含和至少同个意思</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /a&#123;3,5&#125;/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 要求字符串，从头到尾都必须完全匹配</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var patt = /^a&#123;3,5&#125;$/;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> patt = <span class="regexp">/^\w&#123;5,12&#125;$/</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> str = <span class="string">&quot;wzg168···&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>( patt.<span class="title function_">test</span>(str) );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><p>Jquery是辅助js开发的js类库</p><ul><li>使用JQuery必须引进JQuery库</li><li>$就是jQuery的别称,而jQuery就是jQuery库提供的一个函数，同时 $也是jQuery的一个对象.</li></ul><h3 id="JQuery核心函数"><a href="#JQuery核心函数" class="headerlink" title="JQuery核心函数"></a>JQuery核心函数</h3><p>$ 是 jQuery 的核心函数，$()就是调用$这个函数 </p><p>①传入参数为 [ 函数 ] 时： 表示页面加载完成之后。相当于 window.onload &#x3D; function(){} </p><p>②传入参数为 [ HTML 字符串 ] 时： 会对我们创建这个 html 标签对象 </p><p>③传入参数为 [ 选择器字符串 ] 时： </p><p>$(“#id 属性值”); id 选择器，根据 id 查询标签对象 </p><p>$(“标签名”); 标签名选择器，根据指定的标签名查询标签对象 </p><p>$(“.class 属性值”); 类型选择器，可以根据 class 属性查询标签对象 </p><p>④传入参数为 [ DOM 对象 ] 时： 会把这个 dom 对象转换为 jQuery <strong>对象</strong></p><ul><li><p>JQuery对象的本质：<strong>jQuery 对象是 dom 对象的数组 + jQuery 提供的一系列功能函数</strong></p></li><li><p>jQuery 对象不能使用 DOM 对象的属性和方法 </p></li><li><p>DOM 对象也不能使用 jQuery对象的属性和方法</p></li></ul><p><img src="https://s1.ax1x.com/2022/04/02/qIm90A.png" alt="Dom对象和JQuery对象互转"></p><h3 id="JQuery选择器"><a href="#JQuery选择器" class="headerlink" title="JQuery选择器"></a>JQuery选择器</h3><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><p>①#ID 选择器：根据 id 查找标签对象 </p><p>②.class 选择器：根据 class 查找标签对象</p><p>③element 选择器：根据标签名查找标签对象 </p><p>④*选择器：表示任意的，所有的元素 </p><p>⑤selector1，selector2 组合选择器：合并选择器 1，选择器 2 的结果并返</p><ul><li>补充⑤中的特殊情况：<strong>p.myClass</strong> 表示标签名必须是 p 标签，而且 class 类型还要是 myClass</li></ul><h4 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h4><p>①ancestor descendant 后代选择器 ：在给定的祖先元素下匹配所有的后代元素 </p><p>②parent &gt; child 子元素选择器：在给定的父元素下匹配所有的子元素 </p><p>③prev + next 相邻元素选择器：匹配所有紧接在 prev 元素后的 next 元素 </p><p>④prev ~ sibings 之后的兄弟元素选择器：匹配 prev 元素之后的所有 siblings 元素</p><ul><li>③ ④针对的都是同级的</li></ul><h4 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h4><p><strong>:first</strong> 获取第一个元素 </p><p>**:last **获取最后个元素 </p><p><strong>:not</strong>(selector) 去除所有与给定选择器匹配的元素 </p><p><strong>:even</strong> 匹配所有索引值为偶数的元素，从 0 开始计数 </p><p><strong>:odd</strong> 匹配所有索引值为奇数的元素，从 0 开始计数 </p><p>:eq(index) 匹配一个给定索引值的元素 </p><p>:gt(index) 匹配所有大于给定索引值的元素 </p><p>:lt(index) 匹配所有小于给定索引值的元素 </p><p>:header 匹配如 h1, h2, h3 之类的标题元素 </p><p>:animated 匹配所有正在执行动画效果的元素</p><h4 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h4><p>:contains(text) 匹配包含给定文本的元素 </p><p>:empty 匹配所有不包含子元素或者文本的空元素 </p><p>:parent 匹配含有子元素或者文本的元素 </p><p>:has(selector) 匹配<strong>含有选择器所匹配的元素</strong>  的 <strong>元素</strong></p><h4 id="属性过滤器"><a href="#属性过滤器" class="headerlink" title="属性过滤器"></a>属性过滤器</h4><p>[attribute] 匹配包含给定属性的元素。 </p><p>[attribute&#x3D;value] 匹配给定的属性是某个特定值的元素 </p><p>[attribute!&#x3D;value] 匹配所有不含有指定的属性，或者属性不等于特定值的元素。</p><p> [attribute^&#x3D;value] 匹配给定的属性是以某些值开始的元素 </p><p>[attribute$&#x3D;value] 匹配给定的属性是以某些值结尾的元素 </p><p>[attribute*&#x3D;value] 匹配给定的属性是以包含某些值的元素 [attrSel1] [attrSel2]</p><p>[attrSelN] 复合属性选择器，需要同时满足多个条件时使用。</p><h4 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器"></a>表单过滤器</h4><p><strong>val()可以操作表单项的value的属性值</strong></p><p><strong>each()方法是JQuery对象提供的遍历元素的方法，在遍历的function函数中，有一个this对象就是当前遍历到的dom对象</strong></p><p>:input   匹配所有  input, textarea, select 和 button 元素 </p><p>:text 匹配所有 文本输入框 </p><p>:password 匹配所有的密码输入框 </p><p>:radio 匹配所有的单选框 </p><p>:checkbox 匹配所有的复选框</p><p>:submit 匹配所有提交按钮 </p><p>:image 匹配所有 img 标签 </p><p>:reset 匹配所有重置按钮 </p><p>:button 匹配所有 input type&#x3D;button 按钮 </p><p>:file 匹配所有 input type&#x3D;file 文件上传 </p><p>:hidden 匹配所有不可见元素 display:none </p><h4 id="表单对象属性过滤器"><a href="#表单对象属性过滤器" class="headerlink" title="表单对象属性过滤器"></a>表单对象属性过滤器</h4><p>:enabled 匹配所有可用元素 </p><p>:disabled 匹配所有不可用元素 </p><p>:checked 匹配所有选中的单选，复选，和下拉列表中选中的 option 标签对象 </p><p>:selected 匹配所有选中的 option</p><hr><h3 id="JQuery元素筛选"><a href="#JQuery元素筛选" class="headerlink" title="JQuery元素筛选"></a>JQuery元素筛选</h3><p>eq() 获取给定索引的元素 功能跟 :eq() 一样 </p><p>first() 获取第一个元素 功能跟 :first 一样 </p><p>last() 获取最后一个元素 功能跟 :last 一样 </p><p>filter(exp) 留下匹配的元素 </p><p>is(exp) 判断是否匹配给定的选择器，只要有一个匹配就返回，true </p><p>has(exp) 返回包含有匹配选择器的元素的元素 功能跟 :has 一样 </p><p>not(exp) 删除匹配选择器的元素 功能跟 :not 一样 </p><p>children(exp) 返回匹配给定选择器的子元素 功能跟 parent&gt;child 一样 </p><p>find(exp) 返回匹配给定选择器的后代元素 功能跟 ancestor descendant 一样 </p><p>next() 返回当前元素的下一个兄弟元素 功能跟 prev + next 功能一样 </p><p>nextAll() 返回当前元素后面所有的兄弟元素 功能跟 prev ~ siblings 功能一样 </p><p>nextUntil() 返回当前元素到指定匹配的元素为止的后面元素 </p><p>parent() 返回父元素 </p><p>prev(exp) 返回当前元素的上一个兄弟元素 </p><p>prevAll() 返回当前元素前面所有的兄弟元素 </p><p>prevUnit(exp) 返回当前元素到指定匹配的元素为止的前面元素 </p><p>siblings(exp) 返回所有兄弟元素 </p><p>add() 把 add 匹配的选择器的元素添加到当前 jquery 对象</p><h3 id="jQuery-的属性操作"><a href="#jQuery-的属性操作" class="headerlink" title="jQuery 的属性操作"></a>jQuery 的属性操作</h3><p>html()、text()、val()  <strong>不传参数是获取，传递参数是设置</strong></p><p>html() 它可以设置和获取起始标签和结束标签中的内容。 跟 dom 属性 innerHTML 一样。 </p><p>text() 它可以设置和获取起始标签和结束标签中的文本。 跟 dom 属性 innerText 一样。 </p><p>val() 它可以设置和获取表单项的 value 属性值。 跟 dom 属性 value 一样</p><ul><li><strong>val 方法同时设置多个表单项的选中状态</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#multiple,#single,:radio,:checkbox&quot;).val([&quot;radio2&quot;,&quot;checkbox1&quot;,&quot;checkbox3&quot;,&quot;mul1&quot;,&quot;mul4&quot;,&quot;sin3&quot;]);</span><br></pre></td></tr></table></figure><p><strong>attr() 、prop()传一个参数是获取，传两个参数是设置</strong></p><p>attr() 可以设置和获取属性的值，不推荐操作 checked、readOnly、selected、disabled 等等，会返回undefined</p><ul><li>attr 方法还可以操作非标准的属性。比如自定义属性：abc,bbj</li></ul><p>prop() 可以设置和获取属性的值,只推荐操作 checked、readOnly、selected、disabled 等等，会返回true&#x2F;false</p><p>html会把标签也转成标签效果，text只是文本</p><h3 id="DOM-的增删"><a href="#DOM-的增删" class="headerlink" title="DOM 的增删"></a>DOM 的增删</h3><ul><li><strong>在事件响应的function函数中，有一个this对象，这个this对象是当前正在响应事件的dom对象。</strong></li></ul><p><strong>confirm() 是js语言提供的一个确认提示框函数。当用户点击了确定，就返回 true。当用户点击了取消，就返回 false</strong></p><p><strong>内部插入</strong>： </p><p>appendTo()  a.appendTo(b) 把 a 插入到 b 子元素末尾，成为最后一个子元素 </p><p>prependTo() a.prependTo(b) 把 a 插到 b 所有子元素前面，成为第一个子元素 </p><p><strong>外部插入</strong>： </p><p>insertAfter() a.insertAfter(b) 得到 ba </p><p>insertBefore() a.insertBefore(b) 得到 ab </p><p><strong>替换</strong>: </p><p>replaceWith() a.replaceWith(b) 用 b 替换掉 a </p><p>replaceAll() a.replaceAll(b) 用 a 替换掉所有 b </p><p><strong>删除</strong>： </p><p>remove() a.remove(); 删除 a 标签 </p><p>empty() a.empty(); 清空 a</p><h3 id="CSS样式操作"><a href="#CSS样式操作" class="headerlink" title="CSS样式操作"></a>CSS样式操作</h3><p>addClass() 添加样式 </p><p>removeClass() 删除样式 </p><p>toggleClass() 有就删除，没有就添加样式。</p><p>offset() 获取和设置元素的坐标。</p><h3 id="jQuery-动画"><a href="#jQuery-动画" class="headerlink" title="jQuery 动画"></a>jQuery 动画</h3><p><strong>基本动画</strong> </p><p>show() 将隐藏的元素显示 </p><p>hide() 将可见的元素隐藏。 </p><p>toggle() 可见就隐藏，不可见就显示。 </p><p>以上动画方法都可以添加参数。 </p><p>1、第一个参数是动画 执行的时长，以毫秒为单位 </p><p>2、第二个参数是动画的回调函数 (动画完成后自动调用的函数)</p><p>**淡入淡出动画 **</p><p>fadeIn() 淡入（慢慢可见） </p><p>fadeOut() 淡出（慢慢消失） </p><p>fadeTo() 在指定时长内慢慢的将透明度修改到指定的值。0 透明，1 完成可见，0.5 半透明 </p><p>fadeToggle() 淡入&#x2F;淡出 切换</p><h3 id="JQuery事件操作"><a href="#JQuery事件操作" class="headerlink" title="JQuery事件操作"></a>JQuery事件操作</h3><p>触发情况：</p><p>1、jQuery 的页面加载完成之后是浏览器的内核解析完页面的标签创建好 DOM 对象之后就会马上执行。 </p><p>2、原生 js 的页面加载完成之后，除了要等浏览器内核解析完标签创建好 DOM 对象，还要等标签显示时需要的内容加载完成</p><p>执行次数说明：</p><p>1、原生 js 的页面加载完成之后，只会执行最后一次的赋值函数。 </p><p>2、jQuery 的页面加载完成之后是全部把注册的 function 函数，依次顺序全部执行</p><p>执行先后顺序：</p><ul><li><strong>jQuery 页面加载优先于原生 js 的页面加载</strong></li></ul><h4 id="jQuery-中其他事件处理方法"><a href="#jQuery-中其他事件处理方法" class="headerlink" title="jQuery 中其他事件处理方法"></a><strong>jQuery 中其他事件处理方法</strong></h4><p>click() 它可以绑定单击事件，以及触发单击事件(传函数点击、不传函数是触发)</p><p>mouseover() 鼠标移入事件 </p><p>mouseout() 鼠标移出事件 </p><p>bind() 可以给元素一次性绑定一个或多个事件。 </p><p>one() 使用上跟 bind 一样。但是 one 方法绑定的事件只会响应一次。</p><p>unbind() 跟 bind 方法相反的操作，解除事件的绑定 live() 也是用来绑定事件。它可以用来绑定选择器匹配的所有元素的事件。哪怕这个元素是后面动态创建出 来的也有效</p><h4 id="事件的冒泡"><a href="#事件的冒泡" class="headerlink" title="事件的冒泡"></a>事件的冒泡</h4><p>事件的冒泡：事件的冒泡是指，父子元素同时监听同一个事件。当触发子元素的事件的时候，同一个事件也被传递到了父元素的事件里去响应。</p><p>阻止事件冒泡：在子元素事件函数体内，return false; 可以阻止事件的冒泡传递。</p><h4 id="javaScript-事件对象"><a href="#javaScript-事件对象" class="headerlink" title="javaScript 事件对象"></a>javaScript 事件对象</h4><p>js事件对象：是封装有触发的事件信息的一个 javascript 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.原生 javascript 获取 事件对象</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;areaDiv&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.jQuery 代码获取 事件对象</span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&quot;#areaDiv&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//3.使用 bind 同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。</span></span><br><span class="line">$(<span class="string">&quot;#areaDiv&quot;</span>).<span class="title function_">bind</span>(<span class="string">&quot;mouseover mouseout&quot;</span>,<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (event.<span class="property">type</span> == <span class="string">&quot;mouseover&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标移入&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="property">type</span> == <span class="string">&quot;mouseout&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标移出&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>概念：xml是可扩展的标记性语言。</p><p>作用：1、用来保存数据，而且这些数据有自我描述性</p><p>​2、还可以作为项目或模块的配置文件</p><p>1.XML 命名规则</p><ul><li><p>名称可以含字母、数字以及其他的字符</p></li><li><p>名称不能以数字或者标点符号开始</p></li><li><p>名称不能以字符 “xml”（或者 XML、Xml）开始</p></li><li><p>名称不能包含空格</p></li><li><p>xml 中的元素（标签）也 分成 单标签和双标签： </p><p>单标签 格式： &lt;标签名 属性&#x3D;”值” 属性&#x3D;”值” …… &#x2F;&gt; </p><p>双标签 格式：&lt; 标签名 属性&#x3D;”值” 属性&#x3D;”值” ……&gt;文本数据或子标签</p></li></ul><p>2.XML的属性</p><ul><li>属性可以提供元素的额外信息</li><li>一个标签上可以书写多个属性。每个属性的值必须使用 引号 引起来。</li></ul><p>3.文本区域（CDATA 区）</p><p>CDATA 格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[ 这里可以把你输入的字符原样显示，不会解析 xml ]]&gt;</span><br></pre></td></tr></table></figure><h3 id="dom4j解析"><a href="#dom4j解析" class="headerlink" title="dom4j解析"></a>dom4j解析</h3><p>具体步骤：</p><p>①通过创建 SAXReader 对象。来读取 xml 文件，获取 Document 对象 </p><p>②通过 Document 对象。拿到 XML 的根元素对象 </p><p>③通过根元素对象。获取所有的 book 标签对象 </p><p>④遍历每个 book 标签对象。然后获取到 book 标签对象内的每一个元素，再通过 getText() 方法拿到起始标签和结 束标签之间的文本内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    读取books.xml文件生成book类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.读取books.xml文件</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过document对象获取根元素</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> saxReader.read(<span class="string">&quot;src\\books.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.通过根元素获取book标签对象</span></span><br><span class="line">        <span class="comment">//element()和elements()都是通过标签名查找子元素</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        List&lt;Element&gt; books = rootElement.elements();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.遍历，处理每一个book标签转换为book类</span></span><br><span class="line">        <span class="keyword">for</span> (Element book : books)&#123;</span><br><span class="line">            <span class="comment">//asXML()方法把标签对象转换为标签字符串</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">name</span> <span class="operator">=</span> book.element(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="comment">//getText()方法可以获取标签中的文本</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">textName</span> <span class="operator">=</span> name.getText();</span><br><span class="line"><span class="comment">//            System.out.println(name.asXML());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//elementText()直接获取指定标签的文本内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> book.elementText(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> book.elementText(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sn</span> <span class="operator">=</span> book.attributeValue(<span class="string">&quot;sn&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">Book</span>(sn,textName, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(price),author));</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>1.从本地文件拖入浏览器访问与通过浏览器ip访问的区别</p><p><img src="https://s1.ax1x.com/2022/04/02/qInMKe.png" alt="本地文件拖入访问"></p><p><img src="https://s1.ax1x.com/2022/04/02/qIn8UI.png" alt="通过浏览器ip访问"></p><hr><p>2.Root工程访问的特殊情况</p><ul><li><p><a href="http://IP:port">http://IP:port</a>    &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 没有工程名的时候，默认访问的是 ROOT 工程</p></li><li><p><a href="http://ip:port/工程名/">http://ip:port/工程名/</a> &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 没有资源名，默认访问 index.html 页面</p></li></ul><p>3.IDEA整合tomcat</p><p>整合过程过于冗长，参考csdn收藏</p><p><img src="https://s1.ax1x.com/2022/04/02/qInt8f.png" alt="动态web工程的目录结构"></p><hr><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlet是java的运行在服务器上的小程序，<strong>用于接受客户端发送过来的请求，并响应数据给客户端</strong></p><p>Servlet是JavaEE的规范之一。规范就是接口</p><p>Servlet是JavaWeb三大组件之一，三大组件分别是Servlet程序、Fiter过滤器、Listen监听器，</p><ul><li>三大组件被tomcat服务器初始化的先后顺序是Listen监听器、Fiter过滤器、Servlet程序</li></ul><h3 id="Servlet技术"><a href="#Servlet技术" class="headerlink" title="Servlet技术"></a>Servlet技术</h3><h4 id="实现Servlet程序"><a href="#实现Servlet程序" class="headerlink" title="实现Servlet程序"></a>实现Servlet程序</h4><p>①编写一个类去<strong>实现</strong> Servlet <strong>接口</strong> </p><p>②实现 service 方法，处理请求，并响应数据 </p><p>③到 web.xml 中去配置 servlet 程序的访问</p><p>1-2步骤代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//service()方法专用于接受请求和响应数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Servlet被访问了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤3代码示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- servlet标签用于给Tomcat配置servlet程序   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- servlet-name标签用于给servlet程序起一个别名(通常是类名) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- servlet-class是servlet程序的全类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servletstudy.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- servlet-mapping标签用于给servlet程序配置访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--此处servlet-name标签与上面不同，此处是用于给说明配置地址是给哪一个servlet程序使用的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- url-pattern标签配置访问地址       --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- / 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">                /hello 表示地址为：http://ip:port/工程路径/hello &lt;br/&gt;      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/04/02/qIn2xU.png" alt="资源访问图解"></p><h4 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h4><p>①执行 Servlet 构造器方法 </p><p>②执行 init 初始化方法 </p><p><strong>第①、②步，是在第一次访问的时候创建 Servlet 程序会调用。</strong></p><p>③执行 service 方法 第三步，每次访问都会调用。 </p><p>④执行 destroy 销毁方法 <strong>第④步，在 web 工程停止的时候调用。</strong></p><h4 id="Servlet请求的分发处理"><a href="#Servlet请求的分发处理" class="headerlink" title="Servlet请求的分发处理"></a>Servlet请求的分发处理</h4><p>较少使用</p><p>通常使用其继承类HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="comment">//service()方法专用于接受请求和响应数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Servlet被访问了&quot;</span>);</span><br><span class="line">        <span class="comment">// 类型转换（因为它有 getMethod()方法）</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line"><span class="comment">// 获取请求的方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> httpServletRequest.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method)) &#123;</span><br><span class="line">            doGet();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(method)) &#123;</span><br><span class="line">            doPost();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 做 get 请求的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get 请求&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;get 请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 做 post 请求的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post 请求&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;post 请求&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="继承类HttpServlet实现Servlet程序"><a href="#继承类HttpServlet实现Servlet程序" class="headerlink" title="继承类HttpServlet实现Servlet程序"></a>继承类HttpServlet实现Servlet程序</h4><ul><li><p><strong>在idea中可以通过 包名 – create new servlet 快速创建，仅需修改xml配置文件</strong>，</p><p>因此以上这两种方法已不通用</p></li></ul><p>一般情况下都是使用继承 HttpServlet 类的方式去实现 Servlet 程序。 </p><p>实现步骤：</p><p>①编写一个类去<strong>继承</strong> HttpServlet <strong>类</strong> </p><p>②根据业务需要重写 doGet 或 doPost 方法 </p><p>③到 web.xml 中的配置 Servlet 程序的访问地址</p><ul><li>xml配置与第一个类似</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletTest</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    doGet在get请求时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doGet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    doPost在Post请求时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doPost&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Servlet的继承体系"><a href="#Servlet的继承体系" class="headerlink" title="Servlet的继承体系"></a>Servlet的继承体系</h4><p><img src="https://s1.ax1x.com/2022/04/02/qInOMD.png" alt="继承体系"></p><hr><h3 id="ServletConfig类"><a href="#ServletConfig类" class="headerlink" title="ServletConfig类"></a>ServletConfig类</h3><p>见命知意即可知其是servlet程序的配置信息类</p><p>Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建 </p><p><strong>Servlet 程序默认是第一次访问的时候创建(生命周期的1、2步)，ServletConfig 是每个 Servlet 程序创建时，就创建一个对应的 ServletConfig对象</strong></p><p>其作用：</p><p>①获取servlet程序的别名，即servlet—name的值</p><p>②获取初始化参数init-param  获取需要在servlet标签中设置</p><p>③获取ServletContext的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①获取servlet程序的别名，即servlet—name的值</span></span><br><span class="line">      System.out.println(servletConfig.getServletName());</span><br><span class="line">      <span class="comment">//②获取初始化参数init-param</span></span><br><span class="line">      System.out.println(<span class="string">&quot;初始化参数的值是：&quot;</span> + servletConfig.getInitParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">      <span class="comment">//③获取ServletContext的对象</span></span><br><span class="line">      System.out.println(<span class="string">&quot;初始化参数的值是：&quot;</span> + servletConfig.getServletContext());</span><br></pre></td></tr></table></figure><ul><li><p><strong>重写init-param()方法需要在方法体内调用super(config)，因此init-param的参数保存在父类定义的config中</strong></p><p><strong>子类重写的init-param()只有这个config参数，但其属性值为空，因为报了空指针异常</strong></p></li></ul><h3 id="ServletContext类"><a href="#ServletContext类" class="headerlink" title="ServletContext类"></a>ServletContext类</h3><p>1、ServletContext 是一个接口，它表示 Servlet 上下文对象 </p><p>2、<strong>一个 web 工程，只有一个 ServletContext 对象实例，与 ServletConfig对象是完全不同的</strong></p><p>3、<strong>ServletContext <strong>对象是一个</strong>域对象</strong>。 <strong>域对象是指可以像 Map 一样存取数据的对象</strong></p><p>​  这里的域指的是存取数据的操作范围，整个 web 工程。</p><p>4、ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁。 </p><table><thead><tr><th align="left"></th><th align="left">存数据</th><th align="left">取数据</th><th align="left">删除数据</th></tr></thead><tbody><tr><td align="left">Map</td><td align="left">put()</td><td align="left">get()</td><td align="left">remove()</td></tr><tr><td align="left">域对象</td><td align="left">setAttribute()</td><td align="left">getAttribute()</td><td align="left">removeAttribute()</td></tr></tbody></table><p>5、ServletContext 类的四个作用 </p><p>①获取 web.xml 中配置的上下文参数 context-param </p><p>②获取当前的工程路径，格式: &#x2F;工程路径 </p><p>③获取工程部署后在服务器硬盘上的绝对路径 </p><p>④像 Map 一样存取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//获取 ServletContext的对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletConfig().getServletContext();</span><br><span class="line">        <span class="comment">//①获取 web.xml 中配置的上下文参数 context-param</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> context.getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;context的值是：&quot;</span> + username);</span><br><span class="line">        <span class="comment">//②获取当前的工程路径，格式: /工程路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前工程路径是：&quot;</span> + context.getContextPath());</span><br><span class="line">        <span class="comment">//③获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        斜杠的含义是：http://ip:port/工程名 ===  idea 对应工程的 web目录 === xml配置文件中的contextPath的值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前工程的绝对路径是：&quot;</span> + context.getRealPath(<span class="string">&quot;/&quot;</span>));<span class="comment">//此时“/”后代表已经映射到了工程的 web目录下</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">//④像 Map 一样存取数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ContextServlet中设置之前获取域数据的key值是：&quot;</span> + context.getAttribute(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ContextServlet中获取域数据的key值是：&quot;</span> + context.getAttribute(<span class="string">&quot;username&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="HttpServletRequest类"><a href="#HttpServletRequest类" class="headerlink" title="HttpServletRequest类"></a>HttpServletRequest类</h3><p>作用：<strong>只要有请求进入Tomcat服务器，Tomcat就会把请求的Http协议信息封装到一个Request对象中</strong></p><p>​<strong>然后传递到 service 方法（doGet 和 doPost）中给我们使用。就通过 HttpServletRequest 对象，获取到所有请求的信息</strong></p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>①getRequestURI() 获取请求的资源路径 </p><p>②getRequestURL() 获取请求的统一资源定位符（绝对路径） </p><p>③getRemoteHost() 获取客户端的 ip 地址 </p><p>④getHeader() 获取请求头 </p><p>⑤getParameter() 获取请求的参数 </p><p>⑥getParameterValues() 获取请求的参数（多个值的时候使用） </p><p>⑦getMethod() 获取请求的方式 GET 或 POST</p><p>⑧setAttribute(key, value); 设置域数据 </p><p>⑨getAttribute(key); 获取域数据 </p><p>⑩getRequestDispatcher() 获取请求转发对象</p><h3 id="请求的转发"><a href="#请求的转发" class="headerlink" title="请求的转发"></a>请求的转发</h3><p>请求转发是指服务器收到请求后，从一次资源跳转到另一个资源的操作叫请求转发。</p><p><img src="https://s1.ax1x.com/2022/04/02/qIuLYq.png" alt="请求的转发"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">资源请求Servlet1后转发至Servlet2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet1:&quot;</span> + username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//servlet1验证</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;Servlet1Done&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转发至servlet2</span></span><br><span class="line">        <span class="comment">//请求转发的参数必须要以/斜杠开始，斜杠表示http:localhost:ip/工程路径/ ，映射到idea的web工程下</span></span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> req.getRequestDispatcher(<span class="string">&quot;/servlet2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指明前往</span></span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//查看参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet2查看请求参数&quot;</span> + username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查看Servlet1的业务是否完成</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> req.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sevlet1的业务完成&quot;</span> + key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Servlet2处理自己的业务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请求的转发完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Base标签的作用"><a href="#Base标签的作用" class="headerlink" title="Base标签的作用"></a>Base标签的作用</h3><p><strong>base标签可以保证请求的转发永远以某个地址为基础进行操作</strong></p><p>base 标签设置页面相对路径工作时href 的属性进行操作，<strong>href 属性就是参数的地址值</strong></p><p>base标签通常声明在title标签下方</p><p><img src="https://s1.ax1x.com/2022/04/02/qIKeXD.png" alt="示例说明"></p><h3 id="web-中-x2F-斜杠的不同意义"><a href="#web-中-x2F-斜杠的不同意义" class="headerlink" title="web 中 &#x2F; 斜杠的不同意义"></a>web 中 &#x2F; 斜杠的不同意义</h3><p>在 web 中 &#x2F; 斜杠 是一种绝对路径。</p><ul><li><p>&#x2F; 斜杠被浏览器解析</p><p>得到的地址是：<a href="http://ip:port/">http://ip:port/</a> </p></li><li><p>&#x2F; 斜杠被服务器解析</p><p>得到的地址是：<a href="http://ip:port/工程路径">http://ip:port/工程路径</a> </p><p>1、&#x2F;servlet1 </p><p>2、servletContext.getRealPath(“&#x2F;”); </p><p>3、request.getRequestDispatcher(“&#x2F;”); </p></li><li><p>特殊情况： response.sendRediect(“&#x2F;”); 把斜杠发送给浏览器解析。得到 <a href="http://ip:port/">http://ip:port/</a></p></li></ul><h3 id="HttpSevletResponse类"><a href="#HttpSevletResponse类" class="headerlink" title="HttpSevletResponse类"></a>HttpSevletResponse类</h3><p>与HttpServletRequest 类一样。只要每次请求进来，Tomcat服务器就会创建一个HttpSevletResponse的对象。</p><ul><li>HttpServletRequest 表示请求过来的信息</li><li>HttpServletResponse 表示所有响应的信息，通用于设置返回给客户端的信息</li></ul><h4 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h4><p>往客户端回传数据需要使用以下两个流</p><ul><li>字节流 getOutputStream(); 常用于下载（传递二进制数据） </li><li>字符流 getWriter();        常用于回传字符串（常用）</li></ul><p>需要注意的是两个流只能二选一。不然报错</p><h4 id="给客户端回传数据"><a href="#给客户端回传数据" class="headerlink" title="给客户端回传数据"></a>给客户端回传数据</h4><ul><li>浏览器和服务器字符集不一致会出现中文乱码的现象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseIOServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// 要求 ： 往客户端回传 字符串 数据。</span></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">writer.write(<span class="string">&quot;response&#x27;s content!!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出现中文乱码现象的解决办法：</span></span><br><span class="line"><span class="comment">它会同时设置服务器和客户端都使用 UTF-8 字符集，还设置了响应头</span></span><br><span class="line"><span class="comment">此方法一定要在获取流对象之前调用才有效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h4><p>概念：客户端给服务器发送请求，服务器给予客户端新的资源地址，允许客户端访问新的资源地址。(重定向的出现有可能是旧地址不可访问)</p><p><img src="https://s1.ax1x.com/2022/04/02/qIKNng.png" alt="请求重定向解析"></p><p>方案一：(不推荐)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">客户端请求访问respond1重定向至response2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;response1被访问过&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置状态码302表示重定向</span></span><br><span class="line">        resp.setStatus(<span class="number">302</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应头并说明访问的新地址</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;location&quot;</span>,<span class="string">&quot;http://localhost:8080/Servlet2/response2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//处理被重定向过来的请求</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">w</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        w.write(<span class="string">&quot;response2已访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案二：(推荐)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Response1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;response1被访问过&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置状态码302表示重定向</span></span><br><span class="line">        <span class="comment">//resp.setStatus(302); 此时302码是固定的因此不需要再设置</span></span><br><span class="line">        <span class="comment">//给客户端返回新地址</span></span><br><span class="line">resp.sendRedirect(<span class="string">&quot;http://localhost:8080/Servlet2/response2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><p>概念：客户端与服务端之间通信发送的数据需要遵守的规则</p><p>http协议的数据也叫报文。</p><ul><li><strong>在Http协议中有一个请求头Referer会在发起请求的时候把请求地址同时发送给服务器</strong></li><li><strong>因此服务器可以通过rep.getHead(“Referer”)方法获取发起请求的地址，以达到返回原网页的需求</strong></li></ul><p><img src="https://s1.ax1x.com/2022/04/02/qIKycT.png" alt="Http协议请求头"></p><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p>1.请求行</p><p>①请求的方式  GET</p><p>②请求的资源路径[+？+请求参数]   注：[ ]代表可选</p><p>③请求的协议和版本号  HTTP&#x2F;1.1</p><p>2.请求头</p><p>key：value 组成不同的键值对，表示不同的含义</p><p><img src="https://s1.ax1x.com/2022/04/02/qIKRHJ.png" alt="GET请求抓包分析"></p><ul><li>常见的GET请求：</li></ul><p>​1、form 标签 method&#x3D;get </p><p>​2、a 标签 </p><p>​3、link 标签引入 css </p><p>​4、Script 标签引入 js 文件 </p><p>​5、img 标签引入图片 </p><p>​6、iframe 引入 html 页面 </p><p>​7、在浏览器地址栏中输入地址后敲回车</p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>1.请求行</p><p>①请求的方式  POST</p><p>②请求的资源路径[+？+请求参数]   注：[ ]代表可选</p><p>③请求的协议和版本号  HTTP&#x2F;1.1</p><p>2.请求头</p><p>①key：value 组成不同的键值对，不同的请求头表示不同的含义</p><p>②<strong>空行</strong></p><p>3.请求体</p><p>①(即为发送给服务器的数据)</p><p><img src="https://s1.ax1x.com/2022/04/02/qIK7jO.png" alt="POST请求抓包解析"></p><ul><li>常见的POST请求<ul><li>form 标签 method&#x3D;pos</li></ul></li></ul><h3 id="响应的HTTP协议格式"><a href="#响应的HTTP协议格式" class="headerlink" title="响应的HTTP协议格式"></a>响应的HTTP协议格式</h3><p>1.响应行</p><p>①响应的协议和版本号</p><p>②响应状态码</p><p>③响应状态描述符</p><p>2.响应头</p><p>①key：value  不同的响应头，有不同的含义</p><p>②空行</p><p>3.响应体</p><p>①即服务端回传给客户端的数据</p><p><img src="https://s1.ax1x.com/2022/04/02/qIKbuD.png" alt="响应的HTTP协议分析"></p><ul><li>常见的响应码<ul><li>200 表示请求成功</li><li>302     表示请求重定向</li><li>404     表示请求的资源地址不存在</li><li>500     表示服务器已接受请求但服务器内部存在错误</li></ul></li></ul><h3 id="MIME类型"><a href="#MIME类型" class="headerlink" title="MIME类型"></a>MIME类型</h3><p>MIME 是 HTTP 协议中数据类型</p><ul><li>常见的 MIME 类型：</li></ul><p><img src="https://s1.ax1x.com/2022/04/02/qIKqDe.png" alt="MIME 类型"></p><p><img src="C:\Users\hcxs1986\AppData\Roaming\Typora\typora-user-images\image-20220322000201058.png"></p><hr><h2 id="JavaEE的三层架构"><a href="#JavaEE的三层架构" class="headerlink" title="JavaEE的三层架构"></a>JavaEE的三层架构</h2><ul><li>通常在提示错误信息的同时回传数据使用request域对象保存数据</li></ul><p><img src="https://s1.ax1x.com/2022/04/02/qIKLHH.png" alt="JavaEE"></p><p><img src="https://s1.ax1x.com/2022/04/02/qIKjUA.png" alt="各个包层"></p><hr><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>jsp全称是java serve pages的服务器页面，主要用于代替sevlet回传html页面的数据</p><p><strong>JSP本质上是个Servlet程序。</strong></p><h3 id="jsp头部的page指令"><a href="#jsp头部的page指令" class="headerlink" title="jsp头部的page指令"></a>jsp头部的page指令</h3><p>page指令可用修改jsp页面中的一些重要属性或行为</p><table><thead><tr><th align="left">language 属性</th><th align="left">值只能是 java.表示翻译的得到的是 java 语言的</th></tr></thead><tbody><tr><td align="left">contentType 属性</td><td align="left">设置响应头 contentType 的数据类型</td></tr><tr><td align="left">pageEncoding 属性</td><td align="left">设置当前 jsp 页面的编码</td></tr><tr><td align="left">import 属性</td><td align="left">给当前 jsp 页面导入需要使用的类包</td></tr><tr><td align="left">autoFlush 属性</td><td align="left">设置是否自动刷新 out 的缓冲区，默认为 true</td></tr><tr><td align="left">buffer 属性</td><td align="left">设置 out 的缓冲区大小。默认为 8KB</td></tr><tr><td align="left">errorPage 属性</td><td align="left">设置当前 jsp发生错误后，需要跳转到哪个页面去显示错误信息</td></tr><tr><td align="left">isErrorPage 属性</td><td align="left">设置当前 jsp 页面是否是错误页面。是的话，就可以使用 exception 异常对象</td></tr><tr><td align="left">session 属性</td><td align="left">设置当前 jsp 页面是否获取 session 对象,默认为 true</td></tr><tr><td align="left">extends 属性</td><td align="left">给服务器厂商预留的 jsp 默认翻译的 servlet 继承于什么类</td></tr></tbody></table><h3 id="jsp中的常用脚本"><a href="#jsp中的常用脚本" class="headerlink" title="jsp中的常用脚本"></a>jsp中的常用脚本</h3><h4 id="声明脚本"><a href="#声明脚本" class="headerlink" title="声明脚本"></a>声明脚本</h4><p>格式：**&lt;%!  声明java代码 %&gt;**</p><p>作用：给jsp翻译出的java类定义属性和方法或静态代码块、内部类等</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- <span class="number">1.</span>声明类属性--%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; map;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- <span class="number">2.</span>声明<span class="keyword">static</span>静态代码块 --%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- <span class="number">3.</span>声明类的方法 --%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">abc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- <span class="number">4.</span>声明内部类--%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="表达式脚本"><a href="#表达式脚本" class="headerlink" title="表达式脚本"></a>表达式脚本</h4><p>格式：&lt;%&#x3D; 表达式 %&gt;</p><p>作用：在jsp页面输出数据</p><p>特点：</p><p>①所有的表达式脚本都会被翻译到_jspService()方法中</p><p>②表达式脚本都会被翻译成为out.print()输出到页面上</p><p>③_jspService()方法中的对象都可以直接使用</p><p>④表达式脚本中的表达式不能以分号结束；</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- 表达式脚本--%&gt;</span><br><span class="line">&lt;%--<span class="number">1.</span>输出整型--%&gt;</span><br><span class="line">    &lt;%=<span class="number">12</span>%&gt; &lt;br&gt;</span><br><span class="line">&lt;%--<span class="number">2.</span>输出浮点型--%&gt;</span><br><span class="line">    &lt;%=<span class="number">12.2</span>%&gt; &lt;br&gt;</span><br><span class="line">&lt;%--<span class="number">3.</span>输出字符串--%&gt;</span><br><span class="line">    &lt;%=<span class="string">&quot;我是字符串&quot;</span>%&gt;&lt;br&gt;</span><br><span class="line">&lt;%--<span class="number">4.</span>输出对象--%&gt;</span><br><span class="line">    &lt;%=map%&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h4 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h4><p>格式：&lt;% java语句 %&gt;</p><p>作用：在jsp页面中，编写需要的功能(通常写的是java语句)</p><p>特点：</p><p>①代码脚本里可以书写任意的 java 语句，service 方法中可以写的 java 代码，都可以书写到代码脚本中</p><p>②代码脚本的内容都会被翻译到 _jspService()方法中，因此方法中对象都可以直接使用</p><p>③可用多个代码脚本组合完成一个完整的java语句</p><p>④代码脚本还可以和表达式代码组合使用  </p><h3 id="jsp的三种注释"><a href="#jsp的三种注释" class="headerlink" title="jsp的三种注释"></a>jsp的三种注释</h3><p>1.html注释</p><p>&lt;! – html注释 –&gt;  </p><p>html 的注释会被翻译到 java 源代码中，在_jspService()方法里，以out.writer输出到客户端</p><p>2.java注释</p><p>&#x2F;&#x2F; 单行java注释</p><p>&#x2F;* 多行java注释 *&#x2F;</p><p>同样java注释也会被翻译到java源代码中</p><p>3.jsp注释</p><p>&lt;%–  jsp注释 –%&gt;</p><p> jsp注释可以注释掉jsp中的所有代码</p><h3 id="jsp九大内置对象"><a href="#jsp九大内置对象" class="headerlink" title="jsp九大内置对象"></a>jsp九大内置对象</h3><p>内置对象是指Tomcat在翻译jsp页面成为Servlet源代码后，内部提供的九个对象。</p><p>**request 对象 请求对象，可以获取请求信息 **</p><p>**response 对象 响应对象。可以设置响应信息 **</p><p>pageContext 对象 当前页面上下文对象。可以在当前上下文保存属性信息 </p><p>session 对象 会话对象。可以获取会话信息。 </p><p>exception 对象 异常对象只有在 jsp 页面的 page 指令中设置 isErrorPage&#x3D;”true” 的时候才会存在 </p><p>application 对象 ServletContext 对象实例，可以获取整个工程的一些信息。 </p><p>config 对象 ServletConfig 对象实例，可以获取 Servlet 的配置信息 out 对象 输出流。 </p><p>page 对象 表示当前 Servlet 对象实例（无用，用它不如使用 this 对象）。</p><h3 id="jsp四个域对象"><a href="#jsp四个域对象" class="headerlink" title="jsp四个域对象"></a>jsp四个域对象</h3><p>四大域对象经常用来保存数据信息。</p><p>①pageContext(pageContextImpl类) 可以保存数据在同一个 jsp 页面中使用 </p><p>②request(HttpServletRequest类) 可以保存数据在同一个 request 对象中使用。经常用于在转发的时候传递数据 </p><p>③session(HttpSession类) 可以保存在一个会话中使用 </p><p>④application(ServletContext类)  就是 ServletContext 对象，在整个web工程下使用，在web工程启动时就创建一个</p><p>从内存优化的角度出发，优先顺序(从小到大)：① &#x3D;&#x3D;&gt;  ② &#x3D;&#x3D;&gt;   ③  &#x3D;&#x3D;&gt;   ④ </p><h3 id="jsp中out和getwriter输出流的区别"><a href="#jsp中out和getwriter输出流的区别" class="headerlink" title="jsp中out和getwriter输出流的区别"></a>jsp中out和getwriter输出流的区别</h3><ul><li>在jsp页面下通常使用out.print()进行输出，以避免打乱页面的输出顺序</li><li>out.writer() 输出字符串没有问题，输出基本数据类型会以ascii字符集对应的值输出，(原因是其底层都把输入的基本数据类型强转为char型变量输出)</li><li>out.print() 输出任意数据都没有问题(其源码底层方法都将形参转化为String字符串后调用write方法输出)</li></ul><p>相同点：两者都可以用于向客户端回传数据，输出内容到客户端页面上</p><p><img src="https://s1.ax1x.com/2022/04/02/qIMEUs.png" alt="out和respon输出原理"></p><h3 id="jsp常用标签"><a href="#jsp常用标签" class="headerlink" title="jsp常用标签"></a>jsp常用标签</h3><h4 id="静态包含"><a href="#静态包含" class="headerlink" title="静态包含"></a>静态包含</h4><p>特点：</p><p>①静态包含不会翻译被包含的 jsp 页面。 </p><p>②静态包含其实是把被包含的 jsp 页面的代码拷贝到包含的位置执行输出</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &lt;%@ include file=<span class="string">&quot;&quot;</span>%&gt; 静态包含，file 属性指定你要包含的 jsp 页面的路径 --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    页头信息 &lt;br&gt;</span><br><span class="line">    主体内容 &lt;br&gt;</span><br><span class="line">    &lt;%@ include file=<span class="string">&quot;/include/footer.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="动态包含"><a href="#动态包含" class="headerlink" title="动态包含"></a>动态包含</h4><p>特点：</p><p>①动态包含会把被包含的 jsp 页面。翻译成java代码</p><p>②动态包含底层代码使用如下代码去调用被包含的 jsp 页面执行输出。</p><p> JspRuntimeLibrary.include(request, response, “&#x2F;include&#x2F;footer.jsp”, out, false); </p><p>③动态包含，还可以传递参数</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--  动态包含&lt;jsp:include page=<span class="string">&quot;&quot;</span>&gt;&lt;/jsp:include&gt;--%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/include/footer.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;test&quot;</span> value=<span class="string">&quot;test&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><p> &lt;%– 是请求转发标签，它的功能就是请求转发 page 属性设置请求转发的路径 –%&gt;</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">&quot;/scope2.jsp&quot;</span>&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><p>EL表达式全称：Expression Language，是表达式语言</p><p>EL表达式的作用是用于替代jsp中的表达式脚本在jsp页面上输出数据</p><p><strong>EL 表达式的格式是：${表达式}</strong></p><p>与jsp输出数据的异同：</p><ul><li>EL 表达式在输出 null 值的时候，输出的是空串。</li><li>jsp 表达式脚本输出 null 值的时候，输出的是 null 字符</li></ul><h4 id="EL-表达式输出域数据的顺序"><a href="#EL-表达式输出域数据的顺序" class="headerlink" title="EL 表达式输出域数据的顺序"></a>EL 表达式输出域数据的顺序</h4><p>EL 表达式主要是在 jsp 页面中输出数据。 主要是输出域对象中的数据。 </p><ul><li>当四个域中都有相同的 key 的数据的时候，EL 表达式会按照四个域的从小到大的顺序去进行搜索，找到就输出。</li></ul><h4 id="EL表达式输出属性值"><a href="#EL表达式输出属性值" class="headerlink" title="EL表达式输出属性值"></a>EL表达式输出属性值</h4><ul><li><strong>EL表达式输出属性值实际上是根据输入的属性名去找对应的get()方法输出数据，而不是根据变量名输出</strong></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输出Person： $&#123;person&#125; &lt;br/&gt;</span><br><span class="line">   输出Person的name属性： $&#123;person.name&#125; &lt;br/&gt;</span><br><span class="line">   输出Person的phone个别属性： $&#123;person.phone[<span class="number">0</span>]&#125; &lt;br/&gt;</span><br><span class="line">   输出Person的cities属性： $&#123;person.cities&#125; &lt;br/&gt;</span><br><span class="line">   输出Person的cities个别属性： $&#123;person.cities[<span class="number">0</span>]&#125; &lt;br/&gt;</span><br><span class="line">   输出Person的map集合： $&#123;person.thing&#125; &lt;br/&gt;</span><br><span class="line">   输出Person的map集合值得key的值： $&#123;person.thing.key1&#125; &lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="EL表达式的运算"><a href="#EL表达式的运算" class="headerlink" title="EL表达式的运算"></a>EL表达式的运算</h4><p>1.关系运算</p><p>2.逻辑运算</p><p>3.算数运算</p><p>4.empty运算</p><p>用于判断一个数据是否为空，为空则为输出true，否则输出false</p><p>①值为 null 值的时候，为空 </p><p>②值为空串的时候，为空 </p><p>③值是 Object 类型数组，长度为零的时候 </p><p>④list 集合，元素个数为零</p><p>⑤map集合，元素个数为零</p><p>5.三元运算</p><p>6.“**.**”运算和[ ]括号运算</p><p>“**.**”运算可以输出Bean对象中的某个属性的值</p><p>[ ]括号运算可以输出有序集合中的某个元素的值，此外还可以输出 map 集合中 key 里含有特殊字符的 key 的值</p><h3 id="EL表达式的隐含对象"><a href="#EL表达式的隐含对象" class="headerlink" title="EL表达式的隐含对象"></a>EL表达式的隐含对象</h3><table><thead><tr><th align="left">变量</th><th align="left">类型</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">pageContext</td><td align="left">PageContextImpl</td><td align="left">它可以获取 jsp 中的九大内置对象</td></tr><tr><td align="left">pageScope</td><td align="left">Map&lt;String,Object&gt;</td><td align="left">它可以获取 pageContext 域中的数据</td></tr><tr><td align="left">requestScope</td><td align="left">Map&lt;String,Object&gt;</td><td align="left">它可以获取 Request 域中的数据</td></tr><tr><td align="left">sessionScope</td><td align="left">Map&lt;String,Object&gt;</td><td align="left">它可以获取 Session 域中的数据</td></tr><tr><td align="left">applicationScope</td><td align="left">Map&lt;String,Object&gt;</td><td align="left">它可以获取 ServletContext域中的数据</td></tr><tr><td align="left">param</td><td align="left">Map&lt;String,String&gt;</td><td align="left">它可以获取请求参数的值</td></tr><tr><td align="left">paramValues</td><td align="left">Map&lt;String,String[ ]&gt;</td><td align="left">它也可以获取请求参数的值，获取多个值的时候使用</td></tr><tr><td align="left">header</td><td align="left">Map&lt;String,String&gt;</td><td align="left">它可以获取请求头的信息</td></tr><tr><td align="left">headerValues</td><td align="left">Map&lt;String,String[ ]&gt;</td><td align="left">它可以获取请求头的信息，它可以获取多个值的情况</td></tr></tbody></table><table><thead><tr><th align="left">cookie</th><th align="left">Map&lt;String,Cookie&gt;</th><th align="left">它可以获取当前请求的 Cookie 信息</th></tr></thead><tbody><tr><td align="left">initParam</td><td align="left">Map</td><td align="left">它可以获取在 web.xml 中配置的上下文参数</td></tr></tbody></table><h4 id="EL-获取四个特定域对象中的属性"><a href="#EL-获取四个特定域对象中的属性" class="headerlink" title="EL 获取四个特定域对象中的属性"></a>EL 获取四个特定域对象中的属性</h4><p>pageScope &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; pageContext 域 </p><p>requestScope &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Request 域 </p><p>sessionScope &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Session 域 </p><p>applicationScope &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ServletContext </p><h4 id="EL中pageContext对象的使用"><a href="#EL中pageContext对象的使用" class="headerlink" title="EL中pageContext对象的使用"></a>EL中pageContext对象的使用</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    request.getScheme() 它可以获取请求的协议</span><br><span class="line">    request.getServerName() 获取请求的服务器 ip 或域名</span><br><span class="line">    request.getServerPort() 获取请求的服务器端口号</span><br><span class="line">    request.getContextPath() 获取当前工程路径</span><br><span class="line">    request.getMethod() 获取请求的方式（GET 或 POST）</span><br><span class="line">    request.getRemoteHost() 获取客户端的 ip 地址</span><br><span class="line">    session.getId() 获取会话的唯一标识</span><br><span class="line">    --%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%--    pageContext 对象的使用--%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;req&quot;</span>, request);</span><br><span class="line">    %&gt;</span><br><span class="line">    <span class="number">1.</span> 协议：$&#123;req.scheme&#125; &lt;br/&gt;</span><br><span class="line">    <span class="number">2.</span> 服务器 ip：$&#123;pageContext.request.serverName&#125; &lt;br/&gt;</span><br><span class="line">    <span class="number">3.</span> 服务器端口：$&#123;pageContext.request.serverPort&#125;&lt;br/&gt;</span><br><span class="line">    <span class="number">4.</span> 获取工程路径：$&#123;pageContext.request.contextPath&#125; &lt;br/&gt;</span><br><span class="line">    <span class="number">5.</span> 获取请求方法：$&#123;pageContext.request.method&#125; &lt;br/&gt;</span><br><span class="line">    <span class="number">6.</span> 获取客户端 ip 地址：$&#123;pageContext.request.remoteHost&#125; &lt;br/&gt;</span><br><span class="line">    <span class="number">7.</span> 获取会话的 id 编号：$&#123;pageContext.session.id&#125; &lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="EL其他隐含对象的使用"><a href="#EL其他隐含对象的使用" class="headerlink" title="EL其他隐含对象的使用"></a>EL其他隐含对象的使用</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- EL其他隐含对象的使用--%&gt;</span><br><span class="line">        &lt;%--   获取请求参数     --%&gt;</span><br><span class="line">        输出请求参数username的值：$&#123;param.username&#125; &lt;br/&gt;</span><br><span class="line">        输出请求参数password的值：$&#123;param.password&#125; &lt;br/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        输出请求参数username的值：$&#123;paramValues.username[<span class="number">0</span>]&#125; &lt;br&gt;</span><br><span class="line">        输出请求参数hobby的值：$&#123;paramValues.hobby[<span class="number">0</span>]&#125; &lt;br&gt;</span><br><span class="line">        输出请求参数hobby的值：$&#123;paramValues.hobby[<span class="number">1</span>]&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;%-- 获取请求头的信息       --%&gt;</span><br><span class="line">        输出请求头User-Agent的值：$&#123;header[<span class="string">&quot;User-Agent&quot;</span>]&#125; &lt;br&gt;</span><br><span class="line">        输出多个请求头某个具体的值：$&#123;headerValues[<span class="string">&quot;User-Agent&quot;</span>][<span class="number">0</span>]&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        获取cookie的名称：$&#123;cookie.JSESSIONID&#125; &lt;br&gt;</span><br><span class="line">        获取cookie的名称值：$&#123;cookie.JSESSIONID.name&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        输出&amp;lt;ConText-param&amp;gt;username的值：$&#123;initParam.username&#125;</span><br></pre></td></tr></table></figure><h3 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h3><p>全称：JSP Standard Tag Library，是JSP标准标签库</p><ul><li>EL表达式用于替代jsp中的表达式脚本，而JSTL标签库则是替代了jsp中的代码脚本</li></ul><p><strong>JSTL 由五个不同功能的标签库组成。</strong></p><table><thead><tr><th align="left">功能范围</th><th align="left">URI</th><th align="left">前缀</th></tr></thead><tbody><tr><td align="left">核心标签库–重点</td><td align="left"><a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a></td><td align="left">c</td></tr><tr><td align="left">格式化</td><td align="left"><a href="http://java.sun.com/jsp/jstl/fmt">http://java.sun.com/jsp/jstl/fmt</a></td><td align="left">fmt</td></tr><tr><td align="left">函数</td><td align="left"><a href="http://java.sun.com/jsp/jstl/functions">http://java.sun.com/jsp/jstl/functions</a></td><td align="left">fn</td></tr><tr><td align="left">数据库(不使用)</td><td align="left"><a href="http://java.sun.com/jsp/jstl/sql">http://java.sun.com/jsp/jstl/sql</a></td><td align="left">sql</td></tr><tr><td align="left">XML(不使用)</td><td align="left"><a href="http://java.sun.com/jsp/jstl/xml">http://java.sun.com/jsp/jstl/xml</a></td><td align="left">x</td></tr></tbody></table><p>JSTL 标签库的使用步骤 </p><p>1、先导入 jstl 标签库的 jar 包。 </p><p>taglibs-standard-impl-1.2.1.jar </p><p>taglibs-standard-spec-1.2.1.jar </p><p>2、第二步，使用 taglib 指令引入标签库。</p><p> &lt;%@ taglib prefix&#x3D;”c” uri&#x3D;”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;</p><p>示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;%--</span><br><span class="line">        <span class="number">1.</span>&lt;c:set /&gt;</span><br><span class="line">        作用：set 标签可以往域中保存数据</span><br><span class="line">        域对象.setAttribute(key,value);</span><br><span class="line">        scope 属性设置保存到哪个域</span><br><span class="line">        page 表示 PageContext 域（默认值）</span><br><span class="line">        request 表示 Request 域</span><br><span class="line">        session 表示 Session 域</span><br><span class="line">        application 表示 ServletContext 域</span><br><span class="line">        <span class="keyword">var</span> 属性设置 key 是多少</span><br><span class="line">        value 属性设置值</span><br><span class="line">        --%&gt;</span><br><span class="line">    保存之前：$&#123;requestScope.test&#125; &lt;br&gt;</span><br><span class="line">    &lt;c:set scope=<span class="string">&quot;request&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;test&quot;</span> value=<span class="string">&quot;testValue&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">    保存之后 ：$&#123;requestScope.test&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;%--</span><br><span class="line">        <span class="number">2.</span>&lt;c:<span class="keyword">if</span> /&gt;  <span class="keyword">if</span>标签用于做<span class="keyword">if</span>判断</span><br><span class="line">        test属性表示判读的条件(使用EL表达式输出)</span><br><span class="line">        --%&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;12 != 12&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;判断成立&lt;/h1&gt;</span><br><span class="line">    &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">        &lt;%--</span><br><span class="line">         <span class="number">3.</span> &lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</span><br><span class="line">            作用：多路判断。跟 <span class="keyword">switch</span> ... <span class="keyword">case</span></span><br><span class="line">        choose 标签开始选择判断</span><br><span class="line">        when 标签表示每一种判断情况</span><br><span class="line">        test 属性表示当前这种判断情况的值</span><br><span class="line">        otherwise 标签表示剩下的情况</span><br><span class="line"></span><br><span class="line">        &lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签使用时需要注意的点：</span><br><span class="line">        <span class="number">1</span>、标签里不能使用 html 注释，要使用 jsp 注释</span><br><span class="line">        <span class="number">2</span>、when 标签的父标签一定要是 choose 标签</span><br><span class="line">                --%&gt;</span><br><span class="line"></span><br><span class="line">        &lt;%</span><br><span class="line">            request.setAttribute(<span class="string">&quot;height&quot;</span>,<span class="number">140</span>);</span><br><span class="line">        %&gt;</span><br><span class="line"></span><br><span class="line">        &lt;c:choose&gt;</span><br><span class="line">            &lt;c:when test=<span class="string">&quot;$&#123;requestScope.height &gt; 130&#125;&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;标准产品&lt;/h1&gt;</span><br><span class="line">            &lt;/c:when&gt;</span><br><span class="line">            &lt;c:when test=<span class="string">&quot;$&#123;requestScope.height &gt; 150&#125;&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;完美产品&lt;/h1&gt;</span><br><span class="line">            &lt;/c:when&gt;</span><br><span class="line">            &lt;c:otherwise&gt;</span><br><span class="line">                &lt;h1&gt;不合格产品&lt;/h1&gt;</span><br><span class="line">            &lt;/c:otherwise&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/c:choose&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;%--</span><br><span class="line">          <span class="number">4.</span> &lt;c:forEach /&gt;</span><br><span class="line">          作用：遍历输出使用。         </span><br><span class="line">遍历list集合</span><br><span class="line">            <span class="keyword">for</span> (List&lt;Student&gt; stu: list)</span><br><span class="line">                items 表示遍历的集合</span><br><span class="line">                <span class="keyword">var</span> 表示遍历到的数据，<span class="keyword">var</span>的值其实是自定义的变量名</span><br><span class="line">                begin 表示遍历的开始索引值</span><br><span class="line">                end 表示结束的索引值</span><br><span class="line">                step 属性表示遍历的步长值</span><br><span class="line">                varStatus 属性表示当前遍历到的数据的状态</span><br><span class="line">                <span class="keyword">for</span>（<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i+=<span class="number">2</span>）</span><br><span class="line">             --%&gt;</span><br><span class="line">            &lt;%</span><br><span class="line">                List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;s1&quot;</span>,<span class="string">&quot;s1p&quot;</span>,<span class="number">11</span>,<span class="string">&quot;test1&quot;</span>));</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">2</span>,<span class="string">&quot;s2&quot;</span>,<span class="string">&quot;s2p&quot;</span>,<span class="number">12</span>,<span class="string">&quot;test2&quot;</span>));</span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3</span>,<span class="string">&quot;s3&quot;</span>,<span class="string">&quot;s3p&quot;</span>,<span class="number">13</span>,<span class="string">&quot;test3&quot;</span>)); </span><br><span class="line">            %&gt;</span><br><span class="line"></span><br><span class="line">            &lt;%</span><br><span class="line">                request.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">            %&gt;</span><br><span class="line"></span><br><span class="line">            &lt;table&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;密码&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;电话&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">            &lt;c:forEach begin=<span class="string">&quot;2&quot;</span> end=<span class="string">&quot;6&quot;</span> step=<span class="string">&quot;2&quot;</span>  varStatus=<span class="string">&quot;staus&quot;</span> items=<span class="string">&quot;$&#123;requestScope.list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;stu&quot;</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;stu.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;stu.username&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;stu.password&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;stu.age&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;stu.phone&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;staus&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;/c:forEach&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/04/02/qIMWM8.png" alt="LoopTagStatus接口的常用方法"></p><hr><h2 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h2><p>Listenner监听器是javaEE的三大组件之一，也是JavaEE的规范，即为接口。</p><p>作用：监听某种事物的变化，通过回调函数反馈给程序或用户，以做出相应的处理</p><h3 id="ServletContext监听器"><a href="#ServletContext监听器" class="headerlink" title="ServletContext监听器"></a>ServletContext监听器</h3><p>作用：用于监听ServletContext对象的创建和销毁</p><p>监听到ServletContext对象创建，执行以下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 ServletContext 对象创建之后马上调用，做初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span>;</span><br></pre></td></tr></table></figure><p>监听到ServletContext对象销毁，执行以下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 ServletContext 对象销毁之后调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span>;</span><br></pre></td></tr></table></figure><p>如何使用 ServletContextListener 监听器监听 ServletContext 对象。 </p><p>使用步骤如下： </p><p>1、编写一个类去实现 ServletContextListener </p><p>2、实现其两个回调方法 </p><p>3、到 web.xml 中去配置监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerTest</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象被创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象被销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   配置监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listenner.ListenerTest<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h2><h3 id="文件的上传"><a href="#文件的上传" class="headerlink" title="文件的上传"></a>文件的上传</h3><ol><li><p>要有一个form标签，method方法必须等于post</p></li><li><p>form 标签的 encType 属性值必须为 multipart&#x2F;form-data 值 </p></li><li><p>在 form 标签中使用 input type&#x3D;file 添加上传的文件 </p></li><li><p>编写服务器代码（Servlet 程序）接收，处理上传的数据。</p></li></ol><p>​<strong>encType&#x3D;multipart&#x2F;form-data 表示提交的数据，以多段（每一个表单项一个数据段）的形式进行拼接，然后以二进制流的形式发送给服务器</strong></p><p><img src="https://s1.ax1x.com/2022/04/02/qIM7in.png" alt="Http协议内容"></p><p><strong>借用commons-fileupload.jar处理上传数据处理步骤：</strong></p><p>①导入两个 jar 包： </p><p>commons-fileupload-1.2.1.jar </p><p>commons-io-1.4.jar </p><p>②调用jar包中包含类的方法</p><p>**ServletFileUpload 类，用于解析上传的数据。 **</p><p>**FileItem 类，表示每一个表单项。 **</p><table><thead><tr><th align="left">常用方法</th><th align="left">方法用途</th></tr></thead><tbody><tr><td align="left">boolean ServletFileUpload.isMultipartContent(HttpServletRequest request);</td><td align="left">判断当前上传的数据格式是否是多段的格式。</td></tr><tr><td align="left">public List parseRequest(HttpServletRequest request)</td><td align="left">解析上传的数据</td></tr><tr><td align="left">boolean FileItem.isFormField()</td><td align="left">判断当前这个表单项，是否是普通的表单项。还是上传的文件类型。 true 表示普通类型的表单项 false 表示上传的文件类型</td></tr><tr><td align="left">String FileItem.getFieldName()</td><td align="left">获取表单项的 name 属性值</td></tr><tr><td align="left">String FileItem.getString()</td><td align="left">获取当前表单项的值。</td></tr><tr><td align="left">String FileItem.getName()</td><td align="left">获取上传的文件名</td></tr><tr><td align="left">void FileItem.write( file )</td><td align="left">将上传的文件写到 参数 file 所指向抽硬盘位置 。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求的参数内容</span></span><br><span class="line"><span class="comment">//        ServletInputStream inputStream = req.getInputStream();</span></span><br><span class="line"><span class="comment">//        byte[] b = new byte[1024];</span></span><br><span class="line"><span class="comment">//        int len;</span></span><br><span class="line"><span class="comment">//        while ((len = inputStream.read(b)) != -1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(new String(b,0,len));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//1.判断当前上传的数据格式是否是多段的格式。</span></span><br><span class="line">        <span class="keyword">if</span> (ServletFileUpload.isMultipartContent(req))&#123;</span><br><span class="line">            <span class="comment">//创建FileItemFactory工厂实现类</span></span><br><span class="line">            <span class="type">FileItemFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">            <span class="comment">//创建用于解析上传数据的工具类ServletFileUpload类</span></span><br><span class="line">            <span class="type">ServletFileUpload</span> <span class="variable">upload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(factory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析上传数据，得到每一个表单项FileItem</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;FileItem&gt; list = upload.parseRequest(req);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//遍历FileItem集合，判断每一个表单项是普通类型还是上传的文件</span></span><br><span class="line">                <span class="keyword">for</span> (FileItem fileItem: list) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fileItem.isFormField())&#123;</span><br><span class="line">                        <span class="comment">//普通表单项</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;表单项的name属性值:&quot;</span> + fileItem.getFieldName());</span><br><span class="line">                        <span class="comment">//参数UTF-8 解决中文乱码问题</span></span><br><span class="line">                        System.out.println( <span class="string">&quot;表单项的value属性值:&quot;</span> + fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//上传的文件</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;表单项的name属性值:&quot;</span> + fileItem.getFieldName());</span><br><span class="line">                        System.out.println(<span class="string">&quot;上传文件的名字:&quot;</span> + fileItem.getName());</span><br><span class="line">                        fileItem.write(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\test.jpg&quot;</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="文件的下载"><a href="#文件的下载" class="headerlink" title="文件的下载"></a>文件的下载</h3><p>下载的常用 API ： </p><p>response.getOutputStream(); </p><p>servletContext.getResourceAsStream(); </p><p>servletContext.getMimeType(); </p><p>response.setContentType();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownloadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.获取请求的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;1.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读取请求文件的内容</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.在回传之前，告诉客户端返回数据的类型，通过响应头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> servletContext.getMimeType(<span class="string">&quot;/file/&quot;</span> + fileName);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载的文件类型：&quot;</span> + mimeType);</span><br><span class="line">        resp.setContentType(mimeType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.告诉客户端回传的数据用于下载，也是通过响应头</span></span><br><span class="line">        <span class="comment">//Content-Disposition响应头表示收到的数据怎么处理</span></span><br><span class="line">        <span class="comment">//attachment表示附件，通过下载使用</span></span><br><span class="line">        <span class="comment">//filename表示指定下载的文件名，下载后的文件名与指定文件名不一定需要一致，但中文名会出现乱码</span></span><br><span class="line">        <span class="comment">//URLEncoder方法会把汉字转换成%xx%xx的格式</span></span><br><span class="line">        <span class="comment">//resp.setHeader(&quot;Content-Disposition&quot;,&quot;attachment;filename=&quot; + URLEncoder.encode(&quot;测试.jpg&quot;,&quot;UTF-8&quot;));</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resource</span> <span class="operator">=</span> servletContext.getResourceAsStream(<span class="string">&quot;/file/&quot;</span> + fileName);</span><br><span class="line">        <span class="comment">//获取响应的输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将文件内容回传到客户端</span></span><br><span class="line">        <span class="comment">//读取流的全部数据，复制给输出流，回传到客户端</span></span><br><span class="line">        IOUtils.copy(resource,out);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><strong>cookie是服务器通知客户端保存键值对的一种技术</strong></p><p>客户端在每次向服务器发起请求的同时都会发送cookie，但每个cookie的大小不超过4kb</p><h3 id="Cookie的创建"><a href="#Cookie的创建" class="headerlink" title="Cookie的创建"></a>Cookie的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">creatCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建cookie对象</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通知客户端保存cookie 这一步很重要 不可缺少</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;cookie创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie的key与value的获取"><a href="#Cookie的key与value的获取" class="headerlink" title="Cookie的key与value的获取"></a>Cookie的key与value的获取</h3><p>①getName()方法返回cookie的key值</p><p>②getValue()方法返回cookie的value值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">getCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="comment">//getName()方法返回cookie的key值</span></span><br><span class="line">            <span class="comment">//getValue()方法返回cookie的value值</span></span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;cookie的key是：&quot;</span> + cookie.getName() + <span class="string">&quot;,cookie的value是：&quot;</span> + cookie.getValue() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">test</span> <span class="operator">=</span> CookieUtils.findCookie(<span class="string">&quot;key&quot;</span>, cookies);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (test != <span class="literal">null</span>)&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;找到了需要的cookie&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie值的更新"><a href="#Cookie值的更新" class="headerlink" title="Cookie值的更新"></a>Cookie值的更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">updateCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方案一</span></span><br><span class="line">        <span class="comment">//1.创建与被修改的同名参数cookie</span></span><br><span class="line">        <span class="comment">//2.同时利用构造器赋予新的cookie的新值</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;newValue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.resp.addCookie()方法通知客户端接受和保存cookie</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;cookie名字为key的值已被修改&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方案二</span></span><br><span class="line">        <span class="comment">//1.查找到需要修改的cookie对象</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">key</span> <span class="operator">=</span> CookieUtils.findCookie(<span class="string">&quot;key&quot;</span>, cookies);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//2.利用setValue()方法修改cookie对象+的值</span></span><br><span class="line">            key.setValue(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.resp.addCookie()方法通知客户端接受和保存cookie</span></span><br><span class="line">            resp.addCookie(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie的生命控制"><a href="#Cookie的生命控制" class="headerlink" title="Cookie的生命控制"></a>Cookie的生命控制</h3><p><strong>生命控制是指管理cookie在什么时候被销毁(删除)</strong></p><p>setMaxAge(long expiry)；以秒为单位</p><ul><li>参数为正数，表示在指定的秒数后过期</li><li>参数为负数，表示若浏览器关闭则cookie被删除</li><li>参数为0，表示cookie被马上删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">defaultLife</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;default&quot;</span>,<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        cookie.setMaxAge(-<span class="number">1</span>); <span class="comment">//设置存活时间</span></span><br><span class="line"></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Cookie有效路径Path"><a href="#Cookie有效路径Path" class="headerlink" title="Cookie有效路径Path"></a>Cookie有效路径Path</h3><p><strong>Path可以有效的决定那些cookie发送给服务器</strong>，其通过请求的地址进行过滤的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">pathTest</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;path1&quot;</span>, <span class="string">&quot;path1&quot;</span>);</span><br><span class="line">        <span class="comment">//req.getContextPath() 获取工程路径</span></span><br><span class="line">        cookie.setPath(req.getContextPath() + <span class="string">&quot;/abc&quot;</span>); <span class="comment">//===》得到路径为.../工程路径/abc</span></span><br><span class="line"></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;创建了工程路径的path&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试cookie免密登录"><a href="#测试cookie免密登录" class="headerlink" title="测试cookie免密登录"></a>测试cookie免密登录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;test&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;test&quot;</span>.equals(password))&#123;</span><br><span class="line">            <span class="comment">//成功</span></span><br><span class="line">            <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span>);<span class="comment">//设置cookie存活时间</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//通知客户端保存cookie</span></span><br><span class="line">            resp.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Session会话"><a href="#Session会话" class="headerlink" title="Session会话"></a>Session会话</h2><p>session是一个接口(HttpSession)，用于维护一个客户端和一个服务器保持关联的一种技术。</p><p><strong>session会话中，经常用于保存用户登录之后的信息</strong></p><h3 id="Session的创建和获取"><a href="#Session的创建和获取" class="headerlink" title="Session的创建和获取"></a>Session的创建和获取</h3><p><strong>req.getSession()；首次调用是创建，除此之外都是调用先前创建好的session会话对象</strong></p><p><strong>isNew()方法用于判断session会话对象是否为新创建的，true表示新创建，false表示不是新创建</strong></p><p>每个会话都有一个唯一的id号，<strong>getId()方法用于获取此id值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setSession</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//session会话对象的设置</span></span><br><span class="line">        req.getSession().setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">getSession</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">////session会话对象的获取</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> req.getSession().getAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createSession</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//创建session会话对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断session会话对象是否为新</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">aNew</span> <span class="operator">=</span> session.isNew();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取session对象的唯一标识id值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> session.getId(); </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Session生命周期的控制"><a href="#Session生命周期的控制" class="headerlink" title="Session生命周期的控制"></a>Session生命周期的控制</h3><p>public void setMaxinactive(int interval)；设置seesion的存活时间(以秒为单位)，超过此时长session就被销毁</p><ul><li>参数为正数表示超时时长，参数为负数表示此seesion永不超时</li></ul><p>public int getMaxinactive()；获取seesion的存活时间</p><p>session默认超时时长为30min，在tomcat的配置中已被默认设置，可通过配置工程的web.xml文件修改成指定默认时长</p><p><strong>public void invalidate() 让当前 Session 会话马上超时无效。</strong></p><ul><li>超时时长是指客户端两次请求的最大间隔时长</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setSessionTime</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//session默认超时时长为30min</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxInactiveInterval</span> <span class="operator">=</span> session.getMaxInactiveInterval(); <span class="comment">//1800秒</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//设置session的超时时长</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        session.setMaxInactiveInterval(<span class="number">3</span>);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/04/02/qIQmod.png" alt="session技术的底层实现原理"></p><p>​<img src="https://s1.ax1x.com/2022/04/02/qIQKJI.png" alt="验证码底层实现原理"></p><hr><h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><p>Filter是JavaEE三大组件之一，<strong>其主要用于拦截请求，过滤响应</strong></p><p>拦截请求的应用场景：1.权限检查 2.日记操作 3.事务管理</p><p>演示举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterTest</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description : 专用于拦截请求，过滤响应，实现权限检查</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2022/3/30</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@time</span> 23:58</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@user</span> hcxs1986</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterChain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        </span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> httpServletRequest.getSession();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            servletRequest.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest,servletResponse);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//让程序继续访问目标资源</span></span><br><span class="line">            <span class="comment">//最重要的一步 不可缺少 否则网页空白不执行任何操作</span></span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   filter标签用于配置一个Filter过滤器，其内部配置与Servlet没区别 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterTest<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.FilterTest<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- filter-mapping标签配置filter过滤器的拦截路径   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   filter-name表示当前路径给哪个filter过滤器使用     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterTest<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   / 表示请求地址为：http://ip:port/工程路径/ 映射到IDEA的web目录     --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   /admin/* 表示请求地址为：http://ip:port/工程路径/admin/*  同时代表拦截此admin文件路径下的所有内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h3><p>生命周期与Servlet相似</p><p>①Filter的构造器方法</p><p>②Filter的init初始化方法</p><p>③Filter的doFilter()方法</p><p>④ilter的destory()方法</p><ul><li>①、②步在web工程启动的时候执行(Filter已经创建)</li><li>③在拦截到请求时执行</li><li>④停止web工程时执行，同时Filter过滤器也不再存在</li></ul><h3 id="FilterConfig类"><a href="#FilterConfig类" class="headerlink" title="FilterConfig类"></a>FilterConfig类</h3><p><strong>Filter过滤器的配置文件类</strong>，在Tomcat服务器每次创建Filter的同时就会生成此类，保存了Filter的配置信息</p><p>FilterConfig 类的作用是获取 filter 过滤器的配置内容 </p><p>1、获取 Filter 的名称 filter-name 的内容 </p><p>2、获取在 Filter 中配置的 init-param 初始化参数 </p><p>3、获取 ServletContext 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;2.Filter 的 init(FilterConfig filterConfig)初始化&quot;</span>);</span><br><span class="line"><span class="comment">// 1、获取 Filter 的名称 filter-name 的内容</span></span><br><span class="line">System.out.println(<span class="string">&quot;filter-name 的值是：&quot;</span> + filterConfig.getFilterName());</span><br><span class="line"><span class="comment">// 2、获取在 web.xml 中配置的 init-param 初始化参数</span></span><br><span class="line">System.out.println(<span class="string">&quot;初始化参数 username 的值是：&quot;</span> + filterConfig.getInitParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;初始化参数 url 的值是：&quot;</span> + filterConfig.getInitParameter(<span class="string">&quot;url&quot;</span>));</span><br><span class="line"><span class="comment">// 3、获取 ServletContext 对象</span></span><br><span class="line">System.out.println(filterConfig.getServletContext());</span><br></pre></td></tr></table></figure><h3 id="FilterChain-过滤器链"><a href="#FilterChain-过滤器链" class="headerlink" title="FilterChain 过滤器链"></a>FilterChain 过滤器链</h3><p>FilterChain即多个过滤器同时一起工作</p><ul><li><strong>多个Filter过滤器的执行的先后顺序由它们在web.xml中从上到下的配置顺序决定的</strong></li></ul><p><img src="https://s1.ax1x.com/2022/04/02/qIQdWq.png" alt="FilterChain执行示意图"></p><h3 id="Filter的拦截路径"><a href="#Filter的拦截路径" class="headerlink" title="Filter的拦截路径"></a>Filter的拦截路径</h3><p><strong>Filter 过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在！！！</strong></p><ul><li><p>精确匹配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/target.jsp">http://ip:port/工程路径/target.jsp</a></p></li><li><p>目录匹配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/admin/">http://ip:port/工程路径/admin/</a>*</p></li><li><p>后缀名匹配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须以.html 结尾才会拦截到</p></li></ul><hr><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>可用用于解决多线程的数据安全问题</p><p>ThreadLocal 的特点：</p><p>1、ThreadLocal 可以为当前线程关联一个数据。（它可以像 Map 一样存取数据，key 为当前线程） </p><p>2、每一个 ThreadLocal 对象，只能为当前线程关联一个数据，如果要为当前线程关联多个数据，就需要使用多个 ThreadLocal 对象实例。 </p><p>3、每个 ThreadLocal 对象实例定义的时候，一般都是 static 类型 </p><p>4、ThreadLocal 中保存数据，在线程销毁后。会由 JVM 虚拟自动释放</p><hr><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><strong>JSON(javaScript Object Notation)是一种轻量级的数据交换格式，用于客户端和服务器之间的业务数据的传递</strong></p><p>JSON的定义：由键值对组成，并且由大括号包裹。每个键由引号引起来，键和值之间使用冒号进行分隔， 多组键值对之间进行逗号进行分隔。</p><h3 id="json的变量格式"><a href="#json的变量格式" class="headerlink" title="json的变量格式"></a>json的变量格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// json的定义</span><br><span class="line">var jsonObj = &#123;</span><br><span class="line">&quot;key1&quot;:10,</span><br><span class="line">&#x27;key2&#x27;:&quot;test&quot;,</span><br><span class="line">  key3:false,</span><br><span class="line"> &quot;key4&quot;:[10,&quot;test&quot;,false],</span><br><span class="line">&quot;key5&quot;:&#123;&quot;key5_1&quot;:test&#125;,</span><br><span class="line">&#x27;key6&#x27;:[&#123;&quot;key6_1&quot;:1&#125;,&#123;&quot;key6_2&quot;:2&#125;]</span><br><span class="line">&#125;;</span><br><span class="line">alert(typeof(jsonObj));//数据类型是object，也就是说json就是一个对象</span><br></pre></td></tr></table></figure><h3 id="json的访问"><a href="#json的访问" class="headerlink" title="json的访问"></a>json的访问</h3><p>json 本身是一个对象。</p><p>json 中的 key 我们可以理解为是对象中的一个属性。 </p><p><strong>json 中的 key 访问就跟访问对象的属性一样： json 对象.key</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// json的访问</span><br><span class="line">console.log(jsonObj.key1);</span><br><span class="line"></span><br><span class="line">for (var i = 0; i &lt; jsonObj.key4.length; i++) &#123;</span><br><span class="line">alert(jsonObj.key4[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(jsonObj.key5.key5_1);</span><br><span class="line"></span><br><span class="line">var k = jsonObj.key6[0];</span><br><span class="line">alert(k.key6_1);</span><br></pre></td></tr></table></figure><h3 id="json在javaScript中的常用方法"><a href="#json在javaScript中的常用方法" class="headerlink" title="json在javaScript中的常用方法"></a>json在javaScript中的常用方法</h3><ul><li>javascript对象表示法（JSON）格式是从javascript派生的。</li></ul><p>json的两种形式：</p><p>①以对象的形式存在，称为json对象</p><p>②以字符串的形式存在，称为json字符串</p><ul><li>一般操作 json 中的数据的时候，需要 json 对象的格式。 </li><li>一般在客户端和服务器之间进行数据交换的时候，使用 json 字符串</li></ul><p>常用方法：</p><p>①<strong>JSON.stringify()  把 json 对象转换成为 json 字符串</strong></p><p>②<strong>JSON.parse()  把 json 字符串转换成为 json 对象</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//JSON.stringify()  把 json 对象转换成为 json 字符串</span><br><span class="line">var jsonObjString = JSON.stringify(jsonObj);</span><br><span class="line">alert(jsonObjString);</span><br><span class="line"></span><br><span class="line">//JSON.parse()  把 json 字符串转换成为 json 对象</span><br><span class="line">var jsonObj2 = JSON.parse(jsonObjString);</span><br><span class="line">alert(jsonObj2.key1);</span><br></pre></td></tr></table></figure><h3 id="JSON在java中的应用"><a href="#JSON在java中的应用" class="headerlink" title="JSON在java中的应用"></a>JSON在java中的应用</h3><p>1.javaBean和json的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">javaBeanToJson</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">BeanClass</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanClass</span>(<span class="number">1</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">//创建gson对象</span></span><br><span class="line">    <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">    <span class="comment">//toJson()方法将任意java对象转换为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">bToJsonSting</span> <span class="operator">=</span> gson.toJson(b1);</span><br><span class="line">    System.out.println(bToJsonSting);</span><br><span class="line">    <span class="comment">//fromJson()方法把json字符串转换为任意java对象</span></span><br><span class="line">    <span class="comment">//第一个参数是json字符串，第二个参数是转换回去的java对象类型</span></span><br><span class="line">    gson.fromJson(bToJsonSting,BeanClass.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.List和json的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listToJson</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;BeanClass&gt; b2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    b2.add(<span class="keyword">new</span> <span class="title class_">BeanClass</span>(<span class="number">2</span>,<span class="string">&quot;b2&quot;</span>));</span><br><span class="line">    b2.add(<span class="keyword">new</span> <span class="title class_">BeanClass</span>(<span class="number">3</span>,<span class="string">&quot;b3&quot;</span>));</span><br><span class="line">    <span class="comment">//创建gson对象</span></span><br><span class="line">    <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">    <span class="comment">//toJson()方法将任意list集合对象转换为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">b2ToJsonSting</span> <span class="operator">=</span> gson.toJson(b2);</span><br><span class="line">    System.out.println(b2ToJsonSting);</span><br><span class="line">    <span class="comment">//fromJson()方法把json字符串转换为任意list集合对象</span></span><br><span class="line">    <span class="comment">//第一个参数是json字符串，第二个参数是转换回去的java对象类型</span></span><br><span class="line">    gson.fromJson(b2ToJsonSting,<span class="keyword">new</span> <span class="title class_">BeanClassListType</span>().getRawType());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了防止集合对象出现类型转换异常，考虑new个新类去继承gosn的jar包中的TypeToken</span></span><br><span class="line"><span class="comment">//其内泛型可用List&lt;BeanClass&gt;也可用具体的实现类类型ArrayList&lt;BeanClass&gt;</span></span><br><span class="line"><span class="comment">//也可以采用匿名内部类的写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanClassListType</span> <span class="keyword">extends</span> <span class="title class_">TypeToken</span>&lt;List&lt;BeanClass&gt;&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.map和json的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mapToJson</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;Integer,BeanClass&gt; b3 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        b3.put(<span class="number">1</span>,<span class="keyword">new</span> <span class="title class_">BeanClass</span>(<span class="number">4</span>,<span class="string">&quot;b4&quot;</span>));</span><br><span class="line">        b3.put(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">BeanClass</span>(<span class="number">5</span>,<span class="string">&quot;b5&quot;</span>));</span><br><span class="line">        <span class="comment">//创建gson对象</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="comment">//toJson()方法将任意Map集合对象转换为json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b3ToJsonString</span> <span class="operator">=</span> gson.toJson(b3);</span><br><span class="line">        System.out.println(b3ToJsonString);</span><br><span class="line">        <span class="comment">//fromJson()方法把json字符串转换为任意Map集合对象</span></span><br><span class="line">        <span class="comment">//第一个参数是json字符串，第二个参数是转换回去的java对象类型</span></span><br><span class="line">       <span class="comment">//参数二是匿名内部类</span></span><br><span class="line">        gson.fromJson(b3ToJsonString, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;HashMap&lt;Integer,BeanClass&gt;&gt;()&#123;&#125;.getRawType());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>AJAX 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发 技术。</p><ul><li>**ajax 是一种浏览器通过 js 异步发起请求，局部更新页面的技术。 **</li></ul><p>Ajax 请求的局部更新，浏览器地址栏不会发生变化，局部更新不会舍弃原来页面的内容</p><h3 id="原生JS的ajax请求示例"><a href="#原生JS的ajax请求示例" class="headerlink" title="原生JS的ajax请求示例"></a>原生JS的ajax请求示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">ajaxRequest</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1、我们首先要创建XMLHttpRequest </span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> xmlHttpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2、调用open方法设置请求参数</span></span></span><br><span class="line"><span class="language-javascript">xmlHttpRequest.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;http://localhost:8080/JSON_ajax_i18n/ajaxServlet?action=javaScriptAjax&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3、调用send方法发送请求</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//给onreadystatechange属性绑定函数</span></span></span><br><span class="line"><span class="language-javascript">xmlHttpRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//只要在status状态为200，readyState为4的时候才能触发onreadystatechange属性的函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (xmlHttpRequest.<span class="property">status</span> == <span class="number">200</span> &amp;&amp; xmlHttpRequest.<span class="property">readyState</span> == <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//通过dom对象查找指定id的标签并把返回内容设置为标签的文本内容</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xmlHttpRequest.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div01&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;编号：&quot;</span> + jsonObj.<span class="property">id</span> + <span class="string">&quot;,姓名：&quot;</span> + jsonObj.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 4、在send方法前绑定onreadystatechange事件，处理请求完成后的操作。</span></span></span><br><span class="line"><span class="language-javascript">xmlHttpRequest.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Jquery的ajax请求"><a href="#Jquery的ajax请求" class="headerlink" title="Jquery的ajax请求"></a>Jquery的ajax请求</h3><ul><li>**$.ajax 方法 **<ul><li>url 表示请求的地址 </li><li>type 表示请求的类型 GET 或 POST 请求 </li><li>data 表示发送给服务器的数据 格式有两种： 一：name&#x3D;value&amp;name&#x3D;value 二：{key:value} </li><li>success 请求成功，响应的回调函数(方法)</li><li>dataType 响应的数据类型 常用的数据类型有： text 表示纯文本 xml 表示 xml 数据 json 表示 json 对象</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">// ajax请求</span><br><span class="line">$(&quot;#ajaxBtn&quot;).click(function()&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:&quot;http://localhost:8080/JSON_ajax_i18n/ajaxServlet&quot;,</span><br><span class="line">data:&quot;action=jqueryAjax&quot;,</span><br><span class="line">//data:&#123;action:&quot;jqueryAjax&quot;&#125;,</span><br><span class="line">type:&quot;get&quot;,</span><br><span class="line">success:function (data) &#123;//此处data是服务器返回的数据，是json字符串</span><br><span class="line">// var jsonObj = JSON.parse(data);</span><br><span class="line">$(&quot;#msg&quot;).html(&quot;编号：&quot; + data.id + &quot;,姓名&quot; + data.name);</span><br><span class="line">&#125;,</span><br><span class="line">dataType:&quot;json&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>$.get 方法和$.post 方法</strong><ul><li>url 请求的 url 地址 </li><li>data 发送的数据 </li><li>callback 成功的回调函数 </li><li>type 返回的数据类型</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// ajax--get请求</span><br><span class="line">//不必像ajax一样逐个写出，只需要填充相应的值就行</span><br><span class="line">$(&quot;#getBtn&quot;).click(function()&#123;</span><br><span class="line">//$.getJSON(url,data,callback)</span><br><span class="line">$.get(&quot;http://localhost:8080/JSON_ajax_i18n/ajaxServlet&quot;, &#123;action:&quot;jqueryGet&quot;&#125;, function (data) &#123;</span><br><span class="line">$(&quot;#msg&quot;).html(&quot;get 编号：&quot; + data.id + &quot;,姓名&quot; + data.name);</span><br><span class="line">&#125;, &quot;json&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// ajax--post请求</span><br><span class="line">$(&quot;#postBtn&quot;).click(function()&#123;</span><br><span class="line">// post请求</span><br><span class="line">$.post(&quot;http://localhost:8080/JSON_ajax_i18n/ajaxServlet&quot;, &quot;action=jqueryPost&quot;, function (data) &#123;</span><br><span class="line">$(&quot;#msg&quot;).html(&quot;post 编号：&quot; + data.id + &quot;,姓名&quot; + data.name);</span><br><span class="line">&#125;, &quot;json&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong>$.getJSON方法</strong></p><p>替代上方两种</p><ul><li>url 请求的url 地址 </li><li>data 发送给服务器的数据 </li><li>callback 成功的回调函数</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ajax--getJson请求</span><br><span class="line">$(&quot;#getJSONBtn&quot;).click(function()&#123;</span><br><span class="line">//$.getJSON(url,data,callback)</span><br><span class="line">$.getJSON(&quot;http://localhost:8080/JSON_ajax_i18n/ajaxServlet&quot;, &quot;action=jqueryJSON&quot;,function (data) &#123;</span><br><span class="line">$(&quot;#msg&quot;).html(&quot;getJson 编号：&quot; + data.id + &quot;,姓名&quot; + data.name);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>serialize()方法</p><ul><li>serialize()可以把表单中所有表单项的内容都获取到，并以 name&#x3D;value&amp;name&#x3D;value 的形式进行</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// ajax请求</span><br><span class="line">$(&quot;#submit&quot;).click(function()&#123;</span><br><span class="line">// 把参数序列化</span><br><span class="line">$.getJSON(&quot;http://localhost:8080/JSON_ajax_i18n/ajaxServlet&quot;, &quot;action=jquerySerialize&amp;&quot; + $(&quot;#form01&quot;).serialize(),function (data) &#123;</span><br><span class="line">$(&quot;#msg&quot;).html(&quot;Serialize 编号：&quot; + data.id + &quot;,姓名&quot; + data.name);</span><br><span class="line">&#125;)</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="i18n国际化"><a href="#i18n国际化" class="headerlink" title="i18n国际化"></a>i18n国际化</h2><p>国际化（Internationalization）指的是同一个网站可以支持多种不同的语言，以方便不同国家，不同语种的用户访问。</p><ul><li><p>国际化的英文 Internationalization，但是由于拼写过长，起了个一个简单的写法叫做 I18N，代表的是 Internationalization 这个单词，</p><p>以 I 开头，以 N 结尾，而中间是 18 个字母，所以简写为 I18N。以后说 I18N 和国际化是一个东西</p></li></ul><h3 id="国际化相关要素"><a href="#国际化相关要素" class="headerlink" title="国际化相关要素"></a>国际化相关要素</h3><p><img src="https://s1.ax1x.com/2022/04/02/qIQ6w4.png" alt="国际化相关要素"></p><ul><li>国际化资源 properties 测试、通过请求头国际化页面、通过请求头国际化页面、JSTL 标签库实现国际化</li><li>需要可到javaWeb包下JSON_ajax_i18n模块查看</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/03/15/JDBC/"/>
      <url>/2022/03/15/JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h2><p>软件架构：B&#x2F;S (Browser Server)  、 C&#x2F;S (Client Server)</p><p>概念：JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），</p><p>定义了用来访问数据库的标准Java类库（<strong>java.sql,javax.sql</strong>）。</p><p><img src="https://s1.ax1x.com/2022/03/15/bvXtGn.png" alt="java访问数据库"></p><h2 id="JDBC体系"><a href="#JDBC体系" class="headerlink" title="JDBC体系"></a>JDBC体系</h2><p>JDBC接口（API）：</p><ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul><hr><h3 id="JDBC-连接步骤"><a href="#JDBC-连接步骤" class="headerlink" title="JDBC 连接步骤"></a>JDBC 连接步骤</h3><p><img src="https://s1.ax1x.com/2022/03/15/bvXra4.png" alt="连接示意图"></p><h3 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h3><ol><li><p>Driver接口实现类</p><p>常用方式的好处是</p><p>①<strong>实现了代码和数据的分离，不需要以硬编码的方式一起存在，在更改连接数据库的方面更加方便和安全</strong></p><p>②在修改配置文件的时候可以避免程序的重新打包</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//常用的方式（推荐）</span></span><br><span class="line">    <span class="comment">//方式五：将数据库连接所需的4个基本信息封装在配置文件中，通过读取配置文件获取，获取连接</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jdbc_Connection5</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.提供连接的相关的信息</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> ConnectionTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        p.load(in);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">paw</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.加载驱动</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取连接填写相关的信息</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, paw, user);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式一：</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jdbc_Connection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">//1.获取driver的实现类对象</span></span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.mysql.jdbc.Driver();<span class="comment">//第三方的apicom.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdbc:mysql -协议</span></span><br><span class="line">        <span class="comment">//localhost:3306 -ip+端口号</span></span><br><span class="line">        <span class="comment">//test -目标的数据库</span></span><br><span class="line">        <span class="comment">//?useUnicode=true&amp;characterEncoding=utf-8 -mysql8.0更改了连接方式需要在后方添加这个</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="comment">//将用户名和密码封装在Properties中</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        p.setProperty(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, p);</span><br><span class="line">        System.out.println(connect);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式二：对方式一的迭代，避免第三方api的出现</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jdbc_Connection2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取driver的实现类对象：使用反射</span></span><br><span class="line">        Class&lt;?&gt; a = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) a.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="comment">//将用户名和密码封装在Properties中</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        p.setProperty(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, p);</span><br><span class="line">        System.out.println(connect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式三：使用DriverManager类替换Driver</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jdbc_Connection3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取driver的实现类对象：使用反射</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.提供相关的连接信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">paw</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.注册驱动</span></span><br><span class="line">        DriverManager.registerDriver(driver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取连接，填写相关的信息</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, paw);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式四：针对第三中方式的优化，仅仅是加载驱动，不用显式的注册驱动</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jdbc_Connection4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.提供连接的相关的信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">paw</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.加载Driver</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//下方注册驱动的步骤可省略是因为在jdbc.Driver类中的静态代码块中已经有加载驱动的语句</span></span><br><span class="line"><span class="comment">//        Driver driver = (Driver) aClass.newInstance();</span></span><br><span class="line">        <span class="comment">//.注册驱动</span></span><br><span class="line"><span class="comment">//        DriverManager.registerDriver(driver);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取连接，填写相关的信息</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, paw);</span><br><span class="line">        System.out.println(connection);</span><br></pre></td></tr></table></figure><hr><h2 id="访问和操作数据库"><a href="#访问和操作数据库" class="headerlink" title="访问和操作数据库"></a>访问和操作数据库</h2><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><strong>Statement的弊端：需要拼写sql语句，并且存在sql注入的问题</strong></p><h3 id="关于PrepatedStatement的使用"><a href="#关于PrepatedStatement的使用" class="headerlink" title="关于PrepatedStatement的使用"></a>关于PrepatedStatement的使用</h3><p>作为Statement的子接口，解决了Statement的弊端，还可以操作Blob的数据，而Statement不行</p><p>此外，还可以实现更高效的批量操作</p><ol><li><strong>使用PreparedStatement实现增、删、改操作的通用操作</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先执行1-5的逐个步骤，再去除throw Exception，最后使用try-catch-finally处理异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String sql,Object ... args)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取数据库的连接</span></span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.插入预编译的sql语句，返回PreparedStatement的实例</span></span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                <span class="comment">//此处第一个参数应该为i+1，sql角标是从1开始的</span></span><br><span class="line">                <span class="comment">//第二个参数为i，可变形参是个数组，数组角标是从0开始的</span></span><br><span class="line">                ps.setObject(i+<span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.执行sql语句</span></span><br><span class="line">            ps.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//5.关闭资源</span></span><br><span class="line">            JDBCUtils.closeResource(connection,ps);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取数据库的连接方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.提供连接的相关的信息</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        p.load(in);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">paw</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> p.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.加载驱动</span></span><br><span class="line">        Class.forName(driver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取连接填写相关的信息</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, paw, user);</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    关闭资源的操作方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResource</span><span class="params">(Connection connection, PreparedStatement ps)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps !=<span class="literal">null</span>)</span><br><span class="line">                ps.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection!=<span class="literal">null</span>)</span><br><span class="line">                connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>使用PreparedStatement实现查询具体表的通用操作</strong></p><p>针对表的字段名和属性名不相同的情况下：</p><ul><li>①<strong>必须声明sql时，使用类的属性名来命名字段的别名</strong></li><li>②<strong>使用ResultSetMetaData时，需要使用getColumnLabel()来替换getColumnName()获取列的别名</strong></li><li>③如果sql中没有给字段起别名，getColumnLabel()获取的是原列名</li><li>④<strong>当数据表中的字段名和对应的类属性名不同式，需要在sql语句中给字段名添加 以类属性名 起名的列名</strong></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先执行1-5的逐个步骤，再去除throw Exception，最后使用try-catch-finally处理异常，关闭资源需移至finally中</span></span><br><span class="line">ublic Customers <span class="title function_">selectForCustomers</span><span class="params">(String sql,Object ... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.获取数据库的连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//2.插入sql语句并返回pre的实例</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//3.填充占位符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="comment">//此处的i+1是因为sql是从1开始的，args的长度是用户想要查询的字段个数</span></span><br><span class="line">            ps.setObject(i+<span class="number">1</span>,args[i]);<span class="comment">//此处第二个参数是此刻args数组上为i的元素，而不是数组的角标</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.执行</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();<span class="comment">//返回结果集</span></span><br><span class="line">        <span class="comment">//处理结果集</span></span><br><span class="line">        <span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();<span class="comment">//结果集获取列数的方法封装了元数据ResultSetMetaData</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();<span class="comment">//得到了每条数据中的列数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//因不知道用户会查询几个字段且构造器内没有相应的，只能采取先造一个全是默认值的cust对象，通过后期set重新赋值</span></span><br><span class="line">            <span class="type">Customers</span> <span class="variable">cust</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customers</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//得到每个列上的值，因不知道用户会选取多少字段以及哪个字段只能用根父类接受</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">columnValue</span> <span class="operator">=</span> rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//得到每个字段的列名，因cust类中那个有相应的属性名，可以将此列名的值赋给同名的属性，作为它的值</span></span><br><span class="line"><span class="comment">//                String columnName = rsmd.getColumnName(i + 1);</span></span><br><span class="line">                <span class="comment">//获取列的列名：getColumnName() --- 不推荐使用</span></span><br><span class="line">                <span class="comment">//获取列的别名：getColumnLabel()</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">ColumnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//把此列的值写入到类Customer的对象cust的相应同名属性中，通过类的反射</span></span><br><span class="line">                <span class="comment">//通过运行时类的实例取得运行时类的 指定变量名(columnName)的 同名属性</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Customers.class.getDeclaredField(ColumnLabel);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//因属性有可能是私有的，因此要确定能成功访问</span></span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//通过此属性修改指定对象的属性值，即将cust的同名属性值修改为字段名为columnName的值columnValue</span></span><br><span class="line">                field.set(cust,columnValue);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cust;<span class="comment">//不能再上方循环中就返回用户查询的信息，要等每个数据都赋值完了才返回</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.关闭相应的资源，需要在提交查询之前</span></span><br><span class="line">        JDBCUtils.closeResource(connection,ps,rs);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//有可能用户查询的字段不存在</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/03/15/bvXWM6.png" alt="查询操作的流程"></p><ol start="3"><li><p><strong>使用PreparedStatement实现不同表的查询操作</strong></p><p>PS：以下为课件提供的，自己按照思路重写的放在了prestament_differen_table包下，忘记了可以看此包下的写法</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 通用的针对于不同表的查询:返回一个对象 (version <span class="number">1.0</span>)</span><br><span class="line">public <span class="operator">&lt;</span>T<span class="operator">&gt;</span> T getInstance(Class<span class="operator">&lt;</span>T<span class="operator">&gt;</span> clazz, String <span class="keyword">sql</span>, Object... args) &#123;</span><br><span class="line"></span><br><span class="line">Connection conn <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">try &#123;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">1.</span>获取数据库连接</span><br><span class="line">conn <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">2.</span>预编译<span class="keyword">sql</span>语句，得到PreparedStatement对象</span><br><span class="line">ps <span class="operator">=</span> conn.prepareStatement(<span class="keyword">sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">3.</span>填充占位符</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> args.length; i<span class="operator">+</span><span class="operator">+</span>) &#123;</span><br><span class="line">ps.setObject(i <span class="operator">+</span> <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">4.</span>执行executeQuery(),得到结果集：ResultSet</span><br><span class="line">rs <span class="operator">=</span> ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">5.</span>得到结果集的元数据：ResultSetMetaData</span><br><span class="line">ResultSetMetaData rsmd <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">6.1</span>通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span><br><span class="line"><span class="type">int</span> columnCount <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line">if (rs.next()) &#123;</span><br><span class="line">T t <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> columnCount; i<span class="operator">+</span><span class="operator">+</span>) &#123;<span class="operator">/</span><span class="operator">/</span> 遍历每一个列</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 获取列值</span><br><span class="line">Object columnVal <span class="operator">=</span> rs.getObject(i <span class="operator">+</span> <span class="number">1</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 获取列的别名:列的别名，使用类的属性名充当</span><br><span class="line">String columnLabel <span class="operator">=</span> rsmd.getColumnLabel(i <span class="operator">+</span> <span class="number">1</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">6.2</span>使用反射，给对象的相应属性赋值</span><br><span class="line">Field field <span class="operator">=</span> clazz.getDeclaredField(columnLabel);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">7.</span>关闭资源</span><br><span class="line">JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java与SQL对应数据类型转换"><a href="#Java与SQL对应数据类型转换" class="headerlink" title="Java与SQL对应数据类型转换"></a>Java与SQL对应数据类型转换</h3><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h3 id="操作Blob类型的字段"><a href="#操作Blob类型的字段" class="headerlink" title="操作Blob类型的字段"></a>操作Blob类型的字段</h3><p>插入BLOB类型的数据必须使用<strong>PreparedStatement</strong>，因为BLOB类型的数据无法使用字符串拼接写的。</p><p><img src="https://s1.ax1x.com/2022/03/10/bhjaPs.png" alt="BLOB类型"></p><ul><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet&#x3D;16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><ol><li>向数据库customers表中插入blob类型的字段</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into customers(name,email,birth,photo) values(?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">ps.setObject(<span class="number">1</span>,<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">ps.setObject(<span class="number">2</span>,<span class="string">&quot;test@qq.com&quot;</span>);</span><br><span class="line">ps.setObject(<span class="number">3</span>,<span class="string">&quot;2000-10-12&quot;</span>);</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\test.jpg&quot;</span>);<span class="comment">//默认识别在当前工程下，否则需要指定具体模块的src</span></span><br><span class="line">ps.setBlob(<span class="number">4</span>,in);</span><br><span class="line"></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(connection,ps);</span><br></pre></td></tr></table></figure><ol start="2"><li>查询数据库customers表中blob类型的字段</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth,photo from customers where id = ?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        ps.setObject(<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">bs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span>  <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">birth</span> <span class="operator">=</span> rs.getDate(<span class="string">&quot;birth&quot;</span>);</span><br><span class="line">            <span class="type">Customers</span> <span class="variable">customers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customers</span>(id, name, email, birth);</span><br><span class="line">            System.out.println(customers);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将Blob类型的字段下载下来，保存在本地</span></span><br><span class="line">            <span class="type">Blob</span> <span class="variable">photo</span> <span class="operator">=</span> rs.getBlob(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">            bs = photo.getBinaryStream();</span><br><span class="line"></span><br><span class="line">            output = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test1.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">//指明一次读取多少个</span></span><br><span class="line">            <span class="type">int</span> len;<span class="comment">//记录每次读入到b数组中的字节个数</span></span><br><span class="line">            <span class="keyword">while</span>((len = bs.read(b)) != -<span class="number">1</span> )&#123;<span class="comment">//bs.read(b)是将bu的文件读入到b数组中，且返回读入的个数</span></span><br><span class="line">                output.write(b,<span class="number">0</span>,len);<span class="comment">//将文件从数组b中写入到test1.jpg文件中，从0开始，写出len的个数，即读多少写出多少</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        bs.close();</span><br><span class="line">        output.close();</span><br><span class="line">        JDBCUtils.closeResource(connection,ps,rs);</span><br></pre></td></tr></table></figure><h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量插入方式三：最终版 设置不允许自动提交数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFnally</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置不允许自动提交数据</span></span><br><span class="line">        connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into goods(name) values(?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            ps.setObject(<span class="number">1</span>,<span class="string">&quot;name&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.存储 sql执行次数</span></span><br><span class="line">            ps.addBatch();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//2.执行batch</span></span><br><span class="line">                ps.executeBatch();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//3.清空batch</span></span><br><span class="line">                ps.clearBatch();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提交数据</span></span><br><span class="line"></span><br><span class="line">        connection.commit();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;所花的时间为&quot;</span> + (end - start));</span><br><span class="line"></span><br><span class="line">        JDBCUtils.closeResource(connection,ps);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="PreparedStatement-与-Statement的区别"><a href="#PreparedStatement-与-Statement的区别" class="headerlink" title="PreparedStatement 与 Statement的区别"></a>PreparedStatement 与 Statement的区别</h3><ul><li><p>代码的可读性和可维护性。</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong></p><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li><p>PreparedStatement 可以防止 SQL 注入</p></li></ul><hr><h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><ul><li><p>事务：一组逻辑操作单元使得<strong>数据从一种状态变为另一种状态</strong></p></li><li><p><strong>事务处理的原则：要么成功，所有的操作都被提交(commit)；要么失败，所有的操作都被回滚(rollback)</strong></p></li><li><p>在断开连接的时候也会自动提交已经修改的数据，即使设置了set autocommit &#x3D; false；</p></li></ul><ol><li><p>java程序中让多个sql语句作为一个事务执行：</p><p>①调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</p><p>②成功执行后，调用 <strong>commit();</strong> 方法提交事务</p></li></ol><p>​       ③在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户AA向用户BB转账100</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.获取数据库连接</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">// 2.开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 3.进行数据库操作</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update user_table set balance = balance - 100 where user = ?&quot;</span>;</span><br><span class="line">            update(conn, sql1, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟网络异常</span></span><br><span class="line">            <span class="comment">//System.out.println(10 / 0);</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update user_table set balance = balance + 100 where user = ?&quot;</span>;</span><br><span class="line">            update(conn, sql2, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line">            <span class="comment">// 4.若没有异常，则提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 5.若有异常，则回滚事务</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//6.恢复每次DML操作的自动提交功能</span></span><br><span class="line">                conn.setAutoCommit(<span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//7.关闭连接</span></span><br><span class="line">            JDBCUtils.closeResource(conn, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对数据库的操作方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用事务以后的通用的增删改操作（version 2.0）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Connection conn ,String sql, Object... args)</span> &#123;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 2.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 4.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(<span class="literal">null</span>, ps);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务的ACID属性"><a href="#事务的ACID属性" class="headerlink" title="事务的ACID属性"></a>事务的ACID属性</h3><ul><li><p>原子性(Atomicity)</p><p>原子性是指事务是一个不可分割的单位，对事务的操作要么都成功，要么都不成功</p></li><li><p>一致性(Consistency)</p><p>事务必须让数据库从一个一致的状态变为另一个一致的状态</p></li><li><p>隔离性(Isolation)</p><p>隔离性是指一个事务的执行不能被其他的事务干扰，即一个事务其内部的操作对于其他此刻并发的事务来说是隔离的，各个事务之间相互不影响</p></li><li><p>持久性(Durability)</p><p>持久性是指一个事务被提交之后，对数据库的修改是永久性的。数据库的任何改变都不能影响它</p></li></ul><h3 id="数据库并发问题"><a href="#数据库并发问题" class="headerlink" title="数据库并发问题"></a>数据库并发问题</h3><ul><li><p><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</p><p><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</p><p><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</p></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li></ul><h3 id="数据库隔离级别"><a href="#数据库隔离级别" class="headerlink" title="数据库隔离级别"></a>数据库隔离级别</h3><p>一个事务与其他事务隔离的程度称为隔离级别，<strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p><p><img src="https://s1.ax1x.com/2022/03/15/bvjCJs.png" alt="隔离级别"></p><ul><li>隔离级别1啥也没解决，级别2解决了脏读问题，级别3解决了脏读和不可重复读的问题，级别4解决了脏读和不可重复读及幻读问题</li><li><strong>MySQL</strong>支持这 4 种隔离级别，<strong>默认隔离级别为REPEATBLE READ</strong></li><li>而在<strong>Oracle</strong>中仅支持其中 2 种，分别为READ COMMITED, SERIALIZABLE，<strong>默认隔离级别为READ COMMITED</strong></li></ul><hr><h2 id="DAO及相关实现类"><a href="#DAO及相关实现类" class="headerlink" title="DAO及相关实现类"></a>DAO及相关实现类</h2><h3 id="DAO-java"><a href="#DAO-java" class="headerlink" title="DAO.java"></a>DAO.java</h3><p>封装了整体常用的增删改查的方法体</p><p>静态代码块内的操作想法是通过this获取所属类再获取所属类的父类，在强转成带泛型的父类，在获取泛型数组，再取第一个泛型类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Dao</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz = <span class="literal">null</span>;<span class="comment">//用于创建当前运行时类的实例，提供下方的通用方法使用</span></span><br><span class="line"></span><br><span class="line">     &#123;   <span class="comment">//此处的this表示谁调用即为当前对象</span></span><br><span class="line">        <span class="comment">//获取当前对象的带泛型父类 即子类继承父类，Dao&lt;Customers&gt;整一个整体</span></span><br><span class="line">        <span class="comment">//CustomersDaoImpl extends Dao&lt;Customers&gt;，此时的泛型参数是Customers</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericSuperclass</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getGenericSuperclass();<span class="comment">//type是个接口， Class&lt;T&gt;实现了此接口</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//强转为带参数的type，实际上这里还是Dao&lt;Customers&gt;。</span></span><br><span class="line">        <span class="comment">//目的是为了能够调取下面的.getActualTypeArguments方法</span></span><br><span class="line">        <span class="type">ParameterizedType</span> <span class="variable">parameterizedType</span> <span class="operator">=</span> (ParameterizedType) genericSuperclass;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取父类的泛型参数，父类泛型参数不一定为一 因此得到了一个数组 </span></span><br><span class="line">        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的泛型不一定只有一个，此处取出第一个并强转，也就得到了泛型的参数</span></span><br><span class="line">        clazz = (Class&lt;T&gt;) actualTypeArguments[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通用的增删改操作---version 2.0 （考虑上事务）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Connection conn,String sql,Object... args)</span> &#123;<span class="comment">// sql中占位符的个数与可变形参的长度相同！</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.预编译sql语句，返回PreparedStatement的实例</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 2.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);<span class="comment">// 小心参数声明错误！！</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3.执行</span></span><br><span class="line">            <span class="keyword">return</span> ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 4.资源的关闭</span></span><br><span class="line">            JDBCUtils.closeResource(<span class="literal">null</span>, ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用的查询操作，用于返回数据表中的一条记录（version 2.0：考虑上事务）</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getInstance</span><span class="params">(Connection conn,String sql, Object... args)</span> &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 获取结果集的元数据 :ResultSetMetaData</span></span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">            <span class="comment">// 通过ResultSetMetaData获取结果集中的列数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.newInstance();<span class="comment">//此处的类对于的是此类的父类泛型中泛型参数</span></span><br><span class="line">                <span class="comment">// 处理结果集一行数据中的每一个列</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">// 获取列值</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">columValue</span> <span class="operator">=</span> rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取每个列的列名</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 给t对象指定的columnName属性，赋值为columValue：通过反射</span></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnLabel);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    field.set(t, columValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(<span class="literal">null</span>, ps, rs);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//针对不同表的通用查询方式,返回多条查询数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getListQuery</span><span class="params">(Connection connection,String sql, Object ... args)</span>&#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.插入预编译的sql语句，返回PreparedStatement的实例</span></span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i+<span class="number">1</span>,args[i]);<span class="comment">//谨记此处第二个元素是获取数组角标为i的元素，而不是i，已出现两次错误</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.执行并处理结果集</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">rsdm</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsdm.getColumnCount();</span><br><span class="line">            ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//预先创立的集合对象</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.newInstance();<span class="comment">//此处的类对于的是此类的父类泛型中泛型参数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">columnValue</span> <span class="operator">=</span> rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsdm.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnLabel);</span><br><span class="line"></span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    field.set(t,columnValue);</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(t);<span class="comment">//将每个列的数据填充好的对象添加进集合</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭资源</span></span><br><span class="line">            JDBCUtils.closeResource(<span class="literal">null</span>,ps,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于查询特殊值的通用方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; E <span class="title function_">getValue</span><span class="params">(Connection connection,String sql,Object ... args)</span>&#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i+<span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">return</span> (E) rs.getObject(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(<span class="literal">null</span>,ps,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CustomersDao-java"><a href="#CustomersDao-java" class="headerlink" title="CustomersDao.java"></a>CustomersDao.java</h3><p>作为接口出现，封装了对customer表的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*此接口用于规范针对于customers表的常用操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomersDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将customers对象添加到数据库中</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Connection connection,Customers cust)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据指定id删除表中的一条记录</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Connection connection,<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据内存中的cust对象，修改数据表的相应记录</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Connection connection,Customers cust)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据指定的id查询相应的Customers对象</span></span><br><span class="line">    Customers <span class="title function_">getById</span><span class="params">(Connection connection,<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询表中所有记录构成的集合</span></span><br><span class="line">    List&lt;Customers&gt; <span class="title function_">getAll</span><span class="params">(Connection connection)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数据表的数据条目数</span></span><br><span class="line">    Long <span class="title function_">getCount</span><span class="params">(Connection connection)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数据表中最大的生日</span></span><br><span class="line">    Date <span class="title function_">getMaxBirth</span><span class="params">(Connection connection)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CustomersDaoImpl-java"><a href="#CustomersDaoImpl-java" class="headerlink" title="CustomersDaoImpl.java"></a>CustomersDaoImpl.java</h3><p>作为DAO的子类，实现了CustomersDao，主要通过调用DAO的基本方法填入相关参数实现对表的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomersDaoImpl</span> <span class="keyword">extends</span> <span class="title class_">Dao</span>&lt;Customers&gt; <span class="keyword">implements</span> <span class="title class_">CustomersDao</span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ①此处CustomersDaoImpl继承父类带泛型的且指定具体参数，</span></span><br><span class="line"><span class="comment">    因此下方查询方法getById、getAll的具体形参不必再声明Customers.class</span></span><br><span class="line"><span class="comment">    ②子类继承父类且父类带泛型之后</span></span><br><span class="line"><span class="comment">    泛型方法若使用与父类的泛型参数相同的泛型标识，则会报错误，表示此方法不再是泛型方法，只是使用了泛型参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Connection connection, Customers cust)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into customers(name,email,birth) values(?,?,?)&quot;</span>;</span><br><span class="line">        update(connection,sql,cust.getName(),cust.getEmail(),cust.getBirth());<span class="comment">//调用的是DAO内的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Connection connection, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from customers where id = ?&quot;</span>;</span><br><span class="line">        update(connection,sql,id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Connection connection, Customers cust)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update customers set name = ?,email = ?,birth = ? where id = ?&quot;</span>;</span><br><span class="line">        update(connection,sql,cust.getName(),cust.getEmail(),cust.getBirth(),cust.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Customers <span class="title function_">getById</span><span class="params">(Connection connection, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line">        <span class="type">Customers</span> <span class="variable">customers</span> <span class="operator">=</span> getInstance(connection,sql,id);</span><br><span class="line"><span class="comment">//        Customers customers = getInstance(connection,Customers.class,sql,id);</span></span><br><span class="line">        <span class="keyword">return</span> customers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Customers&gt; <span class="title function_">getAll</span><span class="params">(Connection connection)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers&quot;</span>;</span><br><span class="line">        List&lt;Customers&gt; list = getListQuery(connection,sql);</span><br><span class="line"><span class="comment">//        List&lt;Customers&gt; list = getListQuery(connection,Customers.class,sql);</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCount</span><span class="params">(Connection connection)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from customers&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> getValue(connection, sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getMaxBirth</span><span class="params">(Connection connection)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select max(birth) from customers&quot;</span>;</span><br><span class="line">       <span class="keyword">return</span> getValue(connection,sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对CustomersDaoImpl-java的测试"><a href="#对CustomersDaoImpl-java的测试" class="headerlink" title="对CustomersDaoImpl.java的测试"></a>对CustomersDaoImpl.java的测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在创建这个dao对象之前会调用其所有父类的结构，也就执行了DAO.java类中的非静态代码块，从而创建了CustomersDaoImpl的实例</span></span><br><span class="line">    <span class="type">CustomersDaoImpl</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomersDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">Customers</span> <span class="variable">cust</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customers</span>(<span class="number">1</span>, <span class="string">&quot;张扬&quot;</span>, <span class="string">&quot;test@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">15565565534L</span>));</span><br><span class="line">            dao.insert(connection,cust);</span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(connection,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>java内存泄漏：即堆空间中有对象没有被回收</p><p>好处是减低资源消耗，可以重复使用，便于连接的管理。提高程序响应的速度</p><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。（与线程池思想相似。）</p><ul><li><p>使用第三方的创建数据库连接池都需要导入相应的jar包和创建填写相应的配置文件</p></li><li><p><strong>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示</strong>，DataSource 只是一个接口，该接口通常由服务器 (Weblogic, WebSphere, Tomcat)提供实现，</p><p>也有一些开源组织提供实现：</p></li></ul><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><p>速度较快，但不稳定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用配置文件（推荐使用）</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Datesource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;C3P0&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> cpds.getConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> src下的配置文件为：【c3p0-config.xml】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//配置文件</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;C3P0&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--提供获取连接的基本信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/test?characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>rewriteBatchedStatements=true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--进行数据库连接池管理的基本信息 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当数据库连接池的连接数不够时 自动向数据库申请的连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--C3P0数据库连接池中初始化时的连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--C3P0数据库连接池中维护的最少连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--C3P0数据库连接池中维护的最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--C3P0数据库连接池中维护最多的Statements的个数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>50<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--每个连接中可以使用的Statements的最多个数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DPCP"><a href="#DPCP" class="headerlink" title="DPCP"></a>DPCP</h3><p>速度较慢，但比较稳定</p><p>需要依赖两个jar包才能实现创建数据库连接池</p><ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li><li><strong>Tomcat 的连接池正是采用该连接池来实现的</strong>。</li></ul><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用DPCP数据库连接池技术获取数据库连接</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> DataSource source;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="comment">//方式一：类的加载器</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;dpcp.properties&quot;</span>);</span><br><span class="line">            pro.load(in);</span><br><span class="line"></span><br><span class="line">            source = BasicDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Connection <span class="title function_">getConnection1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> source.getConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h3 id="Druid-德鲁伊"><a href="#Druid-德鲁伊" class="headerlink" title="Druid(德鲁伊)"></a>Druid(德鲁伊)</h3><p>目前最为推荐的数据库连接池创建方式</p><p> <strong>source1 &#x3D; DruidDataSourceFactory.createDataSource(pro);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用德鲁伊数据库连接池技术</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource source1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            pro.load(in);</span><br><span class="line">            source1 = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection3</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> source1.getConnection();</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><ul><li>详细配置</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql:&#x2F;&#x2F;10.20.153.104:3306&#x2F;druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><hr><h2 id="Apache-DBUtils实现CRUD操作"><a href="#Apache-DBUtils实现CRUD操作" class="headerlink" title="Apache-DBUtils实现CRUD操作"></a>Apache-DBUtils实现CRUD操作</h2><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p><h3 id="主要使用"><a href="#主要使用" class="headerlink" title="主要使用"></a>主要使用</h3><h4 id="DbUtils"><a href="#DbUtils" class="headerlink" title="DbUtils"></a>DbUtils</h4><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul><h4 id="QueryRunner类"><a href="#QueryRunner类" class="headerlink" title="QueryRunner类"></a>QueryRunner类</h4><ul><li><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></li><li>QueryRunner类提供了两个构造器：<ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li>QueryRunner类的主要方法：<ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hcxs1986</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 封装了针对数据库的增删改查的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/3/14 21:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryRunnerTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            connection = JDBCUtils.getConnection3();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into customers(name,email,birth) values(?,?,?)&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> runner.update(connection, sql, <span class="string">&quot;tt&quot;</span>, <span class="string">&quot;tt@gmail.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">564849879844L</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;更新了&quot;</span> + update + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(connection,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    BeanHandler：是ResultHandler接口的实现类，用于封装表的一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            connection3 = JDBCUtils.getConnection3();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line">            BeanHandler&lt;Customers&gt; handler = <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;&gt;(Customers.class);</span><br><span class="line">            <span class="type">Customers</span> <span class="variable">query</span> <span class="operator">=</span> runner.query(connection3, sql, handler, <span class="number">23</span>);</span><br><span class="line">            System.out.println(query);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(connection3,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    BeanListHandler：是ResultHandler接口的实现类，用于封装表的多条记录构成的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            connection3 = JDBCUtils.getConnection3();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;</span><br><span class="line">            BeanListHandler&lt;Customers&gt; handler = <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;&gt;(Customers.class);</span><br><span class="line">            List&lt;Customers&gt; query = runner.query(connection3, sql, handler, <span class="number">10</span>);</span><br><span class="line">            query.forEach(System.out :: println);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(connection3,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    MapHandler：是ResultHandler接口的实现类，用于封装表的一条记录</span></span><br><span class="line"><span class="comment">    将字段及相应字段的值作为map中的key和value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            connection3 = JDBCUtils.getConnection3();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line">            <span class="type">MapHandler</span> <span class="variable">mapHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapHandler</span>();</span><br><span class="line">            Map&lt;String, Object&gt; query = runner.query(connection3, sql, mapHandler, <span class="number">10</span>);</span><br><span class="line">            System.out.println(query);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(connection3,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    MapHandler：是ResultHandler接口的实现类，用于封装表的多条记录构成的集合</span></span><br><span class="line"><span class="comment">    将字段及相应字段的值作为map中的key和value,将这些map添加到list中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            connection3 = JDBCUtils.getConnection3();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;</span><br><span class="line">            <span class="type">MapListHandler</span> <span class="variable">mapListHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapListHandler</span>();</span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; query = runner.query(connection3, sql, mapListHandler, <span class="number">10</span>);</span><br><span class="line">            query.forEach(System.out :: println);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(connection3,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ScalarHandler：是ResultHandler接口的实现类，用于封装一条查询特殊值的记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            connection3 = JDBCUtils.getConnection3();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from customers&quot;</span>;</span><br><span class="line">            <span class="type">ScalarHandler</span> <span class="variable">scalarHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>();</span><br><span class="line">            <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> (<span class="type">long</span>) runner.query(connection3, sql, scalarHandler);</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(connection3,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">总结</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateWithTx</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取连接的操作（</span></span><br><span class="line">        <span class="comment">//① 手写的连接：JDBCUtils.getConnection();</span></span><br><span class="line">        <span class="comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span></span><br><span class="line">    <span class="comment">//2.取消自动提交 </span></span><br><span class="line">        <span class="comment">//  set autoCommit = false； 或 conn.setAutoCommit(false)</span></span><br><span class="line">        <span class="comment">//3.对数据表进行一系列CRUD操作</span></span><br><span class="line">        <span class="comment">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span></span><br><span class="line">        <span class="comment">//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line">        <span class="comment">//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String</span></span><br><span class="line">        <span class="comment">//sql,Object ... args)&#123;&#125;</span></span><br><span class="line">        <span class="comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span></span><br><span class="line">        <span class="comment">//提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//回滚数据</span></span><br><span class="line">    conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//4.关闭连接等操作</span></span><br><span class="line">    <span class="comment">//① JDBCUtils.closeResource();</span></span><br><span class="line">    <span class="comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2022/03/10/MySQL1/"/>
      <url>/2022/03/10/MySQL1/</url>
      
        <content type="html"><![CDATA[<h2 id="初识数据库"><a href="#初识数据库" class="headerlink" title="初识数据库"></a>初识数据库</h2><p>持久化：将数据保存到可掉电式存储设备中。</p><p>作用：将内存中的数据存储在关系型数据库中，也可是磁盘文件或XML数据文件</p><p><strong>DB：数据库(Database)</strong></p><p>存储数据的“仓库”，相当于为存储数据的文件夹</p><p><strong>DBMS：数据库管理系统(Database Management System)</strong></p><p>管理和操作数据库的大型软件，可理解为一个软件</p><p><strong>SQL：结构化查询语言(Structured Query Language)</strong></p><p>用于于数据库通信的语言，理解为对数据库数据的一种增删改查的手段</p><h3 id="常见数据库"><a href="#常见数据库" class="headerlink" title="常见数据库"></a>常见数据库</h3><ol><li><p>Oracle甲骨文</p><p>Oracle 2 —-RDBMS(关系型数据库管理系统)</p><p>Oracle  —&gt; BEA Systems —&gt; SUN公司 —&gt; MySQL</p></li><li><p>MySQL</p><p>①开放源代码的关系型数据库管理系统</p><p>②32位系统表文件最大支持4GB，64位系统支持最大的表文件8TB</p></li><li><p>SQL Server</p><p>微软开发的大型商业数据库</p></li><li><p>DB2</p></li></ol><p>​IBM公司，用于银行系统</p><ol start="4"><li><p>PostgreSQL</p><p>简称PgSQL，是开源的</p></li><li><p>SyBase</p><p>提供了数据建模 PowerDesigner</p></li><li><p>SQLite</p><p>嵌入式小型数据库，应用在手机端</p></li><li><p>informix</p><p>IBM公司，运用于unix和linux平台</p></li></ol><h3 id="关系型数据库-RDBMS"><a href="#关系型数据库-RDBMS" class="headerlink" title="关系型数据库(RDBMS)"></a>关系型数据库(RDBMS)</h3><ol><li><p>最古老的数据库类型，将数据结构变为了简单的二维关系</p></li><li><p><strong>以“行(row)“ 和 “列(column)” 的形式存储数据 —-&gt; 一行一列构成了表(table) —-&gt; 一组表形成一个库 (datebase)</strong></p></li><li><p>表与表之间数据记录有关系，<strong>关系型数据库即建立在关系模型基础上的数据库</strong></p></li><li><p>优势</p><p>①可进行复杂查询：用SQL语句在多个表之间进行复杂的数据查询</p><p>②事务支持：实现对安全性能较高的数据访问</p></li></ol><h3 id="非关系型数据库-非RDBMS"><a href="#非关系型数据库-非RDBMS" class="headerlink" title="非关系型数据库(非RDBMS)"></a>非关系型数据库(非RDBMS)</h3><ol><li><p>可以理解为阉割版的RDBMS，舍弃部分功能以提高查询性能</p></li><li><p>非RDBMS的数据库类型</p><p>①键值型数据库：经常用于内存缓存。主流的是Redis键值型数据库</p><p>②文档型数据库：用于存储并获取数据，例如XML、JSON等格式</p><p>③搜索引擎数据库：<strong>核心原理是”倒排索引“，对全文索引效率较低</strong>。主流：Solr、Elasticsearch、Splunk等</p><p>④列式数据库：大量降低系统的I&#x2F;O，适合分布式文件系统。主流：HBase。</p><p>⑤图形数据库：经常用于刻画对象之间的关系。主流：Neo4J、InfoGrid</p></li></ol><h3 id="关系型数据库的设计规则"><a href="#关系型数据库的设计规则" class="headerlink" title="关系型数据库的设计规则"></a>关系型数据库的设计规则</h3><p>数据库的典型结构是数据表，一个数据库可以有多张表，每张表都有一个名字，<strong>而表名具有唯一性</strong></p><ol><li>E-R(entity-relationship，实体-练习)的模型主要概念：实体集、属性、联系集</li></ol><p>​ORM(Object Relation Mapping)对象关系映射：</p><p>​表table &lt;—&gt; (实体集)类class行(row)  &lt;—&gt;  (实体)类的对象Instance列(column)  &lt;—&gt;  (字段)类中的属性field</p><ol start="2"><li><p>表的关联关系</p><p>4种关系：一对一关联‘、一对多关联、多对多关联、自我引用</p></li></ol><hr><h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2><h3 id="SQL语言的分类"><a href="#SQL语言的分类" class="headerlink" title="SQL语言的分类"></a>SQL语言的分类</h3><ol><li><p>DDL（Data Definition Languages）数据定义语言</p><p>CREATE(创建)  \ ALTER(修改)  \  DROP(删除)  \ RENAME(重命名)  \TRUNCATE(清空)</p></li><li><p>DML（Data Manipulation Language）数据操作语言</p><p>INSERT (添加)  \ DELETE(删除) \ UPDATE(更改) \ SELECT(查询)</p></li><li><p>DCL（Data Control Language）数据控制语言</p><p>GRANT(赋予权限)  \  REVOKE(回收权限)  \  COMMIT(提交)  \ ROLLBACK(回滚)  \  SAVEPOINT(保存点)</p></li></ol><ul><li>SELECT查询语句使用频率较高，因此其又被独称一类：DQL（Date Query Language数据查询语言）</li><li>还有将 COMMIT 、 ROLLBACK 两者共称为TCL （Transaction Control Language，事务控制语言）</li></ul><h3 id="SQL语言的规则与规范"><a href="#SQL语言的规则与规范" class="headerlink" title="SQL语言的规则与规范"></a>SQL语言的规则与规范</h3><ol><li>每条命令以 ; 或 \g 或 \G 结束</li><li>关键字都是大写的，不能缩写，也不能分行</li></ol><h4 id="SQL大小写不同环境区别"><a href="#SQL大小写不同环境区别" class="headerlink" title="SQL大小写不同环境区别"></a>SQL大小写不同环境区别</h4><ol><li><p>MySQL 在 Windows 环境下是大小写不敏感的</p></li><li><p>MySQL 在 Linux 环境下是大小写敏感的</p><ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的 </li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul></li><li><p>推荐采用统一的书写规范： </p><ul><li>数据库名、表名、表别名、字段名、字段别名等都小写 </li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul><p><strong>补充：在SQL中字符串用单引号，列的别名用双引号</strong></p></li><li><p>注释</p><ul><li>单行注释：#注释文字(MySQL特有的方式)</li><li>单行注释：– 注释文字(–后面必须包含一个空格。) </li><li>多行注释：&#x2F;* 注释文字 *&#x2F;</li></ul></li></ol><ul><li>补充 导入数据库的方式：①source 文件的全路径  ②利用图形化界面的工具</li></ul><hr><h2 id="基本的SELECT语句"><a href="#基本的SELECT语句" class="headerlink" title="基本的SELECT语句"></a>基本的SELECT语句</h2><ol><li>SELECT</li></ol><ul><li><p>SELECT 字段1，字段2 FROM 表名</p></li><li><p>SELECT * FROM 表名；&#x2F;&#x2F;* 表中的所有字段(或列)</p></li><li><p>查询字段返回的结果称为结果集</p></li></ul><ol start="2"><li><p>列的别名</p><p>创建类的别名的方式</p><p>①列名后空格 起名</p><p>②as(别名) ：alias</p><p>③使用一对“ ”包起来；</p></li></ol><p><strong>补充：列的别名只能在关键字ORDER BY中使用，不能在WHERE中使用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id emp_id,last_name <span class="keyword">AS</span> lname,department_id &quot;部门id&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>去重关键字：distinct</p></li><li><p>空值参与运算</p><p>①空值：null，其参与运算的结果都为空（null）</p><p>②null 不等同于0或者‘null’，仅仅只是说明不确定有没有 比如奖金为0是没有  奖金为null是不确定有没有</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#空值参与运算</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,salary &quot;月工资&quot;,salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> IFNULL(commission_pct,<span class="number">0</span>)) <span class="operator">*</span> <span class="number">12</span> &quot;年工资&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>着重号 &#96;&#96;</p><p>作用：当数据库名或表名与关键字、保留字相同时，使用着重号&#96;&#96;表示输入的是表名或数据库名</p></li><li><p>查询常数</p><p>数据的每一行都会添加此常数（不一定在此表中存在）</p><p>下面的‘北京市’即为常数</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#查询常数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;北京市&#x27;</span>,employee_id,salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ol start="7"><li><p>显示表结构</p><p>关键字：describe</p><p>DESCRIBE 表名;</p></li><li><p>过滤数据</p><p>关键字：where ，需要声明在from的后面</p><p>使用注意：字符串需要使用一对’ ‘修饰，与Java的字符串有所区别</p></li></ol><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>&#x2F;(DIV) 都表示除法运算：div 和 &#x2F;的区别：</p><p>整数  DIV  整数  &#x3D; 整数 例如 100 DIV 3 &#x3D; 33；</p><p>整数 &#x2F; 整数 &#x3D; 取商的整数部分+默认保留小数点后四位  例如： 100 &#x2F; 3 &#x3D; 33.3333</p><p>%(MOD)：</p><p>在SQL中，+ 号没有连接的作用，仅仅表示加法运算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#在java中为<span class="number">1001</span>，这里的‘<span class="number">1</span>’ 和 java中的“<span class="number">1</span>”是一样的 因为<span class="keyword">sql</span>中字符串是以 ‘  ’  修饰的</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;# DUAL 伪表</span><br><span class="line">#在<span class="keyword">SQL</span>中结果为<span class="number">101</span>，此时，字符串转换为了数值（隐式转换）</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="string">&#x27;a&#x27;</span> # 结果为<span class="number">100</span>，此时<span class="string">&#x27;a&#x27;</span> 看作<span class="number">0</span>处理</span><br><span class="line"><span class="keyword">FROM</span> DUAL;# DUAL 伪表</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span> <span class="operator">+</span> <span class="keyword">NULL</span> # 结果为<span class="keyword">null</span>，<span class="keyword">null</span>参与运算结果都是<span class="keyword">null</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;# DUAL 伪表</span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>符号：&#x3D;(等于)、&lt;&#x3D;&gt;(安全等于)、&lt;&gt;或!&#x3D;(均是不等于)、</p><p>判断都是true，则返回1；判断都是false，则返回0，其余情况返回null</p><p><strong>特殊的：&lt;&#x3D;&gt;安全等于是为区别 null的情况，两个数值都为null返回1；其中一个为null返回0</strong></p><p>​规则；</p><ol><li>字符串存在隐式转换，如果转换数值不成功，则默认当成0</li><li>两边都是字符串的花，则按照ANSI的比较规则进行比较</li><li>只要有null 参与判断，结果就为null；</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#对应第一种</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">2</span>,<span class="number">1</span><span class="operator">!=</span> <span class="number">2</span>,<span class="number">1</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>,<span class="number">1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>,<span class="number">0</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line">#对应第二种</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;a&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;ab&#x27;</span><span class="operator">=</span> <span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;a&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line">#对应第三种</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="operator">=</span> <span class="keyword">NULL</span>,<span class="keyword">NULL</span> <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><h3 id="相关关键字"><a href="#相关关键字" class="headerlink" title="相关关键字"></a>相关关键字</h3><ol><li><p>is null(为空) \ is not null(不为空) \ isnull类似一个方法&#x3D;&#x3D; WHERE ISNULL(commission_pct);</p></li><li><p>least(value1,value2) ：取两者中小的输出\ greatest(value1,value2)：取两者中大的输出</p></li><li><p>between 条件下限1 and 条件上限2 (查询条件1和条件2范围内的数据，包括条件1、2其本身的数据)</p></li><li><p>in(set)：查询是set集合数值的数据信息     \not in(set)：查询不是set集合数值的数据信息</p></li><li><p>like()：模糊查询      % ：代表不确定个数的字符(0个,1个,多个)      _ ：代表一个不确定的字符   转义字符：\</p></li><li><p>正则表达式运算符：regexp \ rlike ：</p></li></ol><table><thead><tr><th align="left">正则表达式</th></tr></thead><tbody><tr><td align="left">（1）‘^’匹配以该字符后面的字符开头的字符串。</td></tr><tr><td align="left">（2）‘$’匹配以该字符前面的字符结尾的字符串。</td></tr><tr><td align="left">（3）‘.’匹配任何一个单字符。</td></tr><tr><td align="left">（4）“[…]”匹配在方括号内的任何字符。例如，“[abc]”匹配“a”或“b”或“c”。为了命名字符的范围，使用一 个‘-’。“[a-z]”匹配任何字母，而“[0-9]”匹配任何数字。</td></tr><tr><td align="left">（5）‘<em>’匹配零个或多个在它前面的字符。例如，“x</em>”匹配任何数量的‘x’字符，“[0-9]<em>”匹配任何数量的数字， 而“</em>”匹配任何数量的任何字符。</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>符号：XOR(逻辑异或)：取满足一真一假的结果、OR(||)、AND(&amp;&amp;)、!(NOT) </p><p><strong>补充：OR可以和AND一起使用，但由于AND的优先级高于OR，因此先 对AND两边的操作数进行操作，再与OR中的操作数结合。</strong></p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>取反从底层二进制是从最高位逐个取反</p><p><img src="https://s1.ax1x.com/2022/03/10/bhOARx.png" alt="位运算符"></p><hr><h2 id="排序与分页"><a href="#排序与分页" class="headerlink" title="排序与分页"></a>排序与分页</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><strong>如果没有使用任何排序操作，默认情况下查询返回的数据是按照添加数据的顺序显示的</strong></p><ol><li><p>使用关键字ORDER BY 进行排序操作</p><p>升序：asc(ascend)；从低到高</p><p>降序：desc(descend)；从高到低</p><p>一般在 ORDER BY 字段 后面没有显示的声明使用哪种排序方式，则默认使用的是升序排列</p><p><strong>补充：列的别名只能在关键字中使用，不能在WHERE中使用</strong></p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#降序：<span class="keyword">desc</span>(descend)；从高到低</span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line">#升序：<span class="keyword">asc</span>(ascend)；从低到高</span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><ol><li><p>使用关键字LIMIT实现数据的分页操作</p></li><li><p>格式： LIMIT：LIMIT位置偏移量，条目数 </p><p>在一定情况下，”LIMIT  0,条目数“ &#x3D;&#x3D; ”LIMIT 条目数“ </p></li><li><p><strong>运用公式：LIMIT(pageNO - 1) * pageSize，pageSize；</strong></p></li><li><p>WHERE  …  ORDER BY … LIMIT 声明顺序如下</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id,salary,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">&gt;</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id <span class="keyword">DESC</span>,salary <span class="keyword">ASC</span>;</span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">10</span>;#LIMIT声明在最后面</span><br></pre></td></tr></table></figure><ol start="5"><li>MySQL8.0新特性：LIMIT … OFFSET … ；</li></ol><p>​在8.0与5.7有明显的区别LIMIT 条目数  OFFSETLIMIT位置偏移量.；</p><hr><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p><strong>多张表写成一张表会造成冗余、多IO、事务方面锁定的影响</strong></p><h3 id="笛卡尔积-交叉连接-现象"><a href="#笛卡尔积-交叉连接-现象" class="headerlink" title="笛卡尔积(交叉连接)现象"></a>笛卡尔积(交叉连接)现象</h3><p><strong>多表查询中笛卡尔积的错误现象：是指一张表中的数据在另一个表中全都匹配了一次——原因是：缺少了连接条件</strong></p><p>正确的查询操作：注（在查询语句中如果存在多个表有相同的字段，则必须指明此字段所在的表</p><p>为了增加sql语句的可读性，可以考虑给表起别名，但是在之后的在select和where中必须使用别名，不能使用表的原名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#SQL92的写法</span><br><span class="line"><span class="keyword">SELECT</span> employees.employee_id,departments.department_name,employees.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.employee_id <span class="operator">=</span> departments.department_id;</span><br><span class="line"></span><br><span class="line">#使用别名的多表查询</span><br><span class="line"><span class="keyword">SELECT</span> emp.employee_id,dep.department_name,emp.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees emp,departments dep</span><br><span class="line"><span class="keyword">WHERE</span> emp.employee_id <span class="operator">=</span> dep.department_id;</span><br></pre></td></tr></table></figure><p>结论：如果有n个表进行多表的的查询，则至少需要n-1个连接条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp.`employee_id`,emp.`last_name`,dep.`department_name`,loc.`city`</span><br><span class="line"><span class="keyword">FROM</span> employees emp,departments dep,locations loc</span><br><span class="line"><span class="keyword">WHERE</span> emp.`department_id` <span class="operator">=</span> dep.`department_id` </span><br><span class="line"><span class="keyword">AND</span> dep.`location_id` <span class="operator">=</span> loc.`location_id`;</span><br></pre></td></tr></table></figure><h3 id="多表查询的分类"><a href="#多表查询的分类" class="headerlink" title="多表查询的分类"></a>多表查询的分类</h3><h4 id="等值连接-与-非等值连接"><a href="#等值连接-与-非等值连接" class="headerlink" title="等值连接  与  非等值连接"></a>等值连接  与  非等值连接</h4><p>等值连接：连接条件使用等于&#x3D; 的连接</p><p>非等值连接：连接条件不使用等于&#x3D; 的连接，包括!&#x3D;!、&gt;、&lt;等</p><h4 id="自连接-与-非自连接"><a href="#自连接-与-非自连接" class="headerlink" title="自连接   与   非自连接"></a>自连接   与   非自连接</h4><p>自连接 ：同一张表的查询连接</p><p>非自连接：不是同一张表的查询连接</p><h4 id="内连接-与-外连接"><a href="#内连接-与-外连接" class="headerlink" title="内连接   与   外连接"></a>内连接   与   外连接</h4><ol><li>内连接：查询返回的结果集只包含符合条件的行，结果集中不包含一个表与另一个表不匹配的行</li></ol><p>​举个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#SQL92语法实现的内连接</span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line">#此时的结果为<span class="number">106</span>行，但是employees的表中有<span class="number">107</span>行</span><br><span class="line">#原因是有一行员工是没有部门的，因此不匹配导致没输出</span><br><span class="line"></span><br><span class="line">#SQL92语法实现外连接</span><br><span class="line">#<span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id(<span class="operator">+</span>);</span><br></pre></td></tr></table></figure><p>​2. 外连接：查询返回的结果集只包含符合条件的行，结果集中除了包含一个表与另一个表匹配的行以外，还包括左表 和 右表中不匹配的行</p><p>​外连接的分类：左外连接(符合匹配结果集以及左表不满足的行)</p><p>​   右外连接(符合匹配结果集以及右表不满足的行)</p><p>​   满外连接(符合匹配结果集以及左表、右表不满足的行)</p><ol start="3"><li><p>SQL92语法实现内连接：见上方例子代码</p><p>SQL92语法实现外连接：使用 + 号 ————但在MySQL中不支持此写法</p></li><li><p>SQL99语法实现多表查询：JOIN …  ON的方式——MySQL支持此写法</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#sql99语法实现内连接</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name,city</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d#此处的<span class="keyword">INNER</span>可省略</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.department_id </span><br><span class="line"><span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> d.`location_id` <span class="operator">=</span> l.`location_id`;</span><br><span class="line"></span><br><span class="line">#sql99语法实现外连接</span><br><span class="line">#左外连接</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d#此处的<span class="keyword">OUTER</span>可省略</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#右外连接</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d#此处的<span class="keyword">OUTER</span>可省略</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#满外连接<span class="comment">----MySQL不支持FULL</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d#此处的<span class="keyword">OUTER</span>可省略</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7种JOIN的方式"><a href="#7种JOIN的方式" class="headerlink" title="7种JOIN的方式"></a>7种JOIN的方式</h4><p><strong>注针对左外或者右外只取其中左表活右表的数据</strong>：</p><p>此时左外连接相当于左边数据比右边数据长，因此右边需要补一个null值，而左中图是只要左表不匹配的数据</p><p>也就是说此时类似交集部分的右表的值不是空的，因此过滤条件是只要右表为null的</p><p>右中图反着来，同个道理，在此不做说明</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#sql99语法</span><br><span class="line">#左上图 左外连接</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d#此处的<span class="keyword">OUTER</span>可省略</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#右上图 右外连接</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d#此处的<span class="keyword">OUTER</span>可省略</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#中间图  内连接</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`;</span><br><span class="line"></span><br><span class="line">#左中图</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id`<span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">#右中图</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">#左下图 满外连接</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">#右下图</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> d.`department_id`<span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id` <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/03/10/bhOmLD.png" alt="多种连接图示意"></p><h3 id="UNION关键字"><a href="#UNION关键字" class="headerlink" title="UNION关键字"></a>UNION关键字</h3><ol><li>UNION：返回两个查询结果集的并集，去除重复部分</li><li>UNION ALL ：返回两个查询结果集的并集，对于重复部分，不去除</li></ol><p>一般来说，尽量选择使用UNION ALL，相对于UNION来说UNION ALL 效率更高，因为不涉及去重</p><p>举个例子：1 ; 106 ; 16   </p><p>​UNION返回的结果是1+106+16，UNION ALL返回的结果是1+106+106+16</p><h3 id="SQL99语法新特性-了解"><a href="#SQL99语法新特性-了解" class="headerlink" title="SQL99语法新特性(了解)"></a>SQL99语法新特性(了解)</h3><ol><li><p>自然连接：NATURAL  JOIN</p><p>可以理解为SQL92语法种等值连接，一般会自动查询两张连接表的所有相同字段并给予返回字符集，但是不够灵活</p></li><li><p>USING的使用</p><p>不适用于自连接</p></li></ol><p>​可以理解为NATURAL  JOIN的改良版，可以查询返回指定的相同字段的字符集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#自然连接</span><br><span class="line"><span class="keyword">SELECT</span> e.`employee_id`,e.`last_name`,d.`department_name`</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> departments d;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">USING</span>连接</span><br><span class="line"><span class="keyword">SELECT</span> e.`employee_id`,e.`last_name`,d.`department_name`</span><br><span class="line"><span class="keyword">FROM</span> employees e  <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">USING</span> (department_id);</span><br></pre></td></tr></table></figure><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>不同的DBMS之间关于函数的定义的差异远大于同个语言种的不同版本</p><p> 内置函数  自定义函数</p><h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><p>概念：只对一行进行变换，每行只返回一个结果，且可以进行嵌套，参数可以为某一列或者一个字符串</p><h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><ol><li>基本函数-</li></ol><table><thead><tr><th align="left">ABS(x) 返回x的绝对值</th></tr></thead><tbody><tr><td align="left">SIGN(X)返回X的符号。正数返回1，负数返回-1，0返回0</td></tr><tr><td align="left">PI() 返回圆周率的值</td></tr><tr><td align="left">CEIL(x)，CEILING(x) 返回大于或等于某个值的最小整数</td></tr><tr><td align="left">FLOOR(x) 返回小于或等于某个值的最大整数</td></tr><tr><td align="left">LEAST(e1,e2,e3…) 返回列表中的最小值</td></tr><tr><td align="left">GREATEST(e1,e2,e3…) 返回列表中的最大值</td></tr><tr><td align="left">MOD(x,y) 返回X除以Y后的余数</td></tr><tr><td align="left">RAND() 返回0~1的随机值</td></tr><tr><td align="left">RAND(x) 返回0~1的随机值，其中x的值用作种子值，相同的X值会产生相同的随机 数</td></tr></tbody></table><table><thead><tr><th align="left">ROUND(x) 返回一个对x的值进行四舍五入后，最接近于X的整数</th></tr></thead><tbody><tr><td align="left">ROUND(x,y) 返回一个对x的值进行四舍五入后最接近X的值，并保留到小数点后面Y位</td></tr><tr><td align="left">TRUNCATE(x,y) 返回数字x截断为y位小数的结果</td></tr><tr><td align="left">SQRT(x) 返回x的平方根。当X的值为负数时，返回NULL</td></tr></tbody></table><ol start="2"><li>角度 与 弧度 转换</li></ol><p>​RADIANS(x) 将角度转化为弧度，其中，参数x为角度值 </p><p>​DEGREES(x) 将弧度转化为角度，其中，参数x为弧度值</p><ol start="3"><li>三角函数</li></ol><table><thead><tr><th align="left">SIN(x) 返回x的正弦值，其中，参数x为弧度值</th></tr></thead><tbody><tr><td align="left">ASIN(x) 返回x的反正弦值，即获取正弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td align="left">COS(x) 返回x的余弦值，其中，参数x为弧度值</td></tr><tr><td align="left">ACOS(x) 返回x的反余弦值，即获取余弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td align="left">TAN(x) 返回x的正切值，其中，参数x为弧度值</td></tr><tr><td align="left">ATAN(x) 返回x的反正切值，即返回正切值为x的值</td></tr><tr><td align="left">ATAN2(m,n) 返回两个参数的反正切值</td></tr><tr><td align="left">COT(x) 返回x的余切值，其中，X为弧度值</td></tr></tbody></table><ol start="4"><li>指数与对数</li></ol><table><thead><tr><th align="left">POW(x,y)，POWER(X,Y) 返回x的y次方</th></tr></thead><tbody><tr><td align="left">EXP(X) 返回e的X次方，其中e是一个常数，2.718281828459045</td></tr><tr><td align="left">LOG(X) 返回以e为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td align="left">LN(X)，LOG10(X) 返回以10为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td align="left">LOG2(X) 返回以2为底的X的对数，当X &lt;&#x3D; 0 时，返回NULL</td></tr></tbody></table><ol start="5"><li>进制转换</li></ol><table><thead><tr><th align="left">BIN(x) 返回x的二进制编码</th></tr></thead><tbody><tr><td align="left">HEX(x) 返回x的十六进制编码</td></tr><tr><td align="left">OCT(x) 返回x的八进制编码</td></tr><tr><td align="left">CONV(x,f1,f2) 返回f1进制数变成f2进制数</td></tr></tbody></table><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数-"></a>字符串函数-</h4><p><strong>注意：MySQL中，字符串的位置是从1开始的。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ASCII(S) 返回字符串S中的第一个字符的ASCII码值</span></span><br><span class="line"><span class="comment">CHAR_LENGTH(s) 返回字符串s的字符数。作用与CHARACTER_LENGTH(s)相同</span></span><br><span class="line"><span class="comment">LENGTH(s) 返回字符串s的字节数，和字符集有关</span></span><br><span class="line"><span class="comment">CONCAT(s1,s2,......,sn) 连接s1,s2,......,sn为一个字符串</span></span><br><span class="line"><span class="comment">CONCAT_WS(x,s1,s2,......,sn)同CONCAT(s1,s2,...)函数，但是每个字符串之间要加上x</span></span><br><span class="line"><span class="comment">INSERT(str, idx, len,replacestr)将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr</span></span><br><span class="line"><span class="comment">REPLACE(str, a, b) 用字符串b替换字符串str中所有出现的字符串a</span></span><br><span class="line"><span class="comment">UPPER(s) 或 UCASE(s) 将字符串s的所有字母转成大写字母</span></span><br><span class="line"><span class="comment">LOWER(s) 或LCASE(s) 将字符串s的所有字母转成小写字母</span></span><br><span class="line"><span class="comment">LEFT(str,n) 返回字符串str最左边的n个字符</span></span><br><span class="line"><span class="comment">RIGHT(str,n) 返回字符串str最右边的n个字符</span></span><br><span class="line"><span class="comment">LPAD(str, len, pad) 用字符串pad对str最左边进行填充，直到str的长度为len个字符</span></span><br><span class="line"><span class="comment">RPAD(str ,len, pad) 用字符串pad对str最右边进行填充，直到str的长度为len个字符</span></span><br><span class="line"><span class="comment">LTRIM(s) 去掉字符串s左侧的空格</span></span><br><span class="line"><span class="comment">RTRIM(s) 去掉字符串s右侧的空格</span></span><br><span class="line"><span class="comment">TRIM(s) 去掉字符串s开始与结尾的空格</span></span><br><span class="line"><span class="comment">TRIM(s1 FROM s) 去掉字符串s开始与结尾的s1</span></span><br><span class="line"><span class="comment">TRIM(LEADING s1 FROM s)去掉字符串s开始处的s1</span></span><br><span class="line"><span class="comment">TRIM(TRAILING s1 FROM s)去掉字符串s结尾处的s1</span></span><br><span class="line"><span class="comment">REPEAT(str, n) 返回str重复n次的结果</span></span><br><span class="line"><span class="comment">SPACE(n) 返回n个空格</span></span><br><span class="line"><span class="comment">STRCMP(s1,s2) 比较字符串s1,s2的ASCII码值的大小</span></span><br><span class="line"><span class="comment">SUBSTR(s,index,len)返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同</span></span><br><span class="line"><span class="comment">LOCATE(substr,str)返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substrIN str)、INSTR(str,substr)相同。未找到，返回0</span></span><br><span class="line"><span class="comment">ELT(m,s1,s2,…,sn)返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn</span></span><br><span class="line"><span class="comment">FIELD(s,s1,s2,…,sn) 返回字符串s在字符串列表中第一次出现的位置</span></span><br><span class="line"><span class="comment">FIND_IN_SET(s1,s2)返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串</span></span><br><span class="line"><span class="comment">REVERSE(s) 返回s反转后的字符串</span></span><br><span class="line"><span class="comment">NULLIF(value1,value2)比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h4><ol><li>获取日期、时间-</li></ol><table><thead><tr><th align="left">CURDATE() ，CURRENT_DATE() 返回当前日期，只包含年、 月、日</th></tr></thead><tbody><tr><td align="left">CURTIME() ， CURRENT_TIME() 返回当前时间，只包含时、 分、秒</td></tr><tr><td align="left">NOW() &#x2F; SYSDATE() &#x2F; CURRENT_TIMESTAMP() &#x2F; LOCALTIME() &#x2F; LOCALTIMESTAMP() 返回当前系统日期和时间</td></tr></tbody></table><ol start="2"><li>日期与时间戳的转换-</li></ol><table><thead><tr><th align="left">UNIX_TIMESTAMP() 以UNIX时间戳的形式返回当前时间。SELECT UNIX_TIMESTAMP() - &gt;1634348884</th></tr></thead><tbody><tr><td align="left">UNIX_TIMESTAMP(date) 将时间date以UNIX时间戳的形式返回。</td></tr><tr><td align="left">FROM_UNIXTIME(timestamp) 将UNIX<strong>时间戳的时间转换为普通格式的时间</strong></td></tr></tbody></table><ol start="3"><li>获取月份、星期、星期天、天数等函数</li></ol><table><thead><tr><th align="left">YEAR(date) &#x2F; MONTH(date) &#x2F; DAY(date) 返回具体的日期值</th></tr></thead><tbody><tr><td align="left">HOUR(time) &#x2F; MINUTE(time) &#x2F; SECOND(time) 返回具体的时间值</td></tr><tr><td align="left">MONTHNAME(date) 返回月份：January，…</td></tr><tr><td align="left">DAYNAME(date) 返回星期几：MONDAY，TUESDAY…..SUNDAY</td></tr><tr><td align="left">WEEKDAY(date) 返回周几，注意，周1是0，周2是1，。。。周日是6</td></tr><tr><td align="left">QUARTER(date) 返回日期对应的季度，范围为1～4</td></tr><tr><td align="left">WEEK(date) ， WEEKOFYEAR(date) 返回一年中的第几周</td></tr><tr><td align="left">DAYOFYEAR(date) 返回日期是一年中的第几天</td></tr><tr><td align="left">DAYOFMONTH(date) 返回日期位于所在月份的第几天</td></tr><tr><td align="left">DAYOFWEEK(date) 返回周几，注意：周日是1，周一是2，。。。周六是7</td></tr></tbody></table><ol start="4"><li>日期的操作函数</li></ol><table><thead><tr><th align="left">EXTRACT(type FROM date) 返回指定日期中特定的部分，type指定返回的值</th></tr></thead></table><p><img src="https://s1.ax1x.com/2022/03/10/bhOvtA.png" alt="type的取值含义"></p><ol start="5"><li>时间和秒钟转换的函数</li></ol><table><thead><tr><th align="left">TIME_TO_SEC(time) 将 time 转化为秒并返回结果值。转化的公式为： 小时*3600+分钟 *60+秒</th></tr></thead><tbody><tr><td align="left">SEC_TO_TIME(seconds) 将 seconds 描述转化为包含小时、分钟和秒的时间</td></tr></tbody></table><ol start="6"><li>日期和时间函数的计算-</li></ol><table><thead><tr><th align="left">DATE_ADD(datetime, INTERVAL expr type)， ADDDATE(date,INTERVAL expr type) 返回与给定日期时间相差INTERVAL时 间段的日期时间</th></tr></thead><tbody><tr><td align="left">DATE_SUB(date,INTERVAL expr type)， SUBDATE(date,INTERVAL expr type) 返回与date相差INTERVAL时间间隔的 日期</td></tr></tbody></table><p><img src="https://s1.ax1x.com/2022/03/10/bhXk7Q.png" alt="type的取值含义"></p><p><img src="https://s1.ax1x.com/2022/03/10/bhXKXT.png" alt="另一部分的函数"></p><ol start="7"><li>日期的格式化与解析-</li></ol><table><thead><tr><th align="left">DATE_FORMAT(date,fmt) 按照字符串fmt格式化日期date值</th></tr></thead><tbody><tr><td align="left">TIME_FORMAT(time,fmt) 按照字符串fmt格式化时间time值</td></tr><tr><td align="left">GET_FORMAT(date_type,format_type) 返回日期字符串的显示格式</td></tr><tr><td align="left">STR_TO_DATE(str, fmt) 按照字符串fmt对str进行解析，解析为一个日期</td></tr></tbody></table><p><img src="https://s1.ax1x.com/2022/03/10/bhXajK.png" alt="fmt参数常用的格式符"></p><p><img src="C:\Users\hcxs1986\AppData\Roaming\Typora\typora-user-images\image-20220302180942261.png" alt="GET_FORMAT函数中date_type和format_type参数取值"></p><p><img src="https://s1.ax1x.com/2022/03/10/bhXsNd.png" alt="GET_FORMAT函数中date_type和format_type参数取值"></p><h4 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h4><p> 流程处理函数可以根据不同的条件，执行不同的处理流程</p><p>当条件是有范围的，考虑使用case  WHEN</p><p>当条件是具体的某个字段，考虑使用case- expr WHEN</p><table><thead><tr><th align="left">IF(value,value1,value2) 如果value的值为TRUE，返回value1， 否则返回value2</th></tr></thead><tbody><tr><td align="left">IFNULL(value1, value2) 如果value1不为NULL，返回value1，否 则返回value2</td></tr><tr><td align="left">CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 …. [ELSE resultn] END 相当于Java的if…else if…else…</td></tr><tr><td align="left">CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 …. [ELSE 值n] END 相当于Java的switch…case…</td></tr></tbody></table><hr><h3 id="加密与解密函数"><a href="#加密与解密函数" class="headerlink" title="加密与解密函数"></a>加密与解密函数</h3><p>(了解)</p><p>password(str)、encode()、decode()在MySQL8.0中被弃用</p><p><img src="https://s1.ax1x.com/2022/03/10/bhXRjf.png" alt="加密与解密函数"></p><h3 id="MySQL信息函数"><a href="#MySQL信息函数" class="headerlink" title="MySQL信息函数"></a>MySQL信息函数</h3><p>(了解)</p><table><thead><tr><th align="left">VERSION() 返回当前MySQL的版本号</th></tr></thead><tbody><tr><td align="left">CONNECTION_ID()   返回当前MySQL服务器的连接数</td></tr><tr><td align="left">DATABASE()，SCHEMA()   返回MySQL命令行当前所在的数据库</td></tr><tr><td align="left">USER()，CURRENT_USER()、SYSTEM_USER()， SESSION_USER()   返回当前连接MySQL的用户名，返回结果格式为 “主机名@用户名</td></tr><tr><td align="left">CHARSET(value)   返回字符串value自变量的字符集</td></tr><tr><td align="left">COLLATION(value)   返回字符串value的比较规则</td></tr></tbody></table><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><p>(了解)</p><p>对于FORMAT(value,n)的函数：如果n的值小于或者等于0，则只保留整数部分</p><table><thead><tr><th align="left">FORMAT(value,n) 返回对数字value进行格式化后的结果数据。n表示 四舍五入 后保留 到小数点后n位</th></tr></thead><tbody><tr><td align="left">CONV(value,from,to) 将value的值进行不同进制之间的转换</td></tr><tr><td align="left">INET_ATON(ipvalue) 将以点分隔的IP地址转化为一个数字</td></tr><tr><td align="left">INET_NTOA(value) 将数字形式的IP地址转化为以点分隔的IP地址</td></tr><tr><td align="left">BENCHMARK(n,expr) 将表达式expr重复执行n次。用于测试MySQL处理expr表达式所耗费 的时间</td></tr><tr><td align="left">CONVERT(value USING char_code) 将value所使用的字符编码修改为char_code</td></tr></tbody></table><h3 id="多行函数-聚合函数"><a href="#多行函数-聚合函数" class="headerlink" title="多行函数(聚合函数)"></a>多行函数(聚合函数)</h3><p>聚合函数作用于一组数据，并对一组数据最终只会返回一个值</p><ol><li>常见的聚合函数</li></ol><ul><li>AVG &#x2F; SUM（只适用于数值类型的字段或变量）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary),<span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ul><li>MAX &#x2F; MIN（适用于数值类型、字符串类型、日期时间类型的字段或变量）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#MAX <span class="operator">/</span> MIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(last_name),<span class="built_in">MIN</span>(last_name)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(hire_date),<span class="built_in">MIN</span>(hire_date)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><ul><li><p>COUNT</p><p>作用：计算指定字段在查询结构中出现的个数，不包含null</p></li></ul><p>​       计算表中有多少条数据的方式  公式AVG &#x3D; SUM &#x2F; COUNT</p><p>​①COUNT(*)</p><p>​②COUNT(1)；相当于每遍历一行就标记一个1，最终统计标记了多少个1，内部填2也是同个结果</p><p>​③COUNT(具体字段)；不一定完全正确，count统计的只是不为null的行，有些字段中数据为null，count不统计在内</p><p>补充：在统计表中的记录数方面</p><p>​如果使用的是MyISAM 存储引擎，这三个的效率都是相同的，都是O(1)</p><p>​但如果使用的是InnoDB 存储引擎，则效率就不同：COUNT(*) &#x3D; COUNT(1) &gt; COUNT(具体字段)</p><ol start="2"><li>GROUP BY的使用</li></ol><p><strong>①在SELECT中出现的非组函数的字段必须声明在GROUP BY中，而在GROUP BY中声明的字段则不一定需要出现在SELECT中</strong></p><p><strong>②GROUP BY 声明在FROM 和 WHERE后面，ORDER BY 和 LIMIT 的前面</strong></p><p>③(了解)MySQL中GROUP BY中使用 WITH ROLLUP  </p><p>​在使用ROLLUP  后，不能同时使用ORDER BY 关键字进行排序，ROLLUP 和 ORDER BY 是相互排斥的，造成报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#查询各个department_id,job_id的平均工资</span><br><span class="line">#方式一:</span><br><span class="line">#非组函数的字段：department_id,job_id  组函数字段：salary</span><br><span class="line"><span class="keyword">SELECT</span> department_id,job_id,<span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  department_id,job_id;</span><br><span class="line">#两种方式的结果都是相同，只是分组的先后顺序有所变化</span><br><span class="line">#方式二：</span><br><span class="line"><span class="keyword">SELECT</span> job_id,department_id,<span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  job_id,department_id;</span><br></pre></td></tr></table></figure><ol start="3"><li>Having的使用</li></ol><p>​作用：用来过滤数据</p><p>​<strong>①如果过滤条件使用了聚合函数，则必须使用HAVING来替代WHERE，否则，报错</strong></p><p>​    <strong>②HAVING必须声明在 GROUP BY 的后面</strong></p><p>​补充：一般在MySQL中使用HAVING 的前提是已经 使用了 GROUP BY ，</p><p>​否则 意义不大，GROUP BY的结果是多条的，HAVING 起过滤作用，少了GROUP BY结果只有一条也就没必要进行过滤了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">Having</span>的使用</span><br><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary) <span class="operator">&gt;</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">#查询部门id为<span class="number">10</span>，<span class="number">20</span>，<span class="number">30</span>，<span class="number">40</span>这<span class="number">4</span>个部门中最高工资比<span class="number">10000</span>高的部门信息</span><br><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">MAX</span>(salary) max_salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">#<span class="keyword">where</span> department_id <span class="keyword">in</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> max_salary <span class="operator">&gt;</span> <span class="number">10000</span> <span class="keyword">AND</span> department_id <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><p>​针对代码块内的查询练习：<strong>当过滤条件中有聚合函数时，则此过滤条件必须声明在HAVING中</strong></p><p>​      <strong>当过滤条件中没有聚合函数时，过滤条件声明在哪都可以，但声明在WHERE中为好，其效率较高</strong></p><p>HAVING 与 WHERE 的比较</p><p>①在适用范围上，Having的适用范围上更广</p><p>②在过滤条件没有聚合函数，此时where的效率要更高</p><p>​where先连接后筛选，数据更小；havaing则是先筛选后连接</p><ol start="4"><li>SQL底层执行原理</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SQL语句的完整结构</span></span><br><span class="line"><span class="comment">SQL92语法</span></span><br><span class="line"><span class="comment">SELECT ...,...,..(存在聚合函数)</span></span><br><span class="line"><span class="comment">FROM ...,...</span></span><br><span class="line"><span class="comment">WHERE 多表的连接条件 AND 不包含聚合函数的过滤条件</span></span><br><span class="line"><span class="comment">GROUP BY ...,...</span></span><br><span class="line"><span class="comment">HAVING 包含聚合函数的过滤条件</span></span><br><span class="line"><span class="comment">ORDER BY ...,...(DESC,ASC)</span></span><br><span class="line"><span class="comment">LIMIT ....</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">SQL99语法</span></span><br><span class="line"><span class="comment">#在SELECT中，除了GROUP BY 和 LIMIT 之外，其他位置都可以声明子查询！</span></span><br><span class="line"><span class="comment">SELECT ...,...,..(存在聚合函数)</span></span><br><span class="line"><span class="comment">FROM ...,...(LEFT / RIGHT) JOIN ...,ON  多表的连接条件</span></span><br><span class="line"><span class="comment">...(LEFT / RIGHT) JOIN ...,ON  多表的连接条件</span></span><br><span class="line"><span class="comment">WHERE 不包含聚合函数的过滤条件</span></span><br><span class="line"><span class="comment">GROUP BY ...,...</span></span><br><span class="line"><span class="comment">HAVING 包含聚合函数的过滤条件</span></span><br><span class="line"><span class="comment">ORDER BY ...,...(DESC,ASC)</span></span><br><span class="line"><span class="comment">LIMIT ....</span></span><br></pre></td></tr></table></figure><ul><li><p>SQL语句执行的先后顺序</p><p>FROM … , …–&gt; ON  –&gt;(LEFT &#x2F; RIGHT)   JOIN  … –&gt;  WHERE   –&gt;  GROUP BY–&gt; HAVING –&gt;SELECT   –&gt;  DISTINCT   –&gt;  ORDER BY   –&gt;  LIMIT</p></li></ul><hr><h2 id="不相关子查询"><a href="#不相关子查询" class="headerlink" title="不相关子查询"></a>不相关子查询</h2><p>分为：外查询(主查询)  内查询(子查询)</p><p>注意事项：</p><ul><li><strong>子查询要包括在括号内</strong></li><li><strong>一般将子查询放在比较条件右侧，可读性更好</strong></li><li><strong>单行操作符对于单行子查询，多行操作符对应多行子查询</strong></li></ul><ol><li><p>子查询的分类</p><p>①从内查询的返回的结果的条目数</p><p>  单行子查询  和  多行子查询</p><p>②内查询是否被执行多次</p><p> 相关子查询 和 不相关子查询</p><p>可以理解为不相关子查询返回的结果类型是固定，而相关子查询还要根据主查询的数据进行一定的判断，从而造成被执行多次</p></li></ol><h3 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h3><p>单行比较操作符：比较特殊的一个    &lt;&gt;  此操作符是不等于</p><p>①单行子查询中的空值问题：<strong>子查询如果返回null(子查询不返回任何行)，即找不到，而主查询就会出现字段空白的情况</strong></p><p>②非法使用子查询：子查询中返回了多行数据，但主查询使用了单行比较符</p><h3 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h3><p>多行比较操作符</p><table><thead><tr><th>IN 等于列表中的任意一个</th></tr></thead><tbody><tr><td>ANY 需要和单行比较操作符一起使用，和子查询返回的某一个值比较</td></tr><tr><td>ALL 需要和单行比较操作符一起使用，和子查询返回的所有值比较</td></tr><tr><td>SOME 实际上是ANY的别名，作用相同，一般常使用ANY</td></tr></tbody></table><p><strong>在使用IN 或者 NOT IN 的位置通常可以考虑使用EXISTS 与 NOT EXISTS 代替</strong></p><p>①多行子查询中的空值问题：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#空值问题</span><br><span class="line">#<span class="keyword">Not</span> <span class="keyword">in</span> 实际上就是 <span class="operator">&lt;&gt;</span><span class="keyword">ALL</span> 而用大于或小于来比较<span class="keyword">Null</span>值的话，都返回<span class="keyword">null</span>的。(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>子查询嵌套例题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">10.</span>查询平均工资最高的 job 信息</span><br><span class="line">#方法一</span><br><span class="line">#①查询各个job_id的平均工资</span><br><span class="line">#②将结果集中的  <span class="built_in">AVG</span>(salary 当成一个字段并构建新的表, 并查出avg_sal字段中的最大值</span><br><span class="line">#③查询employees表中的各个job_id的平均工资等于此最大值，并返回此部门的job_id</span><br><span class="line">#④根据此job_id去 jobs 里面对比两表相同的 job_id 返回此部门信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(avg_sal)</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_sal</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line">     ) t_avg</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#方式二</span><br><span class="line">#job_id的平均工资<span class="operator">&lt;=</span> <span class="keyword">ALL</span>，即为部门的平均工资等于所有部门的平均工资的最小值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&gt;=</span> <span class="keyword">ALL</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#方式三 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) avg_ssal</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id </span><br><span class="line">#利用排序显示最高的第一行数据，</span><br><span class="line">#用这个数据去跟<span class="built_in">AVG</span>(salary)比较，得到job_id</span><br><span class="line">#再根据job_id去jobs表中筛出数据 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_ssal <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">0</span>,<span class="number">1</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#方式四 </span><br><span class="line"><span class="keyword">SELECT</span> j.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> jobs j,#将下方的排序后得到的唯独的一行数据当成一张表，</span><br><span class="line">    #再根据jobs和此表的job_id比较得到数据</span><br><span class="line">   (<span class="keyword">SELECT</span> job_id,<span class="built_in">AVG</span>(salary) avg_ssal </span><br><span class="line">   <span class="keyword">FROM</span> employees </span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id </span><br><span class="line">   <span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_ssal <span class="keyword">DESC</span></span><br><span class="line">   LIMIT <span class="number">0</span>,<span class="number">1</span> ) t_jobs </span><br><span class="line">  </span><br><span class="line"><span class="keyword">WHERE</span> j.job_id <span class="operator">=</span> t_jobs.job_id;</span><br></pre></td></tr></table></figure><hr><h2 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h2><p>在SELECT中，除了GROUP BY 和 LIMIT 之外，其他位置都可以声明子查询！</p><h3 id="EXISTS-与-NOT-EXISTS关键字"><a href="#EXISTS-与-NOT-EXISTS关键字" class="headerlink" title="EXISTS 与 NOT EXISTS关键字"></a>EXISTS 与 NOT EXISTS关键字</h3><p><strong>EXISTS 子查询 找到的提交&#x2F;NOT EXISTS 子查询中 找不到的提交</strong></p><p>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。 </p><p>如果在子查询中不存在满足条件的行:</p><ul><li>条件返回 FALSE 继续在子查询中查找</li></ul><p>如果在子查询中存在满足条件的行 :</p><ul><li><p>不在子查询中继续查找 条件返回 TRUE </p><p><strong>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</strong></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#使用<span class="keyword">IN</span></span><br><span class="line">#从employees表中找到管理者的id，再根据此id在主查询中逐个遍历，相同即为管理者</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,salary,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#使用<span class="keyword">EXISTS</span></span><br><span class="line">#从employees表中取出一条数据</span><br><span class="line">#判断此数据的employee_id 和 e1表中的manager_id是否一样</span><br><span class="line">#一样即为管理者，输出此行</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,salary,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line"><span class="keyword">SELECT</span> manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">WHERE</span> e.`employee_id` <span class="operator">=</span> e1.`manager_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h2 id="创建和管理"><a href="#创建和管理" class="headerlink" title="创建和管理"></a>创建和管理</h2><p><strong>从系统架构的层次上看，MySQL 数据库系统从大到小依次是 数据库服务器 、 数据库 、 数据表 、数据表的 行与列 。</strong></p><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><ul><li><p>数据库名、表名不得超过30个字符，变量名限制为29个 </p></li><li><p>必须只能包含 A–Z, a–z, 0–9, _共63个字符 数据库名、表名、字段名等对象名中间不要包含空格 </p></li><li><p>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；</p></li><li><p>同一个表中，字段不能重名 必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使 用&#96;（着重号）引起来 </p></li><li><p>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据 类型在一个表里是整数，那在另一个表里可就别变成字符型了</p></li></ul><h3 id="数据库-的创建与管理"><a href="#数据库-的创建与管理" class="headerlink" title="数据库 的创建与管理"></a>数据库 的创建与管理</h3><ol><li>创建数据库的方式</li></ol><ul><li><p>方式一 ：使用默认字符集创建<br>CREATE DATABASE  数据库名</p></li><li><p>方式二 ：显式指明创建数据库所用的字符集</p><p>CREATE DATABASE  数据库名  CHARACTER SET ‘GBK’</p></li><li><p>方式三 ：如果创建的数据库已经存在，则创建失败，但不报错 （推荐方式）</p><p>CREATE DATABASE IF NOT EXISTS 数据库名 CHARACTER SET ‘GBK’</p></li></ul><ol start="2"><li>数据库的管理</li></ol><p>​查看当前连接中所有的数据库：show database</p><p>​指定使用某个数据库：use database</p><p>​查看当前连接数据库的表：show tables</p><p>​查看当前使用的数据库：select database() from dual</p><p>​查看指定数据下的表：show tables from 数据库名</p><p>​查看已创建的数据库结构 ：show create database 数据库名</p><p>​查看表的结构：desc 数据表名</p><ol start="3"><li>修改数据库</li></ol><p>​更改数据库的字符集：ALTER DATABASE 数据库名 CHARACTER SET 字符集; #比如：gbk、utf8等</p><ol start="4"><li><p>删除数据库</p><ul><li><p>方式一：DROP DATABASE  数据库名;</p></li><li><p>方式二：如果要删除的数据库不存在，则删除失败，但不报错 （推荐方式）</p><p>DROP DATABASE IF  EXISTS 数据库名</p></li></ul></li></ol><h3 id="数据表-的创建和管理"><a href="#数据表-的创建和管理" class="headerlink" title="数据表 的创建和管理"></a>数据表 的创建和管理</h3><ol><li><p>创建数据表的方式</p><p>①方式一：使用VARCHAR来定义字符串时，必须在使用VARCHAR时指明其长度</p><p>​如果创建表时没有使用指定的字符集，则默认使用表所在的数据库的字符集</p></li></ol> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test_tab (</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">test_name <span class="type">VARCHAR</span>(<span class="number">15</span>),#使用<span class="type">VARCHAR</span>来定义字符串时，必须在使用<span class="type">VARCHAR</span>时指明其长度</span><br><span class="line">hire_date <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#查看表的语句结构</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_tab;</span><br></pre></td></tr></table></figure><p>​②方式二：基于现有的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_table </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line">#查询语句中字段的别名可以作为新创建的表的字段名称</span><br><span class="line">#通过<span class="keyword">select</span>查询语句将此结果集作为新建表的内容</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_t</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id id,e.last_name last_n,d.department_name d_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><ol start="2"><li>修改数据表  ALTER TABLE</li></ol><p></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#①添加字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_tab</span><br><span class="line"><span class="keyword">ADD</span> salary <span class="keyword">DOUBLE</span>(<span class="number">10</span>,<span class="number">2</span>); #默认添加成最后的一个字段</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_tab </span><br><span class="line"><span class="keyword">ADD</span> phone_num <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">FIRST</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_tab</span><br><span class="line"><span class="keyword">ADD</span> email <span class="type">VARCHAR</span>(<span class="number">30</span>) AFTER test_name;</span><br><span class="line"></span><br><span class="line">#②修改字段：数据类型、长度等等</span><br><span class="line">#数据类型一般不做修改，因为无法保证修改后原数据的是否适用于现在的类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_tab</span><br><span class="line">MODIFY test_name <span class="type">VARCHAR</span>(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#③重命名字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_tab</span><br><span class="line">CHANGE salary month_salary <span class="keyword">DOUBLE</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_tab</span><br><span class="line">CHANGE email my_email <span class="type">VARCHAR</span>(<span class="number">25</span>); #在重命名字段的同时还能够更改长度</span><br><span class="line"></span><br><span class="line">#④删除字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_tab</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> my_email;#删除的是某一列</span><br></pre></td></tr></table></figure><ol start="3"><li>重命名数据表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#方式一(推荐使用)</span><br><span class="line">RENAME <span class="keyword">TABLE</span> test_tab</span><br><span class="line"><span class="keyword">TO</span> test_table;</span><br><span class="line"></span><br><span class="line">#方式二</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_tab</span><br><span class="line">RENAME <span class="keyword">TO</span> test_t;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>删除数据表</p><p><strong>将表的结构和表的数据一起删除，释放表的空间</strong></p><p><strong>DROP TABLE IF EXISTS test_t;</strong></p></li><li><p>清空数据表</p><p><strong>清空表中的所有数据，但表的结构还保留</strong></p><p><strong>TRUNCATE TABLE employees_copy;</strong></p></li></ol><hr><h2 id="DCL、DDL、DML"><a href="#DCL、DDL、DML" class="headerlink" title="DCL、DDL、DML"></a>DCL、DDL、DML</h2><h3 id="DCL中的-commit-和-rollback"><a href="#DCL中的-commit-和-rollback" class="headerlink" title="DCL中的 commit 和 rollback"></a>DCL中的 commit 和 rollback</h3><p>commit：提交数据。（数据保存在数据库中，数据不支持回滚）</p><p>rollback：回滚数据。（执行此关键字实现数据的回滚，回滚到最近的一次COMMIT之后）</p><h3 id="TRUNCATE-TABLE-与-DELETE-FROM"><a href="#TRUNCATE-TABLE-与-DELETE-FROM" class="headerlink" title="TRUNCATE TABLE 与 DELETE FROM"></a>TRUNCATE TABLE 与 DELETE FROM</h3><p>TRUNCATE TABLE：执行此操作，会将表的数据全部清除，且数据是不支持回滚的</p><p>DELETE FROM ：执行此操作，表数据也会全部清除，但可以选择性的清除部分数据。且其数据是可以实现回滚的</p><p>补：TRUNCATE TABLE要比DELETE FROM要快，因其不需要考虑数据备份的问题，所以使用的系统和事务日志资源少，</p><p>​但也正是如此，使用TRUNCATE有可能造成事故，如一小心误删核心数据而无法恢复，DELETE 则可以避免这个问题</p><h3 id="DDL-与-DML"><a href="#DDL-与-DML" class="headerlink" title="DDL 与 DML"></a>DDL 与 DML</h3><p>以DDL 与 DML为首执行的区别</p><p>①DDL的操作一旦执行，就不可以回滚。且指令SET autocommit &#x3D; FALSE 对DDL的操作无效</p><p>​在每次DDL执行完成之后都会自动执行一次COMMIT，且此COMMIT是不受上述指令的影响</p><p>②DML的操作在默认情况下，一旦执行也是不可回滚的，</p><p>​但如果在执行之前，曾执行过  <strong>指令SET autocommit &#x3D; FALSE ，则此时的操作是可回滚的</strong></p><hr><h2 id="DML的增删改"><a href="#DML的增删改" class="headerlink" title="DML的增删改"></a>DML的增删改</h2><p>无论是添加、更新、删除的操作都有可能会因为约束的作用导致操作失败</p><p>DML默认情况下，执行完以后都会commit自动提交数据，</p><p>如果不希望其自动提交数据需要使用 指令 SET autocommit &#x3D; FALSE。</p><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><ul><li>方式一：一条一条的添加数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#单条逐个添加</span><br><span class="line">#方式一 没有指明要添加的字段</span><br><span class="line">#此方式添加数据需要按照声明字段的先后顺序添加</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> the_table</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="string">&#x27;2012-12-21&#x27;</span>,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">#方式二 指明要添加的字段(推荐)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> the_table(id,hire_date,salary,the_name)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;2012-12-21&#x27;</span>,<span class="number">2000</span>,<span class="string">&#x27;merry&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#没有进行赋值的salary的值为<span class="keyword">null</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> the_table(id,hire_date,the_name)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">&#x27;2012-12-21&#x27;</span>,<span class="string">&#x27;merry&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#方式三 推荐</span><br><span class="line">#同时插入多条数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> the_table(id,the_name,salary)</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">2000</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">6000</span>);</span><br></pre></td></tr></table></figure><ul><li>方式二：将查询结果插入表中</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> the_table(id,the_name,salary,hire_date)</span><br><span class="line">#一个查询语句</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary,hire_date#此处的字段要和添加到上表的字段相互对应</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IN</span> (<span class="number">60</span>,<span class="number">70</span>);</span><br></pre></td></tr></table></figure><p>补充说明：the_table表中要添加数据的字段的长度不能小于employees表中查询的字段长度，否则有添加失败的可能</p><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>使用的格式：UPDATE … SET … WHERE </p><p>在where 添加条件 可以实现批量修改的功能 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#将表中id为<span class="number">5</span>的hire_date设为当前系统时间</span><br><span class="line"><span class="keyword">UPDATE</span> the_table</span><br><span class="line"><span class="keyword">SET</span> hire_date <span class="operator">=</span> SYSDATE()</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>使用的格式：DELETE  FROM … WHERE </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> the_table</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="MySQL8-新特性：计算列"><a href="#MySQL8-新特性：计算列" class="headerlink" title="MySQL8 新特性：计算列"></a>MySQL8 新特性：计算列</h3><p>计算列：某一列的值是通过别的列计算得来的</p><p>例如：a列值为1，b列值为2，c列的值定义为 a+b ，则c列称为计算列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test1(</span><br><span class="line">a <span class="type">INT</span>,</span><br><span class="line">b <span class="type">INT</span>,</span><br><span class="line">c <span class="type">INT</span> GENERATED ALWAYS <span class="keyword">AS</span> (a <span class="operator">+</span> b) VIRTUAL # c即为计算列</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h2 id="MySQL的数据类型"><a href="#MySQL的数据类型" class="headerlink" title="MySQL的数据类型"></a>MySQL的数据类型</h2><p><strong>写在前头，一般在定义数据类型，确定是整数，使用INT；确定是小数，使用DECIMAY(M精度,D标度)；确定是日期和时间，使用DATETIME；</strong></p><p>虽然存储空间占用变大了，但是数据的安全和可靠性得到了一定的保证</p><h3 id="整数类型-整形"><a href="#整数类型-整形" class="headerlink" title="整数类型(整形)"></a>整数类型(整形)</h3><p><strong>整数类型一共有 5 种，包括 TINYINT、SMALLINT、MEDIUMINT、INT（INTEGER）和 BIGINT</strong></p><table><thead><tr><th align="center">整数类型</th><th align="center">字节</th><th align="center">有符号数取值范围</th><th align="center">无符号数取值范围</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">1</td><td align="center">-128~127</td><td align="center">0~255</td></tr><tr><td align="center">SMALLINT</td><td align="center">2</td><td align="center">-32768~32767</td><td align="center">0~65535</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">3</td><td align="center">-8388608~8388607</td><td align="center">0~16777215</td></tr><tr><td align="center">INT、INTEGER</td><td align="center">4</td><td align="center">-2147483648~2147483647</td><td align="center">0~4294967295</td></tr><tr><td align="center">BIGINT</td><td align="center">8</td><td align="center">-9223372036854775808~9223372036854775807</td><td align="center">0~18446744073709551615</td></tr></tbody></table><p>在mysql 5.7中 desc table 所显示的字段类型后面括号内的数实际上是 数据的显示宽度，但在MySQL 8.0中已经不考虑使用。</p><p>ZEROFILL：当insert的值不足5位时，使用0填充 ②当使用ZEROFILL，自动添加UNSIGNED</p><p>UNSIGNED : 无符号类型（非负），默认是正数。int类型默认显示宽度为int(11)，无符号int类型默认显示宽度为int(10)。</p><p><img src="https://s1.ax1x.com/2022/03/10/bhXLvV.png" alt="SQLyog的运行结果"></p><ul><li>mysql 5.7的演示</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_int1(</span><br><span class="line">i1 <span class="type">INT</span>,</span><br><span class="line">i2 <span class="type">INT</span>(<span class="number">5</span>),</span><br><span class="line">i3 <span class="type">INT</span>(<span class="number">5</span>) ZEROFILL  #①显示宽度为<span class="number">5</span>。当<span class="keyword">insert</span>的值不足<span class="number">5</span>位时，使用<span class="number">0</span>填充 ②当使用ZEROFILL，自动添加UNSIGNED</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_int1(i3)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">123</span>),(<span class="number">123456</span>);#数据的显示情况 <span class="number">123</span> <span class="comment">--&gt; 00123,123456--&gt;123456</span></span><br></pre></td></tr></table></figure><p>TINYINT ：一般用于枚举数据，比如系统设定取值范围很小且固定的场景。</p><p> SMALLINT ：可以用于较小范围的统计数据，比如统计工厂的固定资产库存数量等。 </p><p>MEDIUMINT ：用于较大整数的计算，比如车站每日的客流量等。</p><p>INT、INTEGER ：取值范围足够大，一般情况下不用考虑超限问题，用得最多。比如商品编号。 </p><p>BIGINT ：只有当你处理特别巨大的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证 券公司衍生产品持仓等。</p><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>浮点数和定点数类型的特点是可以 处理小数 </p><p><strong>MySQL支持的浮点数类型，分别是 FLOAT、DOUBLE、REAL。</strong></p><p>float表示单精度浮点数，double表示双精度浮点数，read默认是double，除非使用“ REAL_AS_FLOAT ”将read改为默认float</p><p><img src="https://s1.ax1x.com/2022/03/10/bhjp59.png" alt="浮点类型"></p><p>MySQL 存储浮点数的格式为： 符号(S) 、 尾数(M) 和 阶码(E) 。</p><p>因此，无论有没有符号，MySQL 的浮点数都会存储表示符号的部分。</p><p><strong>浮点数的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</strong></p><p>在MySQL 8.0中明确不推荐使用：MySQL允许使用 非标准语法 （不推荐使用，数据迁移也许存在问题）</p><p>格式：FLOAT(M,D) 或 DOUBLE(M,D) 。</p><p>这里，M称为 精度 ，D称为 标度 。(M,D)中 M&#x3D;整数位+小数 位，D&#x3D;小数位。 D&lt;&#x3D;M&lt;&#x3D;255，0&lt;&#x3D;D&lt;&#x3D;30。 </p><p>例如，定义为FLOAT(5,2)的一个列可以显示为-999.99-999.99。如果超过这个范围会报错。</p><p><strong>补充：浮点数是存在精度损失的，因此浮点数是不准确的，所以我们要避免使用“&#x3D;”来 判断两个数是否相等。</strong></p><h3 id="定点数类型"><a href="#定点数类型" class="headerlink" title="定点数类型"></a>定点数类型</h3><ul><li><p>MySQL中的定点数类型只有 DECIMAL 一种类型。</p></li><li><p>DECIMAL(M,D)的最大取值范围与DOUBLE类型一样，但是有效的数据范围是由M和D决定的。</p></li><li><p><strong>定点数在MySQL内部是以 字符串 的形式进行存储，因此它是精准的</strong></p></li><li><p>当DECIMAL类型不指定精度和标度时，其默认为DECIMAL(10,0)。</p><p>但是，当数据的精度超出了定点数类型的 精度范围时，则MySQL同样会进行四舍五入处理。</p></li></ul><table><thead><tr><th align="left">数据类型</th><th align="left">字节数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">DECIMAL(M,D),DEC,NUMERIC</td><td align="left">M+2字节</td><td align="left">有效范围由M和D决定</td></tr></tbody></table><p>浮点数 与 定点数 的区别：</p><p>①浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用 于需要取值范围大，又可以容忍微小误差的科学计算场景（比如</p><p>计算化学、分子建模、流体动 力学等） </p><p>②定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景 （比如涉 及金额计算的场景）</p><h3 id="位类型-Bit"><a href="#位类型-Bit" class="headerlink" title="位类型(Bit)"></a>位类型(Bit)</h3><ul><li><p>BIT类型中存储的是二进制值，类似010110。</p></li><li><p>BIT类型，如果没有指定(M)，默认是1位。</p><p>这个1位，表示只能存1位的二进制值。这里(M)是表示二进制的 位数，位数最小值为1，最大值为64。</p></li></ul><table><thead><tr><th align="left">二进制字符串类型</th><th align="left">长度</th><th align="left">长度范围</th><th align="left">占用空间</th></tr></thead><tbody><tr><td align="left">BIT(M)</td><td align="left">M</td><td align="left">1 &lt;&#x3D; M &lt;&#x3D; 64</td><td align="left">约为(M + 7)&#x2F;8个字节</td></tr></tbody></table><ul><li>注意：在向BIT类型的字段中插入数据时，一定要确保插入的数据在BIT类型支持的范围内。</li><li>使用b+0查询数据时，可以直接查询出存储的十进制数据的值。</li></ul><hr><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><ul><li>YEAR 类型通常用来表示年 </li><li>DATE 类型通常用来表示年、月、日 </li><li>TIME 类型通常用来表示时、分、秒 </li><li>DATETIME 类型通常用来表示年、月、日、时、分、秒 </li><li>TIMESTAMP 类型通常用来表示带时区的年、月、日、时、分、秒</li></ul><p><img src="https://s1.ax1x.com/2022/03/10/bhjCCR.png" alt="相关格式"></p><h4 id="YEAR类型"><a href="#YEAR类型" class="headerlink" title="YEAR类型"></a>YEAR类型</h4><p>Year类型所占存储空间最小，只需要 1 个字节的存储空间</p><p>在MySQL中YEAR的存储格式：</p><ul><li><p><strong>以4位字符串或数字格式表示YEAR类型，其格式为YYYY，最小值为1901，最大值为2155。</strong></p></li><li><p>(从MySQL5.5.27开始，2位格式的YEAR已经不推荐使用) 以2位字符串格式表示YEAR类型，最小值为00，最大值为99。</p><p>当取值为01到69时，表示2001到2069；</p><p>当取值为70到99时，表示1970到1999；</p><p>当取值整数的0或00添加的话，那么是0000年； </p><p>当取值是日期&#x2F;字符串的’0’添加的话，是2000年。</p></li></ul><h4 id="DATE类型"><a href="#DATE类型" class="headerlink" title="DATE类型"></a>DATE类型</h4><p>DATE类型占用 3个字节 的存储空间</p><p><strong>在MySQL中DATE的存储格式： YYYY-MM-DD ，DATE类型表示日期，没有时间部分</strong></p><ul><li>使用 CURRENT_DATE() 或者 NOW() 函数，会插入当前系统的日期。</li></ul><h4 id="TIME类型"><a href="#TIME类型" class="headerlink" title="TIME类型"></a>TIME类型</h4><p>TIME类型占用 3个字节 的存储空间</p><p><strong>在MySQL中DATE的存储格式：</strong></p><ul><li><strong>‘ D HH:MM:SS’ 、’ HH:MM:SS ‘、’ HH:MM ‘、’ D HH:MM ‘、’ D HH ‘或’ SS ‘格式</strong></li></ul><p>其中D表示天，其最小值为0，最大值为34。</p><p>如果使用带有D格式的字符串 插入TIME类型的字段时，D会被转化为小时，计算格式为D*24+HH。</p><p>当使用带有冒号并且不带D的字符串 表示时间时，表示当天的时间，比如12:10表示12:10:00，而不是00:12:10。 </p><ul><li><p>(不推荐使用)可以使用不带有冒号的 字符串或者数字，格式为’ HHMMSS ‘或者 HHMMSS 。</p><p>如果插入一个不合法的字符串或者数字，MySQL在存 储数据时，会将其自动转化为00:00:00进行存储。</p><p>比如1210，MySQL会将最右边的两位解析成秒，表示 00:12:10，而不是12:10:00。 </p></li><li><p>使用 CURRENT_TIME() 或者 NOW() ，会插入当前系统的时间。</p></li></ul><h4 id="DATETIME类型"><a href="#DATETIME类型" class="headerlink" title="DATETIME类型"></a>DATETIME类型</h4><p>DATETIME类型占用 8个字节 的存储空间</p><p><strong>在MySQL中DATETIME的存储格式：</strong></p><ul><li><p><strong>YYYY-MM-DD HH:MM:SS</strong></p><p>其中YYYY表示年份，MM表示月 份，DD表示日期，HH表示小时，MM表示分钟，SS表示秒。</p></li><li><p>以 YYYY-MM-DD HH:MM:SS 格式或者 YYYYMMDDHHMMSS 格式的字符串插入DATETIME类型的字段时，</p><p>最小值为1000-01-01 00:00:00，最大值为9999-12-03 23:59:59。 </p><p><strong>隐式转换：以YYYYMMDDHHMMSS格式的数字插入DATETIME类型的字段时，会被转化为YYYY-MM-DD HH:MM:SS格式。</strong></p></li><li><p>使用 CURRENT_TIMESTAMP() 和 NOW() ，会插入系统的当前日期和 时间。</p></li></ul><h4 id="TIMESTAMP类型"><a href="#TIMESTAMP类型" class="headerlink" title="TIMESTAMP类型"></a>TIMESTAMP类型</h4><p>TIMESTAMP类型占用 4个字节 的存储空间，但取值范围比DATETIME类型要小，<strong>底层以毫秒数储存</strong></p><p><strong>在MySQL中TIMESTAMP的存储格式：</strong></p><ul><li><p><strong>YYYY-MM-DD HH:MM:SS</strong></p></li><li><p>存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时区。</p><p>因此，使用TIMESTAMP存储的同一个时间值，在不同的时区查询时会显示不同的时间。</p></li></ul><p>TIMESTAMP和DATETIME的区别： </p><p>①TIMESTAMP存储空间比较小，表示的日期时间范围也比较小 </p><p>②底层存储方式不同，TIMESTAMP底层存储的是毫秒值，距离1970-1-1 0:0:0 0毫秒的毫秒值。</p><p>③两个日期比较大小或日期计算时，TIMESTAMP更方便、更快。 </p><p>④TIMESTAMP和时区有关。TIMESTAMP会根据用户的时区不同，显示不同的结果。</p><p>⑤DATETIME则只能 反映出插入时当地的时区，其他时区的人查看数据必然会有误差的。</p><p>补充：DATETIME  和 TIMESTAMP 的使用频率分析：</p><p>用得最多的日期时间类型，就是 DATETIME 。此外，一般存注册时间、商品发布时间等，不建议使用DATETIME存储，</p><p>而是使用 时间戳 ，因为 DATETIME虽然直观，但不便于计算。</p><p>SELECT UNIX_TIMESTAMP()；获取一个时间戳</p><h3 id="文本字符串类型"><a href="#文本字符串类型" class="headerlink" title="文本字符串类型"></a>文本字符串类型</h3><p><strong>MySQL中，文本字符串总体上分为 CHAR 、 VARCHAR 、 TINYTEXT 、 TEXT 、 MEDIUMTEXT 、 LONGTEXT 、 ENUM 、 SET 等类型。</strong></p><h4 id="CHAR-、VARCHAR类型"><a href="#CHAR-、VARCHAR类型" class="headerlink" title="CHAR 、VARCHAR类型"></a>CHAR 、VARCHAR类型</h4><table><thead><tr><th align="left">字符串(文本) 类型</th><th align="left">特点</th><th align="left">长度</th><th align="left">长度范围</th><th align="left">占用的存储空间</th></tr></thead><tbody><tr><td align="left">CHAR(M)</td><td align="left">固定长度</td><td align="left">M</td><td align="left">0 &lt;&#x3D; M &lt;&#x3D; 255</td><td align="left">M个字符</td></tr><tr><td align="left">VARCHAR(M)</td><td align="left">可变长度</td><td align="left">M</td><td align="left">0 &lt;&#x3D; M &lt;&#x3D; 65535</td><td align="left">(实际长度 + 1) 个字符</td></tr></tbody></table><p><strong>CHAR类型：</strong></p><ul><li><p>CHAR(M) 类型一般需要预先定义字符串长度。如果不指定(M)，则表示长度默认是1个字符。 </p></li><li><p>如果保存时，数据的实际长度比CHAR类型声明的长度小，则会在 右侧填充 空格以达到指定的长度。</p></li></ul><p>​       当MySQL检索CHAR类型的数据时，CHAR类型的字段会去除尾部的空格。 </p><ul><li>定义CHAR类型字段时，声明的字段长度即为CHAR类型字段所占的存储空间的字节数。</li></ul><p><strong>VARCHAR类型：</strong></p><ul><li><p>VARCHAR(M) 定义时， 必须指定 长度M，否则报错。 </p></li><li><p>MySQL4.0版本以下，varchar(20)：指的是20字节，如果存放UTF8汉字时，只能存6个（每个汉字3字节） ；</p><p>MySQL5.0版本以上，varchar(20)：指的是20字符。 </p></li><li><p>检索VARCHAR类型的字段数据时，会保留数据尾部的空格。</p><p>VARCHAR类型的字段所占用的存储空间 为字符串实际长度加1个字节。</p></li></ul><p>CHAR 和 VARCHAR的区别：</p><table><thead><tr><th align="left">类型</th><th align="left">特点</th><th align="left">空间上</th><th align="left">时间上</th><th align="left">适用场景</th></tr></thead><tbody><tr><td align="left">CHAR(M)</td><td align="left">固定长度</td><td align="left">浪费存储空间</td><td align="left">效率高</td><td align="left">存储不大，速度要求高</td></tr><tr><td align="left">VARCHAR(M)</td><td align="left">可变长度</td><td align="left">节省存储空间</td><td align="left">效率低</td><td align="left">不适用于char的情况</td></tr></tbody></table><p>情况1：存储很短的信息。比如门牌号码101，201……这样很短的信息应该用char，因为varchar还要占个 byte用于存储信息长度，本来打算节约存储的，结果得</p><p>不偿失。 </p><p>情况2：固定长度的。比如使用uuid作为主键，那用char应该更合适。因为他固定长度，varchar动态根据 长度的特性就消失了，而且还要占个长度信息。 </p><p>情况3：十分频繁改变的column。因为varchar每次存储都要有额外的计算，得到长度等工作，如果一个 非常频繁改变的，那就要有很多的精力用于计算，而这些</p><p>对于char来说是不需要的。</p><h4 id="TEXT文本类型"><a href="#TEXT文本类型" class="headerlink" title="TEXT文本类型"></a>TEXT文本类型</h4><p><strong>在MySQL中，TEXT用来保存文本类型的字符串，总共包含4种类型，分别为TINYTEXT、TEXT、 MEDIUMTEXT 和 LONGTEXT 类型。</strong></p><table><thead><tr><th align="left">文本字符串类型</th><th align="left">特点</th><th align="left">长度</th><th align="left">长度范围</th><th align="left">占用的存储空间</th></tr></thead><tbody><tr><td align="left">TINYTEXT</td><td align="left">小文本、可变长度</td><td align="left">L</td><td align="left">0 &lt;&#x3D; L &lt;&#x3D; 255</td><td align="left">L + 2 个字符</td></tr><tr><td align="left">TEXT</td><td align="left">文本、可变长度</td><td align="left">L</td><td align="left">0 &lt;&#x3D; L &lt;&#x3D; 65535</td><td align="left">L + 2 个字符</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">中等文本、可变长度</td><td align="left">L</td><td align="left">中等文本、可变长度</td><td align="left">L + 3 个字符</td></tr><tr><td align="left">LONGTEXT</td><td align="left">大文本、可变长度</td><td align="left">L</td><td align="left">0 &lt;&#x3D; L&lt;&#x3D; 4294967295（相当于 4GB）</td><td align="left">L + 4 个字符</td></tr></tbody></table><ul><li>由于实际存储的长度不确定，MySQL 不允许 TEXT 类型的字段做主键。在这种情况下只能采用 CHAR(M)，或者 VARCHAR(M)。</li></ul><h4 id="ENUM枚举类型"><a href="#ENUM枚举类型" class="headerlink" title="ENUM枚举类型"></a>ENUM枚举类型</h4><p>ENUM类型也叫作枚举类型，必须从取值范围中添加的元素中多选一，不能一次选多个值。</p><table><thead><tr><th align="left">文本字符串类型</th><th align="left">长度</th><th align="left">长度范围</th><th align="left">占用的存储空间</th></tr></thead><tbody><tr><td align="left">ENUM</td><td align="left">L</td><td align="left">1 &lt;&#x3D; L &lt;&#x3D; 65535</td><td align="left">1或2个字符</td></tr></tbody></table><ul><li>当ENUM类型包含1～255个成员时，需要1个字节的存储空间； </li><li>当ENUM类型包含256～65535个成员时，需要2个字节的存储空间。 </li><li>ENUM类型的成员个数的上限为65535个。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_enum(</span><br><span class="line">season ENUM(<span class="string">&#x27;春&#x27;</span>,<span class="string">&#x27;夏&#x27;</span>,<span class="string">&#x27;秋&#x27;</span>,<span class="string">&#x27;冬&#x27;</span>,<span class="string">&#x27;unknow&#x27;</span>)</span><br><span class="line">);</span><br><span class="line">#添加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;春&#x27;</span>),(<span class="string">&#x27;秋&#x27;</span>);</span><br><span class="line"># 忽略大小写</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;UNKNOW&#x27;</span>);</span><br><span class="line"># 允许按照角标的方式获取指定索引位置的枚举值</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>),(<span class="number">3</span>);</span><br><span class="line"># Data truncated <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;season&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;ab&#x27;</span>);</span><br><span class="line"># 当ENUM类型的字段没有声明为<span class="keyword">NOT</span> <span class="keyword">NULL</span>时，插入<span class="keyword">NULL</span>也是有效的</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_enum</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><h4 id="SET类型"><a href="#SET类型" class="headerlink" title="SET类型"></a>SET类型</h4><p>可以从取值范围中添加的元素中添加多个，但取值范围中的元素越多，则占用空间越大</p><p><img src="https://s1.ax1x.com/2022/03/10/bhjlxP.png" alt="SET取值范围"></p><ul><li>插入重复的SET类型成员，MySQL会自动删除重复的成员</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_set(</span><br><span class="line">s <span class="keyword">SET</span> (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">);</span><br><span class="line">#插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_set (s) <span class="keyword">VALUES</span> (<span class="string">&#x27;A&#x27;</span>), (<span class="string">&#x27;A,B&#x27;</span>);</span><br><span class="line">#插入重复的<span class="keyword">SET</span>类型成员时，MySQL会自动删除重复的成员</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_set (s) <span class="keyword">VALUES</span> (<span class="string">&#x27;A,B,C,A&#x27;</span>);</span><br><span class="line">#向<span class="keyword">SET</span>类型的字段插入<span class="keyword">SET</span>成员中不存在的值时，MySQL会抛出错误。</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_set (s) <span class="keyword">VALUES</span> (<span class="string">&#x27;A,B,C,D&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> test_set;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> temp_mul(</span><br><span class="line">gender ENUM(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">hobby <span class="keyword">SET</span>(<span class="string">&#x27;早&#x27;</span>,<span class="string">&#x27;中&#x27;</span>,<span class="string">&#x27;晚&#x27;</span>,<span class="string">&#x27;测试&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_mul <span class="keyword">VALUES</span>(<span class="string">&#x27;早&#x27;</span>,<span class="string">&#x27;中&#x27;</span>,<span class="string">&#x27;晚&#x27;</span>); #成功</span><br></pre></td></tr></table></figure><h3 id="二进制字符串类型"><a href="#二进制字符串类型" class="headerlink" title="二进制字符串类型"></a>二进制字符串类型</h3><p>使用频率较低，了解一下</p><p>MySQL中支持的二进制字符串类型主要包括BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB类型。</p><h4 id="BINARY-、VARBINARY类型"><a href="#BINARY-、VARBINARY类型" class="headerlink" title="BINARY 、VARBINARY类型"></a>BINARY 、VARBINARY类型</h4><p><strong>BINARY和VARBINARY，只是它们存储的是二进制字符串。</strong></p><p>BINARY 、VARBINARY类型的存储类似于CHAR和VARCHAR</p><p><img src="https://s1.ax1x.com/2022/03/10/bhjYVg.png" alt="二进制字符串"></p><h4 id="BLOB类型"><a href="#BLOB类型" class="headerlink" title="BLOB类型"></a>BLOB类型</h4><p><strong>MySQL中的BLOB类型包括TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB 4种类型，</strong></p><p>它们可容纳值的最大 长度不同。可以存储一个二进制的大对象，比如 图片 、 音频 和 视频 等。</p><p><img src="https://s1.ax1x.com/2022/03/10/bhjaPs.png" alt="BLOB类型"></p><p><strong>TEXT和BLOB两者都需要注意的事项：</strong></p><p>①在针对以BLOB和TEXT类型的字段数据进行大量的删除和更新的操作之后，在数据表上会留下很多碎片，造成数据库的”空洞“，会对数据库的检索效率造成较大</p><p>的影响，可以使用指令  OPTIMIZE TABLE 解决这些空洞问题</p><p>②对数据量很大的文本字段进行模糊查询时，MySQL 提供了 前缀索引 ，但不宜不添加任何条件的情况下检索大量的数据，无目的的检索会让数据库于I&#x2F;O的交互</p><p>次数增加，反而形成负优化。</p><p>③针对上述的第一种情况，需要对数据量大的文本数据进行操作时，可以考虑将这些数据移动到另一张数据表中，主表不会因为副表的删除、更新数据的影响产生</p><p>过多的数据”空洞”，有利于优化查询速度</p><h4 id="JSON类型"><a href="#JSON类型" class="headerlink" title="JSON类型"></a>JSON类型</h4><p>JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在网络或者程序之间轻 松地传递这个字符串，并在需要的时候将它还原为各编程语言所支持的数据格式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#创建json表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_json(</span><br><span class="line">js json</span><br><span class="line">);</span><br><span class="line">#想表中插入json数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_json (js)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;&#123;&quot;name&quot;:&quot;songhk&quot;, &quot;age&quot;:18, &quot;address&quot;:&#123;&quot;province&quot;:&quot;beijing&quot;,</span></span><br><span class="line"><span class="string">&quot;city&quot;:&quot;beijing&quot;&#125;&#125;&#x27;</span>);</span><br><span class="line">#查询表中的js数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>  <span class="keyword">FROM</span> test_json;</span><br><span class="line"></span><br><span class="line">#检索json类型数据的某个具体值</span><br><span class="line"><span class="keyword">SELECT</span> js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.name&#x27;</span> <span class="keyword">AS</span> NAME,</span><br><span class="line">js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.age&#x27;</span> <span class="keyword">AS</span> age,</span><br><span class="line">js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.address.province&#x27;</span> <span class="keyword">AS</span> province,</span><br><span class="line">js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.address.city&#x27;</span> <span class="keyword">AS</span> city </span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> test_json;</span><br></pre></td></tr></table></figure><p>通过“-&gt;”和“-&gt;&gt;”符号，从JSON字段中正确查询出了指定的JSON数据的值。</p><h4 id="空间类型"><a href="#空间类型" class="headerlink" title="空间类型"></a>空间类型</h4><p>使用较少，略</p><hr><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>数据完整性是指数据的精确性和可靠性。</p><p>数据库以约束的方式对表数据进行额外的条件限制，以此确保数据的完整性，数据的完整性可以从四个方面考虑：</p><p>①实体完整性。如：同张表不能出现完全相同的记录</p><p>②域完整性。如：年龄范围0-120</p><p>③引用完整性。如：员工所在的部门，在部门表中一定会存在此部门</p><p>④用户自定义完整性。如：用户名唯一、用户名不为空。</p><h3 id="约束的分类"><a href="#约束的分类" class="headerlink" title="约束的分类"></a>约束的分类</h3><ol><li><p>约束的字段个数</p><p>单列约束 ：每个约束只约束一列</p><p>多列约束：每个约束可约束多列数据</p></li><li><p>约束的作用范围</p><p>列级约束：将此约束声明在对应的字段的后面</p><p>表级约束：在表中所有字段声明完，在所有字段后面声明的约束</p></li><li><p>约束的作用</p><p>①not null (非空约束)</p><p>②unique (唯一性约束)</p><p>③primary key (主键约束)</p><p>④foreign key (外键约束)</p><p>⑤check  (检查约束)</p><p>⑥defalut  (默认值约束)</p></li><li><p>添加约束的方式</p></li></ol><p>​CREATE TABLE时添加约束</p><p>​ALTER TABLE时增加约束、删除约束</p><ol start="5"><li>查看表中的约束</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#information_schema数据库名（系统库）</span><br><span class="line">#table_constraints表名称（专门存储各个表的约束）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名称&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束*"></a>非空约束*</h4><p>作用：限定某个字段&#x2F;列不能为空</p><p><strong>非空约束只能用列级约束，不能使用表级约束</strong></p><p>关键字：NOT NULL</p><ol><li><p>在创建表的时候添加约束</p><p>CREATE TABLE 表名称( </p><p>字段名 数据类型, </p><p>字段名 数据类型 NOT NULL, </p><p>字段名 数据类型 NOT NULL );</p></li><li><p>建表后通过MODIFY + 列级约束的方式 增加约束</p><p>alter table 表名称</p><p>modify 字段名 数据类型 not null;</p></li><li><p>删除非空约束</p><p>alter table 表名称</p><p>modify 字段名 数据类型 NULL;</p><p>alter table 表名称 </p><p>modify 字段名 数据类型;</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#在创建表的时候添加约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> table1(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#建表后通过MODIFY <span class="operator">+</span> 列级约束的方式 增加约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1</span><br><span class="line">MODIFY email <span class="type">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">#建表后通过MODIFY <span class="operator">+</span> 列级约束的方式 删除约束条件</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1</span><br><span class="line">MODIFY email <span class="type">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NULL</span>;#去掉<span class="keyword">not</span> <span class="keyword">null</span>，相当于修改某个非注解字段，该字段允许为空</span><br><span class="line"></span><br><span class="line">#建表后通过MODIFY <span class="operator">+</span> 列级约束的方式 删除约束条件</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table1</span><br><span class="line">MODIFY email <span class="type">VARCHAR</span>(<span class="number">25</span>);#去掉<span class="keyword">not</span> <span class="keyword">null</span>，相当于修改某个非注解字段，该字段允许为空</span><br></pre></td></tr></table></figure><h4 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束*"></a>唯一性约束*</h4><p>作用：限定某个字段&#x2F;列不能重复</p><p>关键字：UNIQUE</p><ol><li><p>创建表的时候添加约束</p><p>①列级约束：</p></li></ol><p>​create table 表名称( </p><p>​字段名 数据类型, </p><p>​字段名 数据类型 unique, </p><p>​字段名 数据类型 ); </p><p>​②表级约束：</p><p>​create table 表名称( </p><p>​字段名 数据类型, </p><p>​字段名 数据类型, </p><p>​     字段名 数据类型, </p><p>​[constraint 约束名] unique key(字段名));</p><ol start="2"><li><p>建表后</p><p>①通过ADD + 表级约束的方式 增加约束</p><p>alter table 表名称 </p><p>add constraint 约束名 unique key(字段列表);</p><p>②通过MODIFY + 列级约束的方式 增加约束</p><p>alter table 表名称 </p><p>modify 字段名 字段类型 unique;</p></li><li><p>复合唯一性约束：</p><p>create table 表名称( </p><p>字段名 数据类型, </p><p>字段名 数据类型, </p><p>字段名 数据类型, </p><p>unique key(字段列表));</p></li></ol><p>​<strong>表示用户名和密码组合不能重复，即表中的两个数据的用户名和密码不能完全一致</strong></p><ol start="4"><li><p>删除唯一约束</p><p>ALTER TABLE 数据表名 </p><p>DROP INDEX 创建唯一约束时所起的名字;</p><p><strong>删除唯一约束即通过删除唯一索引，删除时指定的唯一索引名为 创建唯一约束时所起的名字</strong></p><p><strong>创建唯一约束时所起的名字(若是单列，默认和列名相同；若是组合列，默认是字段列表中的第一个字段的名字)</strong></p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#唯一性约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table2(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">UNIQUE</span>,#列级约束</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">#表级约束</span><br><span class="line"><span class="keyword">CONSTRAINT</span> uni_table2_email <span class="keyword">UNIQUE</span>(email)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table2(id,last_name,email,salary)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;14555@qq.com&#x27;</span>,<span class="number">1250.12</span>);</span><br><span class="line"></span><br><span class="line">#建表后通过<span class="keyword">ADD</span> <span class="operator">+</span> 表级约束的方式 增加约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table2</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uni_table2_sal <span class="keyword">UNIQUE</span>(salary);</span><br><span class="line"></span><br><span class="line">#建表后通过MODIFY <span class="operator">+</span> 列级约束的方式 增加约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table2</span><br><span class="line">MODIFY last_name <span class="type">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">UNIQUE</span>;</span><br><span class="line"></span><br><span class="line">#复合唯一性约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span>(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">PASSWORD <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line"></span><br><span class="line">#表级约束</span><br><span class="line"><span class="keyword">CONSTRAINT</span> uni_table2_user_name <span class="keyword">UNIQUE</span>(id,last_name)</span><br><span class="line">    #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多个字段的组合是唯一的 );</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#删除唯一性约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table2</span><br><span class="line"><span class="keyword">DROP</span> INDEX uni_table2_sal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table2</span><br><span class="line"><span class="keyword">DROP</span> INDEX last_name;</span><br></pre></td></tr></table></figure><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束*"></a>主键约束*</h4><p><strong>作用：用来唯一标识表的一行记录，一个表中最多只能由一个主键约束</strong></p><p>主键约束相当于唯一约束 + 非空约束的组合，即不允许列重复，也不能出现空值</p><p>关键字：primary key</p><ol><li><p>创建表时添加主键约束</p><p>①表级约束：</p><p>create table 表名称( </p><p>字段名 数据类型, </p><p>字段名 数据类型,</p><p>字段名 数据类型,</p><p>[constraint 约束名] primary key(字段名)  );</p><p>②列级约束</p><p>create table 表名称(</p><p>字段名 数据类型 primary key,</p><p>字段名 数据类型,</p><p>字段名 数据类型)</p></li><li><p>建表后添加主键约束</p><p>①使用MODIFY + 列级约束在CREATE TABLE 之后添加主键约束<br>ALTER TABLE 表名称</p><p>MODIFY 字段名 数据类型 PRIMARY KEY;</p><p>②使用ADD + 表级约束在CREATE TABLE 之后添加主键约束</p><p>ALTER TABLE 表名称</p><p>ADD PRIMARY KEY(字段列表)</p></li><li><p>复合主键约束</p><p>create table 表名称( </p><p>字段名 数据类型, </p><p>字段名 数据类型, </p><p>字段名 数据类型, </p><p>primary key(字段名1,字段名2) );</p><p><strong>多列组合的复合主键约束，其中任何列的值都不允许为null，且不能完全一致和重复</strong></p></li><li><p>删除主键约束(不建议删除，破坏了数据的特征)</p><p>alter table 表名称</p><p>drop primary key;</p><p>补充：删除表的主键约束后由其影响的不能为空的性质依旧存在</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#主键约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table3(</span><br><span class="line">#id <span class="type">int</span> <span class="keyword">primary</span> key,#列级约束</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">    </span><br><span class="line">#表级约束</span><br><span class="line">#<span class="keyword">primary</span> key主键不需要起名，其名字永远都是<span class="keyword">primary</span>    </span><br><span class="line"><span class="keyword">CONSTRAINT</span> <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#复合主键约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">PASSWORD <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line"></span><br><span class="line"><span class="keyword">CONSTRAINT</span> <span class="keyword">PRIMARY</span> KEY(NAME,PASSWORD)#表示字段<span class="number">1</span>和字段<span class="number">2</span>的组合是唯一的，也可以有更多个字段</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#多列组合的复合主键约束，其中任何列的值都不允许为<span class="keyword">null</span>，且不能完全一致和重复</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test(id,NAME,PASSWORD)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;abc123&#x27;</span>);#不可行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在<span class="keyword">ALTER</span> <span class="keyword">TABLE</span>中添加主键约束</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test1(</span><br><span class="line">#id <span class="type">int</span> <span class="keyword">primary</span> key,#列级约束</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">#表级约束</span><br><span class="line">#<span class="keyword">CONSTRAINT</span> <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#使用MODIFY <span class="operator">+</span> 列级约束在<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 之后添加主键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1</span><br><span class="line">MODIFY id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line">#使用<span class="keyword">ADD</span> <span class="operator">+</span> 表级约束在<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 之后添加主键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="keyword">PRIMARY</span> KEY (id);</span><br><span class="line"></span><br><span class="line">#删除主键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure><h4 id="自增列"><a href="#自增列" class="headerlink" title="自增列"></a>自增列</h4><p>作用：某个字段的值自增</p><p>关键字：AUTO_INCREMENT</p><p>自增列的特定和要求：</p><ul><li><strong>一个表最多只能有一个自增长列</strong></li><li>当需要产生唯一标识符或顺序值时，可设置自增长</li><li><strong>自增长列约束的列必须是键列（主键列，唯一键列）</strong></li><li><strong>自增约束的列的数据类型必须是整数类型</strong></li><li>如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接 赋值为具体值。</li></ul><ol><li><p>使用MODIFY + 列级约束在CREATE TABLE 之后添加自增列</p><p>alter table 表名称 </p><p>modify 字段名 数据类型 auto_increment;</p></li><li><p>删除自增约束</p></li></ol><p>​alter table 表名称 </p><p>​modify 字段名 数据类型; </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#创建表时添加自增列</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test2(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#在一般情况下，一旦主键字段上添加了auto_increment，</span><br><span class="line">#则在添加数据时，不建议给主键对应的字段赋值</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test2(last_name)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;marry&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#在建表后添加</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test3(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#使用MODIFY <span class="operator">+</span> 列级约束在<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 之后添加自增列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test3</span><br><span class="line">MODIFY id <span class="type">INT</span> AUTO_INCREMENT;</span><br><span class="line"></span><br><span class="line">#删除自增列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test3</span><br><span class="line">MODIFY id <span class="type">INT</span>;#去掉auto_increment相当于删除</span><br><span class="line"></span><br><span class="line">#自增列的值在<span class="number">8.0</span>中不会随着数据库的重启而变化，在<span class="number">5.7</span>中则在重启后按现有存在的最后的一个值自增</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test3</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><p>不建议在数据库层面使用，可以了解一下</p><p>原因是：在 MySQL 里，外键约束是有成本的，因为外键约束的系统开销而变得非常慢 </p><p>​而在应用层面也可以起到限制作用，来实现外键约束的功能，确保数据的一致性。</p><p>作用：限定某个表的字段的引用完整性 </p><p>关键字：FOREIGN KEY</p><ol><li><p>主表和从表</p><p>主表(父表)：被引用的表，被参考的表</p><p>从表(子表)：引用其他的表，参考其他的表</p></li><li><p>外键约束的特点：</p><p>①在创建外键约束时，如果不给外键约束命名，默认名不是列名，</p><p>​    而是自动产生一个外键名（例如 student_ibfk_1;），也可以指定外键约束名。</p><p>②在“从表”中指定外键约束，并且一个表可以建立多个外键约束</p><p>③在对主表进行增删改的操作之前要解除从表对主表的引用</p><p>④从表的外键列，必须引用&#x2F;参考主表的主键或唯一约束的列</p><h5 id="约束等级"><a href="#约束等级" class="headerlink" title="约束等级"></a>约束等级</h5></li></ol><ul><li><p>Cascade方式 ：对主表的update&#x2F;delete操作，会同步到从表中。</p></li><li><p>Set null方式 ：对主表的update&#x2F;delete操作，不会同步到从表中，从表中的数据被设为null</p></li><li><p>No action方式 ：如果主表被其他从表引用，则在解除引用之前不允许主表进行任何update&#x2F;delete操作。</p></li><li><p>Restrict方式 ：同no action， 都是立即检查外键约束 Set default方式，不允许任何操作在解除引用之前</p><p><strong>如果没有指定等级，就相当于Restrict方式</strong></p><p><strong>对于外键约束，最好是采用: ON UPDATE CASCADE ON DELETE RESTRICT 的方式。</strong></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#在建表时添加外键约束</span><br><span class="line">#①先创建主表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept(</span><br><span class="line">dept_id <span class="type">INT</span> ,</span><br><span class="line">dept_name <span class="type">VARCHAR</span>(<span class="number">15</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#②再创建从表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">emp_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">emp_name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">department_id <span class="type">INT</span>,</span><br><span class="line">#表级约束</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_emp1_dept_id <span class="keyword">FOREIGN</span> KEY (department_id) <span class="keyword">REFERENCES</span> dept(dept_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#外键约束添加数据</span><br><span class="line">#在主表中添加部门id，主表中id不存在，从表添加数据会失败</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="string">&#x27;Test&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#如果主表中的department_id不存在则会添加失败</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">#在试图删除主表的数据之前，需要解除从表对主表主键的引用，否则删除失败</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dept</span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">#在试图更新主表的数据之前，需要解除从表对主表主键的引用，否则删除失败</span><br><span class="line"><span class="keyword">UPDATE</span> dept</span><br><span class="line"><span class="keyword">SET</span> dept_id <span class="operator">=</span> <span class="number">11</span></span><br><span class="line"><span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp1(</span><br><span class="line">emp_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">emp_name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">department_id <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line">#在建表后通过使用<span class="keyword">ADD</span> <span class="operator">+</span> 表级约束在<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 之后添加外键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp1</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_emp_dept_id <span class="keyword">FOREIGN</span> KEY(department_id) <span class="keyword">REFERENCES</span> dept(dept_id);</span><br><span class="line"></span><br><span class="line">#约束等级 cascase同步删除 restrict设置为<span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">#删除外键约束  </span><br><span class="line">#同个表中可以声明多个外键约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp1</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_emp_dept_id;</span><br><span class="line"></span><br><span class="line">#删除外键约束对应的普通索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp1</span><br><span class="line"><span class="keyword">DROP</span> INDEX fk_emp_dept_id;</span><br></pre></td></tr></table></figure><h4 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h4><p>作用：检查某个字段的值是否符合xx的要求，一般指的是值的范围</p><p>关键字：check</p><p>MySQL5.7不支持check约束，而在8.0才支持</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">CHECK</span>(salary <span class="operator">&gt;</span> <span class="number">2000</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">2500</span>);</span><br></pre></td></tr></table></figure><h4 id="默认值约束"><a href="#默认值约束" class="headerlink" title="默认值约束*"></a>默认值约束*</h4><p>作用：给某个字段&#x2F;某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默认值。</p><p>关键字：DEFAULT</p><ol><li><p>建立表时</p><p>create table 表名称( </p><p>字段名 数据类型 primary key, </p><p>字段名 数据类型 unique key not null, </p><p>字段名 数据类型 unique key, </p><p>字段名 数据类型 not null default 默认值, );</p></li><li><p>在建表后添加使用MODIFY + 列级约束在CREATE TABLE 之后添加默认值约束</p><p>alter table 表名称 </p><p>modify 字段名 数据类型 default 默认值;</p></li><li><p>删除默认值约束</p><p>alter table 表名称 </p><p>modify 字段名 数据类型 default 默认值 not null;</p></li><li><p>为什么建表时，加 not null default ‘’ 或 default 0 </p><p>答：不想让表中出现null值。</p><p>带AUTO_INCREMENT约束的字段值是从1开始的吗？</p><p>答：不是，如果显式指定字段的值，则从此字段值开始自增</p><p>为什么不想要 null 的值？</p><p>答：不好比较。任何值与null做运算都是null；且效率较低，影响索引效果</p><p>每个表都可以任意选择存储引擎？</p><p>答：不是。外键约束（FOREIGN KEY）不能跨引擎使用。要求外键和主键需要使用一致的存储引擎</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test1(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">last_name <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">2000</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#在建表后添加使用MODIFY <span class="operator">+</span> 列级约束在<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 之后添加默认值约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1</span><br><span class="line">MODIFY salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line">#删除约束</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test1</span><br><span class="line">MODIFY salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>);#删除默认值约束，也不保留非空约束</span><br></pre></td></tr></table></figure><hr><h2 id="数据库的相关对象"><a href="#数据库的相关对象" class="headerlink" title="数据库的相关对象"></a>数据库的相关对象</h2><p><img src="https://s1.ax1x.com/2022/03/10/bhjoqO.png" alt="数据的相关对象"></p><hr><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图从本质上来说可以理解为是个已经存储起来的SELECT语句</p><p><strong>视图可以看做一个虚拟表，其本身是不存储任何数据的</strong></p><p>视图创建所涉及的表称为 <strong>基表</strong></p><p>针对视图进行的DML增删改的操作，也会修改对应的基表数据。反过来，对基表的操作也会影响视图的显示内容</p><p>视图其本身的创建和删除对基表中的数据没有影响</p><p>视图的优点：①简化查询，提高索引效率；②控制数据访问者的权限大小</p><p>视图的应用场景：小型项目的表较少不推荐使用视图，而针对大型项目，表较多数据比较复杂则可以考虑使用视图</p><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p>完整版：</p><p>CREATE [OR REPLACE] </p><p>[ALGORITHM &#x3D; {UNDEFINED | MERGE | TEMPTABLE}] </p><p>VIEW 视图名称 [(字段列表)] </p><p>AS 查询语句 </p><p>[WITH [CASCADED|LOCAL] CHECK OPTION]</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#单表视图</span><br><span class="line">#在不设置别名的情况下默认字段列名为视图字段名称</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_emp</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,email </span><br><span class="line"><span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line">#查询语句中的字段别名作为视图的字段名称</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_emp2</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> employee_id emp_id,last_name month_sal,email ema</span><br><span class="line"><span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line">#表名后面字段列表的个数需要与<span class="keyword">select</span>语句中的一致</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_emp3(emp_id,month_sal,ema)</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,email</span><br><span class="line"><span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line">#通过视图查询基表中不存在的字段</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_avg_sal(dep_id,sal)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line">#多表视图</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> ed_dept</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.employee_id,d.department_id</span><br><span class="line"><span class="keyword">FROM</span> emp e <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#利用视图对数据进行格式化</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> ed_info</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT (e.last_name,<span class="string">&#x27;(&#x27;</span>,d.department_name,<span class="string">&#x27;)&#x27;</span>) emp_info</span><br><span class="line"><span class="keyword">FROM</span> emp e <span class="keyword">JOIN</span> dept d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#基于视图创建视图</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> t_view </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure><h3 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#查看数据库的表和视图</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"></span><br><span class="line">#查看视图的结构</span><br><span class="line"><span class="keyword">DESCRIBE</span> ed_info;</span><br><span class="line"></span><br><span class="line">#查看视图的属性信息</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;ed_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#查看视图的详细定义信息</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> ed_info;</span><br></pre></td></tr></table></figure><h3 id="更新视图的数据"><a href="#更新视图的数据" class="headerlink" title="更新视图的数据"></a>更新视图的数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v_emp;</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,email </span><br><span class="line"><span class="keyword">FROM</span> emp;</span><br><span class="line">#一般情况下更新不会失败，</span><br><span class="line">#但是在视图相应修改不在基表中存在字段的数据则会更新失败</span><br><span class="line">#更新视图的数据也会导致基表数据的修改，反之亦然</span><br><span class="line"><span class="keyword">UPDATE</span> v_emp</span><br><span class="line"><span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;sky&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line">#修改视图</span><br><span class="line">#方式一</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> v_emp</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span>  employee_id,last_name,email,salary</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">7000</span>; </span><br><span class="line"></span><br><span class="line">#方式二</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> v_emp</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,email,salary</span><br><span class="line"><span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><p>​格式：DROP VIEW IF EXISTS 视图名称</p><ul><li>基于视图a、视图b建立的视图，在视图a、b删除后，视图c也会失效，除非手动修改或删除</li></ul><h3 id="视图的优缺点"><a href="#视图的优缺点" class="headerlink" title="视图的优缺点"></a>视图的优缺点</h3><p>优点：</p><p>①操作简单，操作人员不需要关注数据的底层结构等等</p><p>②减少数据冗余，其是利用基表生成的，没有实际的数据，其数据都源于基表</p><p>③数据安全，可以限制数据访问者的权限大小</p><p>④适应灵活多变的需求，</p><p>⑤能够分解复杂的查询逻辑，可以将复杂的查询保存下来。</p><p>缺点：维护成本过高，因此小项目不推荐使用，大项目则可以考虑</p><hr><h2 id="存储过程-与-存储函数"><a href="#存储过程-与-存储函数" class="headerlink" title="存储过程 与 存储函数"></a>存储过程 与 存储函数</h2><p>概念：存储过程(Stored Procedure)，将一组经过 <strong>预先编译</strong> 的 SQL语句的封装。</p><p>执行过程：存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用 存储过程的命令，</p><p>​服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。</p><p><strong>与视图、函数的对比：</strong></p><p>视图是基于基表而成虚拟表，本身以提供查询为主，增删改操作较少，而存储过程是直接操作底层数据表的SQL语句</p><p><strong>存储过程 与 存储函数的区别在乎存储过程没有返回值，存储函数有返回值</strong></p><h3 id="存储过程的创建、调用"><a href="#存储过程的创建、调用" class="headerlink" title="存储过程的创建、调用"></a>存储过程的创建、调用</h3><p>格式：</p><p>DELIMITER $</p><p>CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,…) </p><p>[characteristics …] </p><p>BEGIN 存储过程体 </p><p>END $</p><p>DELIMITER ;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#创建存储过程</span><br><span class="line"></span><br><span class="line">#类型一：无参数无返回值</span><br><span class="line">#创建存储过程select_all_data()，查看employees表的所有数据</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> select_all_data()</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER;</span><br><span class="line">#调用存储过程</span><br><span class="line"><span class="keyword">CALL</span> select_all_data();</span><br><span class="line"></span><br><span class="line">#类型二：带<span class="keyword">OUT</span></span><br><span class="line">#创建存储过程show_min_salary()，查看“emps”表的最低薪资值。并将最低薪资通过<span class="keyword">OUT</span>参数“ms”输出</span><br><span class="line"><span class="keyword">DESC</span> employees;</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_min_salary(<span class="keyword">OUT</span> ms <span class="keyword">DOUBLE</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) <span class="keyword">INTO</span> ms</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> show_min_salary(<span class="variable">@ms</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@ms</span>;</span><br><span class="line"></span><br><span class="line">#类型三：带<span class="keyword">IN</span></span><br><span class="line">#创建存储过程show_someone_salary()，查看“emps”表的某个员工的薪资，并用<span class="keyword">IN</span>参数empname输入员工姓名。</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_someone_salary(<span class="keyword">IN</span> empname <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> empname;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> show_someone_salary(<span class="string">&#x27;Abel&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#类型四：带<span class="keyword">IN</span>、<span class="keyword">OUT</span></span><br><span class="line">#创建存储过程show_someone_salary2()，查看“emps”表的某个员工的薪资，并用<span class="keyword">IN</span>参数empname</span><br><span class="line">#输入员工姓名，用<span class="keyword">OUT</span>参数empsalary输出员工薪资。</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_someone_salary2(<span class="keyword">IN</span> empname <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> empsalary <span class="keyword">DOUBLE</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> empsalary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> empname;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@empname</span> <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line"><span class="keyword">CALL</span> show_someone_salary2(<span class="variable">@empname</span>,<span class="variable">@empsalary</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@empsalary</span>;</span><br><span class="line"></span><br><span class="line">#类型五：带 <span class="keyword">INOUT</span></span><br><span class="line">#创建存储过程show_mgr_name()，查询某个员工领导的姓名，</span><br><span class="line">#并用<span class="keyword">INOUT</span>参数“empname”输入员工姓名，输出领导的姓名。</span><br><span class="line"><span class="keyword">DESC</span> employees;</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_mgr_name(<span class="keyword">INOUT</span> empname <span class="type">VARCHAR</span>(<span class="number">25</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">INTO</span> empname</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> empname</span><br><span class="line">     );</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@empname</span> :<span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line"><span class="keyword">CALL</span> show_mgr_name(<span class="variable">@empname</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@empname</span>;</span><br></pre></td></tr></table></figure><h3 id="储存函数的使用"><a href="#储存函数的使用" class="headerlink" title="储存函数的使用"></a>储存函数的使用</h3><p>格式：</p><p>CREATE FUNCTION 函数名(参数名 参数类型,…) </p><p>RETURNS 返回值类型 </p><p>[characteristics …] </p><p>BEGIN 函数体 #函数体中肯定有 RETURN 语句 </p><p>END</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为字符串型。</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> email_by_name()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">CONTAINS</span> <span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">RETURN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> email</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> email_by_name();</span><br><span class="line"></span><br><span class="line">#<span class="number">2.</span>创建存储函数，名称为email_by_id()，参数传入emp_id，</span><br><span class="line">#该函数查询emp_id的email，并返回，数据类型为字符串型。</span><br><span class="line"></span><br><span class="line">#创建函数前执行此语句<span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_bin_trust_function_creators <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">#可不用指明函数特性</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> email_by_id(emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line"><span class="keyword">DETERMINISTIC</span> </span><br><span class="line"><span class="keyword">CONTAINS</span> <span class="keyword">SQL</span></span><br><span class="line"><span class="keyword">READS</span> <span class="keyword">SQL</span> DATA </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">RETURN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> email</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id</span><br><span class="line">);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> email_by_id(<span class="number">102</span>);</span><br><span class="line"></span><br><span class="line">#<span class="number">3.</span>创建存储函数count_by_id()，参数传入dept_id，</span><br><span class="line">#该函数查询dept_id部门的员工人数，并返回，数据类型为整型。</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_bin_trust_function_creators <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> count_by_id(dept_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">RETURN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> dept_id</span><br><span class="line">);</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@dept</span>_id <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> count_by_id(<span class="variable">@dept</span>_id);</span><br></pre></td></tr></table></figure><h3 id="存储过程和存储函数的对比"><a href="#存储过程和存储函数的对比" class="headerlink" title="存储过程和存储函数的对比"></a>存储过程和存储函数的对比</h3><table><thead><tr><th align="left"></th><th align="left">关键字</th><th align="left">调用语法</th><th align="left">返回值</th><th align="left">应用场景</th></tr></thead><tbody><tr><td align="left">存储过程</td><td align="left">PROCEDURE</td><td align="left">CALL 存储过程()</td><td align="left">理解为有0个或 多个</td><td align="left">一般用于更新</td></tr><tr><td align="left">存储函数</td><td align="left">FUNCTION</td><td align="left">SELECT 函数 ()</td><td align="left">只能是一个</td><td align="left">一般用于查询结果为一个值并返回时</td></tr></tbody></table><ul><li>存储函数可以放在查询语句中使用，存储过程不行。</li><li>但存储过程的功能比存储函数强大</li></ul><h3 id="存储过程与存储函数的查看、修改、删除"><a href="#存储过程与存储函数的查看、修改、删除" class="headerlink" title="存储过程与存储函数的查看、修改、删除"></a>存储过程与存储函数的查看、修改、删除</h3><ol><li><p>查看</p><p><strong>①SHOW CREATE  {PROCEDURE | FUNCTION} 存储过程名或函数名</strong></p><p>②SHOW  {PROCEDURE | FUNCTION}  STATUS [LIKE ‘pattern’]</p></li></ol><p>​   ③SELECT * FROM   information_schema.Routines </p><p>​           WHERE   ROUTINE_NAME&#x3D;’存储过程或函数的名’</p><p>​           [AND ROUTINE_TYPE  &#x3D;  {‘PROCEDURE|FUNCTION’}];</p><ol start="2"><li><p>修改</p><p>修改的只是函数的特性，不能修改存储过程或者存储功能，</p><p>使用ALTER语句characteristic指定存储过程或函数的特性，</p><p><strong>ALTER {PROCEDURE | FUNCTION} 存储过程或函数的名 [characteristic …]</strong></p></li><li><p>删除</p><p><strong>DROP {PROCEDURE | FUNCTION} [IF EXISTS] 存储过程或函数的名称</strong></p></li></ol><h3 id="存储过程的优缺点"><a href="#存储过程的优缺点" class="headerlink" title="存储过程的优缺点"></a>存储过程的优缺点</h3><p>优点：</p><p>①存储过程可以一次编译多次使用</p><p>②可以减少开发工作量</p><p>③存储过程的安全性强</p><p>④可以减少网络传输量。</p><p>⑤可以减少网络传输量。</p><p>缺点：</p><p>①可移植性差</p><p>②调试困难</p><p>③存储过程的版本管理很困难。</p><p>④它不适合高并发的场景</p><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>在MySQL中，变量分为 系统变量 和 用户自定义变量</strong></p><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p><strong>系统变量又分为 全局(global)系统变量 和 会话系统变量(session)<strong>，</strong>以@@开头</strong></p><p> 全局系统变量：其软件内置的变量（俗称写死在代码中的）和配置文件中的变量。</p><p>会话系统变量：大部分来自于全局变量的复制，当连接断开时这些会话变量全部消失，重新连接时会从全局变量中重新复制一份。</p><p>针对系统变量没有显式指定，则默认为会话系统变量</p><ol><li><p>查看系统变量</p><ul><li><p>查看所有全局变量 </p><p>SHOW GLOBAL VARIABLES; </p></li><li><p>查看所有会话变量 </p><p>SHOW SESSION VARIABLES; 或 SHOW VARIABLES; </p></li><li><p>查看满足条件的部分系统变量。 </p><p>SHOW GLOBAL VARIABLES LIKE ‘%标识符%’; </p></li><li><p>查看满足条件的部分会话变量 </p><p>SHOW SESSION VARIABLES LIKE ‘%标识符%’;</p></li></ul></li><li><p>查看指定系统变量</p><ul><li><p>查看指定的系统变量的值 </p><p>SELECT @@global.变量名; </p></li><li><p>查看指定的会话变量的值 </p><p>SELECT @@session.变量名; </p><p>SELECT @@变量名    <strong>此方式是默认先在会话系统变量中查找，找不到才到全局系统变量中查找</strong></p></li></ul></li><li><p>修改系统变量的值</p></li></ol><p>​①全局系统变量</p><p>​SET @@global.变量名&#x3D;变量值;</p><p>​SET GLOBAL 变量名&#x3D;变量值;</p><p>​<strong>针对当前的数据库是有效，一旦数据库重启就失效了</strong></p><p>​②会话系统变量</p><p>​SET @@session.变量名&#x3D;变量值;</p><p>​SET SESSION 变量名&#x3D;变量值;</p><p>​<strong>针对当前会话是有效的，一旦结束会话，重新建立新的会话也就失效了</strong></p><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><p>用户变量又分为 <strong>会话用户变量</strong> 和 <strong>局部变量</strong></p><ul><li><p>会话用户变量：作用域和会话变量一样，只对 <strong>当前连接</strong> 会话有效。 </p></li><li><p>局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在 <strong>存储过程和函数</strong> 中使用。</p></li></ul><ol><li>会话用户变量的定义</li></ol><p>​SET @用户变量 &#x3D; 值; </p><p>​SET @用户变量 :&#x3D; 值; </p><p>​SELECT @用户变量 :&#x3D; 表达式 [FROM 等子句];</p><p>​SELECT 表达式 INTO @用户变量 [FROM 等子句];</p><ol start="2"><li><p>查看会话用户变量的值</p><p>SELECT @用户变量名</p></li><li><p>局部变量：</p></li></ol><p>​①**局部变量必须使用declare声明 **</p><p>​②<strong>声明并使用在begin….end 中（使用在存储过程和存储函数里面）</strong></p><p>​③<strong>declare的方式声明的局部变量必须声明在begin的首行位置</strong></p><p>​格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">#声明局部变量</span><br><span class="line"><span class="keyword">DECLARE</span> 变量名<span class="number">1</span> 变量数据类型 [<span class="keyword">DEFAULT</span> 变量默认值];# 如果没有<span class="keyword">DEFAULT</span>子句，初始值为<span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">DECLARE</span> 变量名<span class="number">2</span>,变量名<span class="number">3</span>,... 变量数据类型 [<span class="keyword">DEFAULT</span> 变量默认值];</span><br><span class="line"></span><br><span class="line">#为局部变量赋值</span><br><span class="line"><span class="keyword">SET</span> 变量名<span class="number">1</span> <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">SELECT</span> 值 <span class="keyword">INTO</span> 变量名<span class="number">2</span> [<span class="keyword">FROM</span> 子句];</span><br><span class="line"></span><br><span class="line">#查看局部变量的值</span><br><span class="line"><span class="keyword">SELECT</span> 变量<span class="number">1</span>,变量<span class="number">2</span>,变量<span class="number">3</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>会话用户变量 和 局部变量的区别</p><table><thead><tr><th></th><th>作用域</th><th>定义位置</th><th>语法</th></tr></thead><tbody><tr><td>会话用户变量</td><td>当前会话</td><td>会话的任何地方</td><td>加@符号，不用指定类型</td></tr><tr><td>局部变量</td><td>定义它的BEGIN END中</td><td>BEGIN END的第一句话</td><td>一般不用加@,需要指定类型</td></tr></tbody></table><hr></li></ol><h2 id="定义条件与处理程序"><a href="#定义条件与处理程序" class="headerlink" title="定义条件与处理程序"></a>定义条件与处理程序</h2><p>   定义条件 是事先定义程序执行过程中可能遇到的问题， </p><p>   处理程序 定义了在遇到问题时应当采取的处理方 式，并且保证存储过程或函数在遇到警告或错误时能继续执行。 </p><ul><li>说明：定义条件和处理程序在存储过程、存储函数中都是支持的。</li></ul><h3 id="定义条件"><a href="#定义条件" class="headerlink" title="定义条件"></a>定义条件</h3><p>定义条件即给MySQL中的错误码命名，将一个 <strong>错误名字</strong> 和 指定的 <strong>错误条件</strong> 关联起来</p><p>这样就能在处理程序的 DECLARE HANDLER 语句中使用。</p><p>错误码的说明：<strong>MySQL_error_code</strong> 和 **sqlstate_value **都可以表示MySQL的错误。 </p><p>MySQL_error_code是数值类型错误代码。 sqlstate_value是长度为5的字符串类型错误代码。 </p><p>例如，在ERROR 1418 (HY000)中，1418是MySQL_error_code，’HY000’是sqlstate_value。</p><p>格式：</p><p><strong>DECLARE 错误名称 CONDITION FOR 错误码（或错误条件）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#定义&quot;ERROR 1148(42000)&quot;错误，名称为command_not_allowed。</span><br><span class="line"><span class="keyword">DECLARE</span> command_not_allowed <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="number">1148</span>;#</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> command_not_allowed <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;42000&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="处理程序"><a href="#处理程序" class="headerlink" title="处理程序"></a>处理程序</h3><p>处理程序可以为SQL执行过程中发生的某种类型的错误进行特点的处理</p><p>格式：</p><p><strong>DECLARE 处理方式 HANDLER FOR 错误类型 处理语句</strong></p><ul><li>处理语句必须在sql语句执行之前声明</li></ul><p><img src="https://s1.ax1x.com/2022/03/10/bhv9eS.png" alt="处理方式与类型"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#方法<span class="number">1</span>：捕获sqlstate_value</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;42S02&#x27;</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line">#方法<span class="number">2</span>：捕获mysql_error_value</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="number">1146</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line">#方法<span class="number">3</span>：先定义条件，再调用</span><br><span class="line"><span class="keyword">DECLARE</span> no_such_table <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="number">1146</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> NO_SUCH_TABLE <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line">#方法<span class="number">4</span>：使用<span class="keyword">SQLWARNING</span></span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLWARNING</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;ERROR&#x27;</span>;</span><br><span class="line">#方法<span class="number">5</span>：使用<span class="keyword">NOT</span> FOUND</span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line">#方法<span class="number">6</span>：使用<span class="keyword">SQLEXCEPTION</span></span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLEXCEPTION</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;ERROR&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="IF结构"><a href="#IF结构" class="headerlink" title="IF结构"></a>IF结构</h3><ul><li>IF语句的语法结构：</li></ul><p>​IF 表达式1 THEN 操作1 </p><p>​[ELSEIF 表达式2 THEN 操作2]……</p><p>​[ELSE 操作N] </p><p>​END IF</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#声明存储过程“update_salary_by_eid1”，定义<span class="keyword">IN</span>参数emp_id，输入员工编号。判断该员工</span><br><span class="line">#薪资如果低于<span class="number">8000</span>元并且入职时间超过<span class="number">5</span>年，就涨薪<span class="number">500</span>元；否则就不变。</span><br><span class="line">#if二选一</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_by_eid1(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">#声明局部变量</span><br><span class="line"><span class="keyword">DECLARE</span> sal <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;#记录员工的工资</span><br><span class="line"><span class="keyword">DECLARE</span> work_year <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;#记录员工工作时间</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(CURDATE(),hire_date) <span class="operator">/</span> <span class="number">365</span> <span class="keyword">INTO</span> work_year </span><br><span class="line"><span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line">IF </span><br><span class="line">sal <span class="operator">&lt;</span> <span class="number">8000</span> <span class="keyword">AND</span> work_year <span class="operator">&gt;=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">UPDATE</span> emp</span><br><span class="line"><span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">500</span> </span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">CALL</span> update_salary_by_eid1(<span class="number">104</span>);</span><br><span class="line"></span><br><span class="line">#声明存储过程“update_salary_by_eid2”，定义<span class="keyword">IN</span>参数emp_id，输入员工编号。判断该员工</span><br><span class="line">#薪资如果低于<span class="number">9000</span>元并且入职时间超过<span class="number">5</span>年，就涨薪<span class="number">500</span>元；否则就涨薪<span class="number">100</span>元。</span><br><span class="line">#if多选一</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pdate_salary_by_eid2(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">#声明局部变量</span><br><span class="line"><span class="keyword">DECLARE</span> sal <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;#记录员工的工资</span><br><span class="line"><span class="keyword">DECLARE</span> work_year <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;#记录员工工作时间</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(CURDATE(),hire_date) <span class="operator">/</span> <span class="number">365</span> <span class="keyword">INTO</span> work_year </span><br><span class="line"><span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line">IF </span><br><span class="line">sal <span class="operator">&lt;</span> <span class="number">9000</span> <span class="keyword">AND</span> work_year <span class="operator">&gt;=</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">UPDATE</span> emp</span><br><span class="line"><span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">500</span> </span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">UPDATE</span> emp</span><br><span class="line"><span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> pdate_salary_by_eid2(<span class="number">103</span>);</span><br><span class="line"><span class="keyword">CALL</span> pdate_salary_by_eid2(<span class="number">104</span>);</span><br><span class="line"></span><br><span class="line">#声明存储过程“update_salary_by_eid3”，定义<span class="keyword">IN</span>参数emp_id，输入员工编号。判断该员工</span><br><span class="line">#薪资如果低于<span class="number">9000</span>元，就更新薪资为<span class="number">9000</span>元；薪资如果大于等于<span class="number">9000</span>元且低于<span class="number">10000</span>的，但是奖金</span><br><span class="line">#比例为<span class="keyword">NULL</span>的，就更新奖金比例为<span class="number">0.01</span>；其他的涨薪<span class="number">100</span>元</span><br><span class="line">#if的n选一</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_by_eid3(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">#声明局部变量</span><br><span class="line"><span class="keyword">DECLARE</span> sal <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;#记录员工的工资</span><br><span class="line"><span class="keyword">DECLARE</span> bonus <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;#记录员工的奖金比例</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">SELECT</span> commission_pct <span class="keyword">INTO</span> bonus </span><br><span class="line"><span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line">IF </span><br><span class="line">sal <span class="operator">&lt;</span> <span class="number">9000</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> emp</span><br><span class="line"><span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">9000</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">ELSEIF sal <span class="operator">&lt;</span><span class="number">10000</span> <span class="keyword">AND</span> sal <span class="operator">&gt;=</span> <span class="number">9000</span> <span class="keyword">AND</span> bonus <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">UPDATE</span> emp</span><br><span class="line"><span class="keyword">SET</span> commission_pct <span class="operator">=</span> <span class="number">0.01</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">UPDATE</span> emp</span><br><span class="line"><span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">CALL</span> update_salary_by_eid3(<span class="number">104</span>);</span><br></pre></td></tr></table></figure><h3 id="CASE结构"><a href="#CASE结构" class="headerlink" title="CASE结构"></a>CASE结构</h3><ul><li>CASE语句的语法结构1：</li></ul><p>\情况一：类似于switch </p><p>CASE 表达式 WHEN 值1 THEN 结果1或语句1(如果是语句，需要加分号)</p><p>WHEN 值2 THEN 结果2或语句2(如果是语句，需要加分号) </p><p>… </p><p>ELSE 结果n或语句n(如果是语句，需要加分号) </p><p>END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要） </p><ul><li>CASE语句的语法结构2：</li></ul><p>情况二：类似于多重if </p><p>CASE WHEN 条件1 THEN 结果1或语句1(如果是语句，需要加分号)</p><p> WHEN 条件2 THEN 结果2或语句2(如果是语句，需要加分号)</p><p>… </p><p>ELSE 结果n或语句n(如果是语句，需要加分号) </p><p>END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#声明存储过程“update_salary_by_eid4”，定义<span class="keyword">IN</span>参数emp_id，输入员工编号。判断该员工</span><br><span class="line">#薪资如果低于<span class="number">9000</span>元，就更新薪资为<span class="number">9000</span>元；薪资大于等于<span class="number">9000</span>元且低于<span class="number">10000</span>的，但是奖金比例</span><br><span class="line">#为<span class="keyword">NULL</span>的，就更新奖金比例为<span class="number">0.01</span>；其他的涨薪<span class="number">100</span>元。</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_by_eid4(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> sal <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;#记录员工的工资</span><br><span class="line"><span class="keyword">DECLARE</span> bonus <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;#记录员工的奖金比例</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">SELECT</span> commission_pct <span class="keyword">INTO</span> bonus <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> sal <span class="operator">&lt;</span> <span class="number">9000</span> </span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">UPDATE</span> emp </span><br><span class="line"><span class="keyword">SET</span> salary  <span class="operator">=</span> <span class="number">9000</span> </span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHEN</span> sal <span class="operator">&lt;</span> <span class="number">10000</span> <span class="keyword">AND</span> bonus <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">UPDATE</span> emp </span><br><span class="line"><span class="keyword">SET</span> commission_pct  <span class="operator">=</span> <span class="number">0.01</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">UPDATE</span> emp </span><br><span class="line"><span class="keyword">SET</span> salary  <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> update_salary_by_eid4(<span class="number">103</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">103</span>;</span><br><span class="line"></span><br><span class="line">#举例<span class="number">4</span>：声明存储过程update_salary_by_eid5，定义<span class="keyword">IN</span>参数emp_id，输入员工编号。判断该员工的</span><br><span class="line">#入职年限，如果是<span class="number">0</span>年，薪资涨<span class="number">50</span>；如果是<span class="number">1</span>年，薪资涨<span class="number">100</span>；如果是<span class="number">2</span>年，薪资涨<span class="number">200</span>；如果是<span class="number">3</span>年，</span><br><span class="line">#薪资涨<span class="number">300</span>；如果是<span class="number">4</span>年，薪资涨<span class="number">400</span>；其他的涨薪<span class="number">500</span>。</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_by_eid5(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> work_year <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;#记录员工的工作时间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ROUND(DATEDIFF(CURDATE(),hire_date) <span class="operator">/</span> <span class="number">365</span>) <span class="keyword">INTO</span> work_year </span><br><span class="line"><span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CASE</span> work_year</span><br><span class="line"><span class="keyword">WHEN</span> work_year <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">UPDATE</span> emp </span><br><span class="line"><span class="keyword">SET</span> salary  <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">50</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHEN</span> work_year <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">UPDATE</span> emp </span><br><span class="line"><span class="keyword">SET</span> salary  <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHEN</span> work_year <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">UPDATE</span> emp </span><br><span class="line"><span class="keyword">SET</span> salary  <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">200</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHEN</span> work_year <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">UPDATE</span> emp </span><br><span class="line"><span class="keyword">SET</span> salary  <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">300</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHEN</span> work_year <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">UPDATE</span> emp </span><br><span class="line"><span class="keyword">SET</span> salary  <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">400</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">UPDATE</span> emp </span><br><span class="line"><span class="keyword">SET</span> salary  <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">500</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> update_salary_by_eid5(<span class="number">101</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">101</span>;</span><br></pre></td></tr></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="LOOP结构"><a href="#LOOP结构" class="headerlink" title="LOOP结构"></a>LOOP结构</h3><p>LOOP循环语句用来重复执行某些语句。LOOP内的语句一直重复执行直到循环被退出（使用LEAVE语句），跳出循环过程。</p><p>格式：loop_label表示LOOP语句的标注名称，可以选择省略</p><p>[ loop_label: ] LOOP</p><p>​循环执行的语句</p><p>END LOOP[ loop_label  ]；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#当市场环境变好时，公司为了奖励大家，决定给大家涨工资。</span><br><span class="line">#声明存储过程“update_salary_loop()”，声明<span class="keyword">OUT</span>参数num，输出循环次数。</span><br><span class="line">#存储过程中实现循环给大家涨薪，薪资涨为原来的<span class="number">1.1</span>倍。</span><br><span class="line">#直到全公司的平均薪资达到<span class="number">12000</span>结束。并统计循环次数。</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_loop(<span class="keyword">OUT</span> num <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">#定义局部变量 </span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#记录循环的次数</span><br><span class="line">#<span class="keyword">declare</span> avg_sal <span class="keyword">double</span> <span class="keyword">default</span> <span class="number">0.0</span>;</span><br><span class="line">loop_label:LOOP</span><br><span class="line">   IF (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp) <span class="operator">&gt;=</span> <span class="number">12000</span>  </span><br><span class="line"><span class="keyword">THEN</span> LEAVE loop_label;</span><br><span class="line">   <span class="keyword">END</span> IF;    </span><br><span class="line">   <span class="keyword">UPDATE</span> emp <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">*</span> <span class="number">1.1</span>;      </span><br><span class="line">   <span class="keyword">SET</span> n <span class="operator">=</span> n <span class="operator">+</span> <span class="number">1</span>;    </span><br><span class="line">   <span class="keyword">END</span> LOOP loop_label;   </span><br><span class="line">   <span class="keyword">SET</span> num <span class="operator">=</span> n;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h3 id="WHILE结构"><a href="#WHILE结构" class="headerlink" title="WHILE结构"></a>WHILE结构</h3><p><strong>WHILE 类似于Java中的while一样</strong></p><p>WHILE语句创建一个带条件判断的循环过程。</p><p>WHILE在执行语句执行时，会对指定的表达式进行判断，<strong>循环体被执行到直至循环条件为假 就会退出循环</strong></p><p>格式： while_label 表示WHILE语句的标注名称，可以选择省略,</p><p>[ while_label :] WHILE 循环条件 DO</p><p>​循环体</p><p>END WHILE [ while_label] </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。</span><br><span class="line">#声明存储过程“update_salary_while()”，声明<span class="keyword">OUT</span>参数num，输出循环次数。</span><br><span class="line">#存储过程中实现循环给大家降薪，薪资降</span><br><span class="line">#为原来的<span class="number">90</span><span class="operator">%</span>。直到全公司的平均薪资达到<span class="number">5000</span>结束。并统计循环次数。</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> leave_while(<span class="keyword">OUT</span> num <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#记录循环的次数</span><br><span class="line"></span><br><span class="line">while_label:WHILE </span><br><span class="line"></span><br><span class="line"> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp )  <span class="operator">&gt;</span> <span class="number">5000</span> </span><br><span class="line"> </span><br><span class="line">DO <span class="keyword">UPDATE</span> emp <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">*</span> <span class="number">0.9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> n <span class="operator">=</span> n <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> WHILE while_label;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> num <span class="operator">=</span> n;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> leave_while(<span class="variable">@num</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@num</span>;</span><br></pre></td></tr></table></figure><h3 id="REPEAT结构"><a href="#REPEAT结构" class="headerlink" title="REPEAT结构"></a>REPEAT结构</h3><p><strong>REPEAT类似于Java中do - while，不管结果如何首先执行一次</strong></p><p>REPEAT语句创建一个带条件判断的循环过程。</p><p>REPEAT 循环首先会执行一次循环，然后在 UNTIL 中进行表达式的判断，</p><p><strong>循环体内的语句会被重复，直至 循环条件为真就退出。</strong></p><p>格式：repeat_label为REPEAT语句的标注名称，该参数可以省略；</p><p>[ repeat_label : ] REPEAT</p><p>​循环体</p><p>UNTIL 结束循环的条件表达式</p><p>END REPEAT [ repeat_label ]</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#当市场环境变好时，公司为了奖励大家，决定给大家涨工资。</span><br><span class="line">#声明存储过程“update_salary_repeat()”，声明<span class="keyword">OUT</span>参数num，输出循环次数。</span><br><span class="line">#存储过程中实现循环给大家涨薪，薪资涨为原来的<span class="number">1.15</span>倍。</span><br><span class="line">#直到全公司的平均薪资达到<span class="number">13000</span>结束。并统计循环次数。</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_repeat(<span class="keyword">OUT</span> num <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> cout <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#记录循环的次数</span><br><span class="line">repeat_label:REPEAT </span><br><span class="line"><span class="keyword">UPDATE</span> emp <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">*</span> <span class="number">1.15</span>;</span><br><span class="line"><span class="keyword">SET</span> cout <span class="operator">=</span> cout <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">UNTIL (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp) <span class="operator">&gt;=</span> <span class="number">13000</span>#此处不可加“;结束分号”，否则报错</span><br><span class="line"><span class="keyword">END</span> REPEAT repeat_label;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> num <span class="operator">=</span> cout;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> update_salary_repeat(<span class="variable">@num</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@num</span>;</span><br></pre></td></tr></table></figure><h3 id="前三种循环的异同"><a href="#前三种循环的异同" class="headerlink" title="前三种循环的异同"></a>前三种循环的异同</h3><ol><li><p>三种循环都可以省略名称，<strong>但在循环中添加了循环控制条件(如LEVE 或 ITERATE)则必须要添加名称</strong></p></li><li><p>LOOP：一般先用于简单的“死循环”，通常需要配合LEAVE使用</p><p>WHILE：先判断后运行</p><p>REPEAT：先执行后判断，必定先执行一次。</p><p>WHILE 和 REPEAT的区别类似于Java中的while和do - while的循环区别</p></li></ol><h3 id="LEVEL的使用"><a href="#LEVEL的使用" class="headerlink" title="LEVEL的使用"></a>LEVEL的使用</h3><p>类似与java中的break，结束循环</p><p> 格式：<strong>LEAVE 标记名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#：创建存储过程 “leave_begin()”，声明<span class="type">INT</span>类型的<span class="keyword">IN</span>参数num。给BEGIN...END加标记名，并在</span><br><span class="line">#BEGIN...END中使用IF语句判断num参数的值。</span><br><span class="line">#如果num<span class="operator">&lt;=</span><span class="number">0</span>，则使用LEAVE语句退出BEGIN...END；</span><br><span class="line">#如果num<span class="operator">=</span><span class="number">1</span>，则查询“employees”表的平均薪资；</span><br><span class="line">#如果num<span class="operator">=</span><span class="number">2</span>，则查询“employees”表的最低薪资；</span><br><span class="line">#如果num<span class="operator">&gt;</span><span class="number">2</span>，则查询“employees”表的最高薪资。</span><br><span class="line">#IF语句结束后查询“employees”表的总人数。</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> leave_begin(<span class="keyword">IN</span> num <span class="type">INT</span>)</span><br><span class="line">if_label:<span class="keyword">BEGIN</span></span><br><span class="line">IF </span><br><span class="line">num <span class="operator">&lt;=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">THEN</span> LEAVE if_label;</span><br><span class="line">ELSEIF num <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp;</span><br><span class="line">ELSEIF num <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) <span class="keyword">FROM</span> emp;</span><br><span class="line">ELSEIF num <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(employee_id) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> leave_begin(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">#当市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。</span><br><span class="line">#声明存储过程“leave_while()”，声明<span class="keyword">OUT</span>参数num，输出循环次数，存储过程中使用WHILE循环给大家降低薪资为原来薪资的<span class="number">90</span><span class="operator">%</span>，</span><br><span class="line">#直到全公司的平均薪资小于等于<span class="number">10000</span>，并统计循环次数。</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> leave_while(<span class="keyword">OUT</span> num <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">while_lab:WHILE <span class="literal">TRUE</span> DO</span><br><span class="line">IF (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp) <span class="operator">&lt;=</span> <span class="number">10000</span> <span class="keyword">THEN</span> LEAVE while_lab;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> emp <span class="keyword">SET</span> salary  <span class="operator">=</span> salary <span class="operator">*</span> <span class="number">0.9</span>;</span><br><span class="line"><span class="keyword">SET</span> n <span class="operator">=</span> n <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> WHILE while_lab;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> num <span class="operator">=</span> n;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> leave_while(<span class="variable">@num</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@num</span>;</span><br></pre></td></tr></table></figure><h3 id="ITERATE的使用"><a href="#ITERATE的使用" class="headerlink" title="ITERATE的使用"></a>ITERATE的使用</h3><p>类似与java中的continue，跳过本次循环</p><p>格式：<strong>ITERATE label</strong></p><ul><li>label参数表示循环的标志。ITERATE语句必须跟在循环标志前面。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#当n <span class="operator">&lt;</span> <span class="number">10</span> 跳出此次循环； n <span class="operator">&gt;</span> <span class="number">15</span> 结束循环 </span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> iterate_test()</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#记录循环的次数</span><br><span class="line"></span><br><span class="line">iterate_lab:LOOP</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> n <span class="operator">=</span> n <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">IF n <span class="operator">&lt;</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">THEN</span> ITERATE iterate_lab;</span><br><span class="line">ELSEIF n <span class="operator">&gt;</span> <span class="number">15</span></span><br><span class="line"><span class="keyword">THEN</span> LEAVE iterate_lab;</span><br><span class="line"><span class="keyword">END</span> IF; </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;这是个测试语句&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line">#共输出了<span class="number">6</span>次<span class="keyword">select</span>的语句</span><br></pre></td></tr></table></figure><hr><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p> 游标提供了一种灵活的操作方式，能够对结果集中的每一条记录进行定位，并对指向的记录中的数据进行操作。</p><p>游标充当了 <strong>指针</strong>的作用 ，可以通过操作游标来对数据行进行操作。</p><h3 id="使用游标的步骤"><a href="#使用游标的步骤" class="headerlink" title="使用游标的步骤"></a>使用游标的步骤</h3><ol><li>声明游标</li></ol><p>​语法格式：DECLARE 游标名 CURSOR FOR 具体的查询语句;</p><ol start="2"><li>打开游标</li></ol><p>​语法格式：OPEN 游标名</p><ol start="3"><li>使用游标</li></ol><p>​语法格式：FETCH 游标名 INTO var_name [, var_name] …</p><ul><li><strong>游标的查询结果集中的字段数，必须跟上方表中查询返回的字段数一致</strong></li></ul><ol start="4"><li>关闭游标</li></ol><p>​语法格式：CLOSE 游标名</p><ul><li><p>游标会占用系统资源，因此必须关闭，否则会保持到存储过程结束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#创建存储过程“get_count_by_limit_total_salary()”，声明<span class="keyword">IN</span>参数 limit_total_salary，<span class="keyword">DOUBLE</span>类型；</span><br><span class="line">#声明<span class="keyword">OUT</span>参数total_count，<span class="type">INT</span>类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，</span><br><span class="line">#直到薪资总和达到limit_total_salary参数的值，返回累加的人数给total_count。</span><br><span class="line"></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> get_count_by_limit_total_salary(<span class="keyword">IN</span> limit_total_salary <span class="keyword">DOUBLE</span>,<span class="keyword">OUT</span> total_count <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">#定义局部变量</span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;#记录累加的次数</span><br><span class="line"><span class="keyword">DECLARE</span> emp_sal <span class="keyword">DOUBLE</span>;#记录某一个员工的工资</span><br><span class="line"><span class="keyword">DECLARE</span> sum_sal <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;#记录累加的工资总和</span><br><span class="line"></span><br><span class="line">#定义游标</span><br><span class="line"><span class="keyword">DECLARE</span> emp_cursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line">#打开游标</span><br><span class="line"><span class="keyword">OPEN</span> emp_cursor;</span><br><span class="line"></span><br><span class="line">REPEAT </span><br><span class="line">#使用游标</span><br><span class="line"><span class="keyword">FETCH</span> emp_cursor <span class="keyword">INTO</span> emp_sal;#游标的查询结果集中的字段数，必须跟上方表中查询返回的字段数一致</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> sum_sal <span class="operator">=</span> sum_sal <span class="operator">+</span>  emp_sal;</span><br><span class="line"><span class="keyword">SET</span> n <span class="operator">=</span> n <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">UNTIL sum_sal <span class="operator">&gt;=</span> limit_total_salary</span><br><span class="line"><span class="keyword">END</span> REPEAT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> total_count <span class="operator">=</span> n;</span><br><span class="line">#关闭游标</span><br><span class="line"><span class="keyword">CLOSE</span> emp_cursor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">CALL</span> get_count_by_limit_total_salary(<span class="number">200000</span>,<span class="variable">@total</span>_count);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@total</span>_count;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>举个例子：可以创建一个触发器，让商品信息数据的插入操作自动触发库存数 据的插入操作。 </p><p>触发器是由 事件来触发 某个操作，这些事件包括 INSERT 、 UPDATE 、 DELETE 事件。</p><p>所谓事件就是指 用户的动作或者触发某项行为。</p><h3 id="触发器的创建"><a href="#触发器的创建" class="headerlink" title="触发器的创建"></a>触发器的创建</h3><p>语法结构：</p><p>CREATE TRIGGER 触发器名称 </p><p>{BEFORE|AFTER} {INSERT|UPDATE|DELETE} ON 表名 </p><p>FOR EACH ROW </p><p>触发器执行的语句块;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#定义触发器“salary_check_trigger”，基于员工表“employees”的<span class="keyword">INSERT</span>事件，</span><br><span class="line">#在<span class="keyword">INSERT</span>之前检查将要添加的新员工薪资是否大于他领导的薪资，</span><br><span class="line">#如果大于领导薪资，则报sqlstate_value为<span class="string">&#x27;HY000&#x27;</span>的错误，从而使得添加失败。</span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> salary_check_trigger</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> emp</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> mgr_sal <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> mgr_sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> new.manager_id;</span><br><span class="line"></span><br><span class="line">IF new.salary <span class="operator">&gt;</span> mgr_sal</span><br><span class="line"><span class="keyword">THEN</span> SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;HY000&#x27;</span> <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;薪资高于领导薪资错误&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line">#触发触发器，添加失败</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(employee_id,last_name,email,hire_date,job_id,salary,manager_id)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">300</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;123456@gmail.com&#x27;</span>,CURDATE(),<span class="string">&#x27;AD_VP&#x27;</span>,<span class="number">10000</span>,<span class="number">103</span>);</span><br></pre></td></tr></table></figure><h3 id="查看、删除触发器"><a href="#查看、删除触发器" class="headerlink" title="查看、删除触发器"></a>查看、删除触发器</h3><ol><li><p>查看触发器</p><p>①SHOW TRIGGERS\G</p><p>②SHOW CREATE TRIGGER 触发器名称</p><p>③SELECT * FROM information_schema.TRIGGERS;</p></li><li><p>删除触发器</p><p>DROP TRIGGER IF EXISTS 触发器名称；</p></li></ol><h3 id="触发器的优缺点"><a href="#触发器的优缺点" class="headerlink" title="触发器的优缺点"></a>触发器的优缺点</h3><p>优点：</p><p>①触发器可以确保数据的完整性。因为会同步更新修改或删除的数据</p><p>②触发器可以帮助我们记录操作日志。任何操作之前都被记录</p><p>③触发器还可以用在操作数据前，对数据进行合法性检查。</p><p>缺点：</p><p>①触发器最大的一个问题就是可读性差。</p><p>②相关数据的变更，可能会导致触发器出错。</p><p><strong>注意点：</strong></p><p>如果在子表中定义了外键约束，并且外键指定了ON UPDATE&#x2F;DELETE CASCADE&#x2F;SET NULL子句，</p><p>此时修改父表被引用的键值或删除父表被引用的记录行时，也会引起子表的修改和删除操作，</p><p>此时基于子表的UPDATE和DELETE语句定义的触发器并不会被激活。</p><hr><h2 id="MySQL8-0-新特性"><a href="#MySQL8-0-新特性" class="headerlink" title="MySQL8.0 新特性"></a>MySQL8.0 新特性</h2><p>窗口函数分为了 <strong>静态窗口函数</strong> 和 <strong>动态窗口函数</strong></p><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><p>语法格式：</p><p>实际上PARTITION BY是可选择的</p><p>①<strong>函数 OVER ([PARTITION BY 字段名 ORDER BY 字段名 ASC | DESC])</strong></p><p>②**函数  OVER 窗口名 … WINDOW 窗口名 AS ([PARTITION BY 字段名 ORDER BY 字段名 ASC | DESC]) **</p><p><img src="https://s1.ax1x.com/2022/03/10/bhvKwF.png" alt="相关说明"></p><h4 id="序号函数"><a href="#序号函数" class="headerlink" title="序号函数"></a>序号函数</h4><p>ROW_NUMBER()：生成一个呈现分类后序号的列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查询goods数据表中每个商品分类下价格降序排列的各个商品信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> category_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> price  <span class="keyword">DESC</span>) <span class="keyword">AS</span>  <span class="type">row</span> num,</span><br><span class="line">id,category_id,category,name,price,stock</span><br><span class="line"><span class="keyword">FROM</span> goods;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/03/10/bhvGS1.png" alt="查询结果"></p><p>————其他函数用法在此不做说明，</p><p><img src="https://s1.ax1x.com/2022/03/10/bhvsSI.png" alt="函数用法"></p><h3 id="公用表表达式"><a href="#公用表表达式" class="headerlink" title="公用表表达式"></a>公用表表达式</h3><p>公共表表达式(Common Table Expressions)可以理解为是一个命名的 临时结果集，作用范围是在当前语句中</p><p>也可以把它看作一个支持复用的子查询，但与子查询还是不太一样，cte可以引用别的cte，子查询不能引用别的子查询</p><p>其中又分为了 <strong>普通公用表表达式</strong> 和 <strong>递归公用表表达式</strong></p><h4 id="普通公用表表达式"><a href="#普通公用表表达式" class="headerlink" title="普通公用表表达式"></a>普通公用表表达式</h4><p>语句结构：</p><p>WITH CTE名称</p><p>AS  (子查询)</p><p>SELECT| DELETE | UPDATE 语句；</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> cte_emp</span><br><span class="line"><span class="keyword">AS</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id <span class="keyword">FROM</span> employees);</span><br><span class="line"></span><br><span class="line">#使用cte_emp表</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> department_id <span class="keyword">JOIN</span> cte_emp e</span><br><span class="line"><span class="keyword">on</span> d.department_id <span class="operator">=</span> e.department_id;</span><br></pre></td></tr></table></figure><h4 id="递归公用表表达式"><a href="#递归公用表表达式" class="headerlink" title="递归公用表表达式"></a>递归公用表表达式</h4><p>实际就是自己调用自己</p><p>语句结构：</p><p>WITHRECURSIVE</p><p>CTE名称 AS (子查询)</p><p>SELECT| DELETE | UPDATE 语句；</p><hr>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java环境安装</title>
      <link href="/2022/02/24/Java%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
      <url>/2022/02/24/Java%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Java开发环境安装"><a href="#Java开发环境安装" class="headerlink" title="Java开发环境安装"></a>Java开发环境安装</h2><h3 id="JDK的下载与安装"><a href="#JDK的下载与安装" class="headerlink" title="JDK的下载与安装"></a>JDK的下载与安装</h3><blockquote><p>目前JDK版本已更新到17代，本次下载以JDK8，即1.8为例（新版与旧版的区别在于增加了一些新特性）</p></blockquote><ul><li>JDK的下载</li></ul><ol><li>通过百度或者谷歌搜索JDK8 根据电脑版本进行下载</li><li>jdk版本更新迭代较大 官网有可能找不到jdk8的下载 在此提供官方备份的下载地址    <a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">jdk8下载</a></li></ol><ul><li>JDK的安装</li></ul><ol><li>下载完成后打开进行下一步</li><li>需要注意记住当前jdk8安装的路径，环境配置需要用上  (下载路径根据个人喜好自主选择)</li></ol><hr><h3 id="JDK的环境配置"><a href="#JDK的环境配置" class="headerlink" title="JDK的环境配置"></a>JDK的环境配置</h3><ul><li>我的电脑–&gt;右键–&gt;高级系统设置</li><li>下面的环境变量新建–&gt;变量名为JAVA_HOME，变量值填入jdk8安装的文件路径</li><li>找到环境变量下的Path–&gt;双击打开–&gt;新建两个新变量   %JAVA_HOME%\bin  %JAVA_HOME%\jre\bin 需要注意大小写</li><li>通过cmd检测JDK是否安装成功（命令行中输入java -version验证）</li></ul><p>cmd窗口出现以下界面即为环境配置成功</p><p><img src="https://s4.ax1x.com/2022/02/24/bFA92D.png" alt="演示图片"></p><hr><h3 id="关于JDK的卸载"><a href="#关于JDK的卸载" class="headerlink" title="关于JDK的卸载"></a>关于JDK的卸载</h3><ol><li>首先删除java的安装目录</li><li>删除环境变量种的JAVA_HOME</li><li>删除path下关于java的变量</li><li>在cmd命令行中输入java version，若提示不是内部命令，则删除成功</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/2022/02/24/MarkDown%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/02/24/MarkDown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="MarkDown语法"><a href="#MarkDown语法" class="headerlink" title="MarkDown语法"></a>MarkDown语法</h2><h3 id="语法书写的介绍"><a href="#语法书写的介绍" class="headerlink" title="语法书写的介绍"></a>语法书写的介绍</h3><p>格式：#+标题内容</p><p>一级标题#+</p><p>二级标题##+</p><p>以此类推</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p><strong>Hello，World！</strong>    </p><p><em>Hello，World！</em></p><p><em><strong>Hello，World！</strong></em></p><p><del>Hello，World！</del></p><p>输入内容前后两个*代表字体加粗  </p><p>前后一个的*代表字体倾斜</p><p>前后各三个*代表倾斜和加粗同时都有</p><p>前后各两个-代表中间划线</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><blockquote><p>Java的学习是需要很长时间的，坚持就是胜利！</p></blockquote><p>大于号&gt;加空格即可</p><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><hr><hr><p>—+回车</p><p>***+回车 都能形成分割线</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="https://s4.ax1x.com/2022/02/23/bpd5o8.jpg" alt="演示"></p><p>英文状态下的！+中括号[]括号里面填内容+()括号即可形成</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><hr><p><a href="https://ekkochan.cn/">点击跳转到另一个网站</a></p><p>[]+中间加上输入内容+括号即可形成 与图片的语法书写相似</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol><li>1 </li><li>2</li><li>3</li></ol><p>有序列表 数字+一点.+空格</p><ul><li>1</li><li>2</li><li>3</li></ul><p>无序列表 减号-+空格</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table><thead><tr><th align="center">名字</th><th align="center">性别</th><th align="center">生日</th></tr></thead><tbody><tr><td align="center">张三</td><td align="center">男</td><td align="center">1995.5.5</td></tr></tbody></table><p>内容|内容|内容</p><p>–|–|–|</p><p>内容|内容|内容</p><p>左下角源代码模式将三行的间隔行<font color='red'><strong>删掉</strong></font>即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br></pre></td></tr></table></figure><p>Tab上面的三个顿号+内容即可</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSe2</title>
      <link href="/2022/02/23/JavaSe2/"/>
      <url>/2022/02/23/JavaSe2/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="程序-进程-线程"><a href="#程序-进程-线程" class="headerlink" title="程序 进程 线程"></a>程序 进程 线程</h3><ol><li><p>程序是为了完成特定目标，编写的一组指令集合。可理解为一段静态的代码</p></li><li><p>进程是一个正在执行的程序。生命周期是进程的产生、存在和消亡的过程。</p><p>①<strong>进程作为一个资源分配的单位，每一个进程都单独拥有一套方法区和堆。</strong></p></li><li><p>线程是一个程序内部的一条执行路径。</p></li></ol><p>​①一个进程支持同一时间并行执行多个线程，则支持多线程。</p><p>​②<strong>线程作为调度和执行的单位，每个线程都独立拥有一套虚拟机栈和程序计数器(pc)</strong></p><p>​③一个进程中的多个线程共享相同的内存单元&#x2F;内存地址空间它们从同一堆中分配对象，可以 访问相同的变量和对象。</p><p>​<strong>可以理解为一个进程内的多个线程之间共享一套方法区和堆，但也造成了安全隐患</strong></p><p>一个java应用程序java.exe至少有3个线程：main()主线程。gc()垃圾回收线程，异常处理线程。如果出现异常情况就会影响主线程。</p><h3 id="并行-并发"><a href="#并行-并发" class="headerlink" title="并行 并发"></a>并行 并发</h3><ol><li>并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。</li><li>并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。</li></ol><hr><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="创建方式一：继承于Thread类"><a href="#创建方式一：继承于Thread类" class="headerlink" title="创建方式一：继承于Thread类"></a>创建方式一：继承于Thread类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="comment">//2.重写Thread类中的run()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//3.创建Thread类的子类的对象</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="comment">//4.通过此对象调用父类中的star()方法</span></span><br><span class="line">        test.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题补充：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//问题一：我们不能通过直接调用对象.run()方法启动线程</span></span><br><span class="line">        <span class="comment">//test.run()</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//问题二：要想再启动一个线程，不能再调用当前对象的start()的线程去执行，会报IllegalThreadStateException异常</span></span><br><span class="line">        <span class="comment">//只能通过重新创建一个新的线程对象</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test1.start();</span><br></pre></td></tr></table></figure><h3 id="Thread类的方法"><a href="#Thread类的方法" class="headerlink" title="Thread类的方法"></a>Thread类的方法</h3><ol><li><p>start():启动当前线程；调用当前线程的run()</p></li><li><p>run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</p></li><li><p>currentThread():静态方法，返回执行当前代码的线程</p></li><li><p>getName():获取当前线程的名字</p></li><li><p>setName():设置当前线程的名字</p></li><li><p>yield():释放当前cpu的执行权</p></li><li><p>join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才</p><p>结束阻塞状态。</p></li><li><p>stop():已过时。当执行此方法时，强制结束当前线程。</p></li><li><p>sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前</p><p>线程是阻塞状态。</p></li><li><p>isAlive():判断当前线程是否存活</p></li></ol><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><ol><li>调度策略：</li></ol><p><img src="https://s4.ax1x.com/2022/02/23/bCVYJU.png" alt="调度策略"></p><ol start="2"><li>优先级</li></ol><p>①MAX_PRIORITY：10</p><p>​MIN _PRIORITY：1</p><p>​NORM_PRIORITY：5  –&gt;默认优先级</p><p>②获取和设置当前线程的优先级：</p><p>getPriority():获取线程的优先级</p><p>setPriority(int p):设置线程的优先级</p><p>补充：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高</p><p>概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。</p><h3 id="创建方式二：实现Runnable接口"><a href="#创建方式二：实现Runnable接口" class="headerlink" title="创建方式二：实现Runnable接口"></a>创建方式二：实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建实现Runnable接口的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">//2.实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//3.创建类的对象</span></span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        <span class="comment">//4.④将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(m1);</span><br><span class="line">        <span class="comment">//5.⑤通过Thread类的对象调用start()</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(thread).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="两种创建方式的比较"><a href="#两种创建方式的比较" class="headerlink" title="两种创建方式的比较"></a>两种创建方式的比较</h3><p>优先使用实现Runnable的方式</p><p>原因：1.实现的方式没有类的单继承性的限制</p><p>​2. 实现的方式更适合处理多个线程共享数据的情况</p><p>联系：Thread类本身也实现了Runnable接口</p><p>相同点：两种方式都需要重写run()方法，将线程执行的逻辑写在了run()方法中</p><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p><img src="https://s4.ax1x.com/2022/02/23/bCV2Se.png" alt="线程生命周期"></p><h3 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h3><p>场景： 多个窗口进行售票</p><ol><li><p>问题一：卖票过程中，出现了重票、错票问题—————线程安全问题</p></li><li><p>原因：某个线程操作车票输出尚未完成时，其他线程也进入操作车票的环节</p></li><li><p>解决方法：添加同步锁，当线程a在操作车票输出的环节，其他线程不能进入，直到线程a操作完成后，其他线程才能进入。这种情况下即使线程a出现阻塞或休眠，也不能改变。</p></li></ol><p>方式一：同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line"><span class="comment">//需要被同步的代码(操作共享数据的代码)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步代码块格式说明：</p><p>①操作共享数据的代码，即为需要被同步的代码 (只能包含需要的代码)</p><p>②共享数据：多个线程共同操作的变量  </p><p>③同步监视器：锁，任何一个类的对象都可以充当锁的角色<br>   唯一的要求是：多个线程必须共用同一个锁</p><p>补充：①在实现Runnable接口创建多线程的方式中，可以考虑使用this充当同步监视器，在此方式中只创建了一个对象。</p><p>​           ②在继承Thread类创建多线程的方式中，要谨慎考虑使用this充当同步监视器，在此方式中创建了多个对象。可以考虑使用当前类充当同步监视器 Windows.class</p><p>因此能否使用this取决于当前方式中创建的对象是否唯一，即使用的同步锁是否为同一个。</p><p>方式二：同步方法</p><p>如果操作共享数据的代码完整的声明在一个方法中，可以将此方法声明为同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            syn();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因本方法使用的是实现Runnable的方式创建多线程，对象只有一个，因此同步监视器是：this</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">syn</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;买票，票号是：&quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            syn();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private synchronized void syn()&#123;//同步监视器s1,s2,s3，此方法不可行</span></span><br><span class="line"><span class="comment">// 本方法使用的是继承Thread类创建多线程，对象有多个，只能将syn()声明为静态，因此同步监视器是 Sell3.class ，即其类本身</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">syn</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;票号：&quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同步方法总结：①同步方法依然涉及同步监视器，只是不需要显式声明。</p><p>​   ②非静态的同步方法，同步监视器是this</p><p>​                           ③静态的同步方法，同步监视器是当前类本身  类.class</p><ol start="4"><li><p>线程同步的方式优缺点</p><p>优点：解决了线程安全的问题</p><p>缺点：在同步代码块内只有一个线程，其余线程在外等待。实际上内部成了单线程，效率较低</p></li></ol><h3 id="线程的死锁问题"><a href="#线程的死锁问题" class="headerlink" title="线程的死锁问题"></a>线程的死锁问题</h3><ol><li><p>概念：不同线程分别占用对方所需的同步资源，都在等待对方放弃已有的同步资源，造成线程的死锁。</p></li><li><p>说明：出现死锁后，不会抛异常，不会出现提示，只是说所有线程都处于阻塞状态，无法继承运行</p></li><li><p>解决方法：减少同步资源的定义、避免嵌套定义、专门的算法</p></li></ol><h3 id="lock锁"><a href="#lock锁" class="headerlink" title="lock锁"></a>lock锁</h3><p>解决线程安全的方式之三 lock锁  –jdk5.0新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tick</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//2.调用lock()方法</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;票号：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁的方法</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ol><li>synchronized 和 lock 的异同？</li></ol><p>相同：二者都可以解决线程安全问题</p><p>不同：①synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器</p><p>​②Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()）</p><ol start="2"><li><p>优先使用顺序：</p><p>Lock  —&gt;  同步代码块（已经进入了方法体，分配了相应资源）—&gt;同步方法（在方法体之外）</p></li></ol><h3 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h3><ol><li><p>涉及的三个方法：</p><p>wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。对比sleep()方法则其不会自动释放锁</p><p>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</p><p>notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</p></li><li><p>说明：</p><p>wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</p><p>wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。否则，会出现IllegalMonitorStateException异常</p><p>wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                obj.notify();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(number &lt;= <span class="number">100</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//使得调用如下wait()方法的线程进入阻塞状态</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>sleep() 和 wait()的异同？</p><p>相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</p><p>不同点：①两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</p><p>​②调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</p><p>​③关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</p></li></ol><h3 id="创建方式三-实现Callable接口"><a href="#创建方式三-实现Callable接口" class="headerlink" title="创建方式三  实现Callable接口"></a>创建方式三  实现Callable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建Callable接口的一个实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//2.实现call()方法，将此线程需要执行的操作声明在call()方法当中</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//3.创建Callable接口实现类的对象</span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span></span><br><span class="line">       <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(n);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.获取Callable接口中call()方法的返回值</span></span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">sum</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强的方面</p><p>①call()可以有返回值的。</p><p>②call()可以抛出异常，被外面的操作捕获，获取异常的信息</p><p>③Callable是支持泛型的</p><h3 id="创建方式四-使用线程池"><a href="#创建方式四-使用线程池" class="headerlink" title="创建方式四 使用线程池"></a>创建方式四 使用线程池</h3><p>​JDK 5.0起提供了线程池相关API：ExecutorService 和 Executors</p><ol><li><p>优点：①提高响应速度（减少了创建新线程的时间） </p><p>②降低资源消耗（重复利用线程池中线程，不需要每次都创建）③便于线程管理 </p><p>corePoolSize：核心池的大小</p><p>maximumPoolSize：最大线程数</p><p>keepAliveTime：线程没有任务时最多保持多长时间后会终止</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.提供指定线程数量的线程池</span></span><br><span class="line">        <span class="comment">//ExecutorService是接口没有对象，这里实际上体现的是多态</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">service1</span> <span class="operator">=</span> (ThreadPoolExecutor) service;<span class="comment">//向下强转类型</span></span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line"><span class="comment">//        System.out.println(service.getClass());此方法返回了service所创建的类 即ThreadPoolExecutor</span></span><br><span class="line"><span class="comment">//        service1.setCorePoolSize(15);</span></span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime()</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">Number</span>());<span class="comment">//适合使用于Runnable</span></span><br><span class="line"><span class="comment">//        service.submit();//适合使用于Callable</span></span><br><span class="line">        <span class="comment">//3.关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Java常用类"><a href="#Java常用类" class="headerlink" title="Java常用类"></a>Java常用类</h2><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><p>String：字符串，使用一对“ ”表示</p><ol><li><p>String是一个final类，代表不可被继承</p></li><li><p>String实现了Serializable接口：表示字符串是支持序列化的</p><p>String实现了Comparable接口：表示String可以比较大小</p></li><li><p>String内部定义了final char[]  value用于存储字符串数据</p></li><li><p>String：代表不可变的字符序列。简称：不可变性</p></li></ol><p>​①当调用String的replace()方法修改指定字符或者字符串时，也需要重新指定内存区域赋值</p><p>​②凡是涉及到String变量内容的改变，实际上都是在方法区中重新构造的地址，对原先的地址值不影响</p><ol start="5"><li>通过字面量的方式(区别于new)给一个字符串赋值，此时的字符串声明在字符串常量池中。</li><li>字符串常量池中是不会存储相同内容的字符串</li><li>String类的相关面试题总结<br>①常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。<br>②只要其中有一个是变量，结果就在堆中。<br>③如果拼接的结果调用intern()方法，返回值就在常量池中</li><li>与StringBuffer、StringBuilder之间的转换</li></ol><p>①String –&gt;StringBuffer、StringBuilder：调用StringBuffer、StringBuilder的构造器</p><p>②StringBuffer、StringBuilder –&gt;String ；String：一种是调用String的构造器，一种是StringBuffer、StringBuilder的toString()；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String的实例化方式</span></span><br><span class="line"><span class="comment">//方式一：通过字面量定义的方式</span></span><br><span class="line"><span class="comment">//此时的s1的数据声明在方法区的字符串常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> ”<span class="number">11</span>“;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：通过new + 构造器的方式</span></span><br><span class="line"><span class="comment">//此时的s2保存的地址值是数据在堆空间创建后对应的地址值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;s2&quot;</span>)</span><br><span class="line">            </span><br><span class="line">  <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;1122&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;11&quot;</span> + <span class="string">&quot;22&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s1 + <span class="string">&quot;22p&quot;</span>;</span><br><span class="line">    </span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">        System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//返回值得到的s8使用的常量值中已经存在的“javaEEhadoop”</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s8</span> <span class="operator">=</span> s6.intern();</span><br><span class="line">        System.out.println(s3 == s8);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>补充：String s &#x3D; new String(“abc”)；在内存中创建了两个对象（一个是堆空间中的new结构，一个是char[ ]对应的常量池中的数据 ”abc“</p><h4 id="String类的相关方法"><a href="#String类的相关方法" class="headerlink" title="String类的相关方法"></a>String类的相关方法</h4><p>int length()：返回字符串的长度： return value.length</p><p>char charAt(int index)： 返回某索引处的字符return value[index]</p><p>boolean isEmpty()：判断是否是空字符串：return value.length &#x3D;&#x3D; 0</p><p>String toLowerCase()：将 String 中的所有字符转换为小写</p><p>String toUpperCase()：将 String 中的所有字符转换为大写</p><p>String trim()：返回字符串的副本，忽略前导空白和尾部空白</p><p>boolean equals(Object obj)：比较字符串的内容是否相同<br>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</p><p>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</p><p>int compareTo(String anotherString)：比较两个字符串的大小</p><p>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</p><p>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</p><p>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</p><p>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</p><p>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</p><p>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</p><p>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</p><p>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</p><p>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</p><p>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</p><p>注：indexOf和lastIndexOf方法如果未找到都是返回-1</p><p>替换：<br>String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</p><p>String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</p><p>String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</p><p>String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</p><p>匹配:<br>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。<br>切片：<br>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</p><p>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">      <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;AbC&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abf&quot;</span>);</span><br><span class="line">      System.out.println(s1.compareTo(s2));<span class="comment">//涉及到字符串排序</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;1234567&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s7.substring(<span class="number">2</span>);<span class="comment">//234567</span></span><br><span class="line">      System.out.println(s3);</span><br><span class="line">      System.out.println(s4);</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s7.substring(<span class="number">2</span>, <span class="number">5</span>);<span class="comment">//345</span></span><br><span class="line">      System.out.println(s5);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> s1.toLowerCase();</span><br><span class="line">      System.out.println(s6);<span class="comment">//s1不可变的，仍然为原来的字符串 ”AbC“</span></span><br><span class="line">      System.out.println(s6);<span class="comment">//改成小写以后的字符串 ”abc“</span></span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> <span class="string">&quot;   he  llo   world   &quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">s8</span> <span class="operator">=</span> s7.trim();</span><br><span class="line">      System.out.println(<span class="string">&quot;-&quot;</span> + s7 + <span class="string">&quot;-&quot;</span>);<span class="comment">//&quot;-   he  llo   world   -&quot;;</span></span><br><span class="line">      System.out.println(<span class="string">&quot;-&quot;</span> + s8 + <span class="string">&quot;-&quot;</span>);<span class="comment">//&quot;-he  llo   world-&quot;;</span></span><br></pre></td></tr></table></figure><h4 id="String类与字符数组转换"><a href="#String类与字符数组转换" class="headerlink" title="String类与字符数组转换"></a>String类与字符数组转换</h4><ol><li>String 与 char[ ] 之间的转换</li></ol><p>​①String –&gt; char[ ]:调用string的toCharArray()；</p><p>​②char[ ]  –&gt; String ; 调用String的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line"><span class="comment">//String --&gt; char[]</span></span><br><span class="line"><span class="type">char</span>[] charA = a.tocharArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">//char[ ]  --&gt; String</span></span><br><span class="line"><span class="type">char</span>[] a = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(a);    </span><br></pre></td></tr></table></figure><ol start="2"><li>String 与 byte[ ] 之间的转换</li></ol><p>​①编码：String –&gt; byte[ ]:调用string的getBytes()；</p><p>​②解码：byte[ ]  –&gt; String ;  调用String的构造器</p><p>​要求：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line"><span class="comment">//String --&gt; byte[ ]</span></span><br><span class="line"><span class="type">byte</span>[] <span class="type">byte</span> = s.getBytes();</span><br><span class="line"></span><br><span class="line"><span class="comment">//byte[ ]  --&gt; String</span></span><br><span class="line"><span class="type">String</span> <span class="variable">byte1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="type">byte</span>)；<span class="comment">//使用默认的字符集，进行解码</span></span><br></pre></td></tr></table></figure><h3 id="StringBuffer和StringBuilder类"><a href="#StringBuffer和StringBuilder类" class="headerlink" title="StringBuffer和StringBuilder类"></a>StringBuffer和StringBuilder类</h3><ol><li><em><strong>String 、StringBuffer、StringBuilder三者的异同</strong></em></li></ol><p>区别：</p><p>String：不可变的字符序列；</p><p>StringBuffer：可变的字符序列；线程安全，但效率较低</p><p>StringBuilder：可变的字符序列；jdk5.0新增，但线程不安全，效率较高 </p><p>相同点：三者的底层结构都是使用char[ ]数组进行储存</p><p><strong>对比String、StringBuffer、StringBuilder三者的效率：从高到低排列：StringBuilder &gt; StringBuffer &gt; String</strong></p><p><strong>StringBuffer、StringBuilder底层默认扩容是 原来容量*2 + 2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码分析：</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();<span class="comment">//char[] value = new char[0];</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();<span class="comment">//char[] value = new char[16];底层创建了一个长度是16的数组。</span></span><br><span class="line">    System.out.println(sb1.length());<span class="comment">//</span></span><br><span class="line">    sb1.append(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//value[0] = &#x27;a&#x27;;</span></span><br><span class="line">    sb1.append(<span class="string">&#x27;b&#x27;</span>);<span class="comment">//value[1] = &#x27;b&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[&quot;abc&quot;.length() + 16];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//问题1. System.out.println(sb2.length());//3</span></span><br><span class="line">    <span class="comment">//问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。</span></span><br><span class="line"><span class="comment">//默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。</span></span><br><span class="line"><span class="comment">// 指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>相关的方法</p><p>StringBuffer的常用方法：</p><p>StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接</p><p>StringBuffer delete(int start,int end)：删除指定位置的内容</p><p>StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</p><p>StringBuffer insert(int offset, xxx)：在指定位置插入xxx</p><p>StringBuffer reverse() ：把当前字符序列逆转</p><p>public int indexOf(String str)</p><p>public String substring(int start,int end):返回一个从start开始到end索引结束的左闭右开区间的子字符串</p><p>public int length()</p><p>public char charAt(int n )</p><p>public void setCharAt(int n ,char ch)</p></li></ol><p>总结：增：append(xxx)</p><p>​            删：delete(int start,int end)</p><p>​改：setCharAt(int n ,char ch) &#x2F; replace(int start, int end, String str)</p><p>​查：charAt(int n )</p><p>​插：insert(int offset, xxx)</p><p>​长度：length();</p><p>​遍历：for() + charAt() &#x2F; toString()</p><h4 id="String相关的算法题"><a href="#String相关的算法题" class="headerlink" title="String相关的算法题"></a>String相关的算法题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.模拟一个trim方法，去除字符串两端的空格。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2.将一个字符串进行反转。将字符串中指定部分进行反转。比如将“abcdefg”反转为”abfedcg”</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3.获取一个字符串在另一个字符串中出现的次数。</span></span><br><span class="line"><span class="comment">      比如：获取“ab”在 “cdabkkcadkabkebfkabkskab”    </span></span><br><span class="line"><span class="comment">      中出现的次数</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">4.获取两个字符串中最大相同子串。比如：</span></span><br><span class="line"><span class="comment">   str1 = &quot;abcwerthelloyuiodef“;str2 = &quot;cvhellobnm&quot;//10</span></span><br><span class="line"><span class="comment">   提示：将短的那个串进行长度 依次递减的子串与较长  </span></span><br><span class="line"><span class="comment">   的串比较。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.对字符串中字符进行自然顺序排序。&quot;abcwerthelloyuiodef&quot;</span></span><br><span class="line"><span class="comment">提示：</span></span><br><span class="line"><span class="comment">1）字符串变成字符数组。</span></span><br><span class="line"><span class="comment">2）对数组排序，选择，冒泡，Arrays.sort(str.toCharArray());</span></span><br><span class="line"><span class="comment">3）将排序后的数组变成字符串。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第1题</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">myTrim</span><span class="params">(String str)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (str != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 用于记录从前往后首次索引位置不是空格的位置的索引</span></span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> str.length() - <span class="number">1</span>;<span class="comment">// 用于记录从后往前首次索引位置不是空格的位置的索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (start &lt; end &amp;&amp; str.charAt(start) == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">start++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (start &lt; end &amp;&amp; str.charAt(end) == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str.charAt(start) == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> str.substring(start, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第2题</span></span><br><span class="line"><span class="comment">// 方式一：</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">reverse1</span><span class="params">(String str, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;<span class="comment">// start:2,end:5</span></span><br><span class="line"><span class="keyword">if</span> (str != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="type">char</span>[] charArray = str.toCharArray();</span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> charArray[i];</span><br><span class="line">charArray[i] = charArray[j];</span><br><span class="line">charArray[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">reverse2</span><span class="params">(String str, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> str.substring(<span class="number">0</span>, start);<span class="comment">// ab</span></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> end; i &gt;= start; i--) &#123;</span><br><span class="line">newStr += str.charAt(i);</span><br><span class="line">&#125; <span class="comment">// abfedc</span></span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line">newStr += str.substring(end + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> newStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三：推荐 （相较于方式二做的改进）</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">reverse3</span><span class="params">(String str, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;<span class="comment">// ArrayList list = new ArrayList(80);</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str.length());</span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">s.append(str.substring(<span class="number">0</span>, start));<span class="comment">// ab</span></span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> end; i &gt;= start; i--) &#123;</span><br><span class="line">s.append(str.charAt(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.</span></span><br><span class="line">s.append(str.substring(end + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.</span></span><br><span class="line"><span class="keyword">return</span> s.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReverse</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> reverse3(str, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">System.out.println(str1);<span class="comment">// abfedcg</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第3题</span></span><br><span class="line"><span class="comment">// 判断str2在str1中出现的次数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(String mainStr, String subStr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (mainStr.length() &gt;= subStr.length()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// while((index = mainStr.indexOf(subStr)) != -1)&#123;</span></span><br><span class="line"><span class="comment">// count++;</span></span><br><span class="line"><span class="comment">// mainStr = mainStr.substring(index + subStr.length());</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 改进：</span></span><br><span class="line"><span class="keyword">while</span> ((index = mainStr.indexOf(subStr, index)) != -<span class="number">1</span>) &#123;</span><br><span class="line">index += subStr.length();</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;cdabkkcadkabkebfkabkskab&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> getCount(str1, str2);</span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyTrim</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;   a   &quot;</span>;</span><br><span class="line"><span class="comment">// str = &quot; &quot;;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> myTrim(str);</span><br><span class="line">System.out.println(<span class="string">&quot;---&quot;</span> + newStr + <span class="string">&quot;---&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第4题</span></span><br><span class="line"><span class="comment">// 如果只存在一个最大长度的相同子串</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMaxSameSubString</span><span class="params">(String str1, String str2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (str1 != <span class="literal">null</span> &amp;&amp; str2 != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">maxStr</span> <span class="operator">=</span> (str1.length() &gt; str2.length()) ? str1 : str2;</span><br><span class="line"><span class="type">String</span> <span class="variable">minStr</span> <span class="operator">=</span> (str1.length() &gt; str2.length()) ? str2 : str1;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> minStr.length();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;<span class="comment">// 0 1 2 3 4 此层循环决定要去几个字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = len - i; y &lt;= len; x++, y++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (maxStr.contains(minStr.substring(x, y))) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> minStr.substring(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果存在多个长度相同的最大相同子串</span></span><br><span class="line"><span class="comment">// 此时先返回String[]，后面可以用集合中的ArrayList替换，较方便</span></span><br><span class="line"><span class="keyword">public</span> String[] getMaxSameSubString1(String str1, String str2) &#123;</span><br><span class="line"><span class="keyword">if</span> (str1 != <span class="literal">null</span> &amp;&amp; str2 != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">maxString</span> <span class="operator">=</span> (str1.length() &gt; str2.length()) ? str1 : str2;</span><br><span class="line"><span class="type">String</span> <span class="variable">minString</span> <span class="operator">=</span> (str1.length() &gt; str2.length()) ? str2 : str1;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> minString.length();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = len - i; y &lt;= len; x++, y++) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">subString</span> <span class="operator">=</span> minString.substring(x, y);</span><br><span class="line"><span class="keyword">if</span> (maxString.contains(subString)) &#123;</span><br><span class="line">sBuffer.append(subString + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sBuffer);</span><br><span class="line"><span class="keyword">if</span> (sBuffer.length() != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">String[] split = sBuffer.toString().replaceAll(<span class="string">&quot;,$&quot;</span>, <span class="string">&quot;&quot;</span>).split(<span class="string">&quot;\\,&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> split;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果存在多个长度相同的最大相同子串：使用ArrayList</span></span><br><span class="line"><span class="comment">//public List&lt;String&gt; getMaxSameSubString1(String str1, String str2) &#123;</span></span><br><span class="line"><span class="comment">//if (str1 != null &amp;&amp; str2 != null) &#123;</span></span><br><span class="line"><span class="comment">//List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span></span><br><span class="line"><span class="comment">//String maxString = (str1.length() &gt; str2.length()) ? str1 : str2;</span></span><br><span class="line"><span class="comment">//String minString = (str1.length() &gt; str2.length()) ? str2 : str1;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int len = minString.length();</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="comment">//for (int x = 0, y = len - i; y &lt;= len; x++, y++) &#123;</span></span><br><span class="line"><span class="comment">//String subString = minString.substring(x, y);</span></span><br><span class="line"><span class="comment">//if (maxString.contains(subString)) &#123;</span></span><br><span class="line"><span class="comment">//list.add(subString);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (list.size() != 0) &#123;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return list;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//return null;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetMaxSameSubString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcwerthelloyuiodef&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;cvhellobnmiodef&quot;</span>;</span><br><span class="line">String[] strs = getMaxSameSubString1(str1, str2);</span><br><span class="line">System.out.println(Arrays.toString(strs));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第5题</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSort</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abcwerthelloyuiodef&quot;</span>;</span><br><span class="line"><span class="type">char</span>[] arr = str.toCharArray();</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">System.out.println(newStr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="JVM中字符串常量池位置"><a href="#JVM中字符串常量池位置" class="headerlink" title="JVM中字符串常量池位置"></a>JVM中字符串常量池位置</h3><ol><li>jdk1.6：字符串常量池储存在方法区(永久区)</li><li>jdk1.7：字符串常量池储存在堆空间</li><li>fangquqjdk1.8：字符串常量池储存在方法区(元空间)</li></ol><h3 id="JDK-8之前的日期时间的API"><a href="#JDK-8之前的日期时间的API" class="headerlink" title="JDK 8之前的日期时间的API"></a>JDK 8之前的日期时间的API</h3><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><p>Java.util.Date类（父类）</p><p>​|—java.sql.Date类（子类）</p><ol><li>两个构造器的使用</li></ol><p>​①Date()；创建一个对应当前时间的Date的对象.(时间戳)</p><p>​②Date()；创建指定毫秒数的Date的对象</p><ol start="2"><li>两个方法的使用</li></ol><p>​①toString()；&#x2F;&#x2F;显示当前的年、月、日、分、秒</p><p>​②getTime()；&#x2F;&#x2F;获取当前对象对应的毫秒数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//构造器1：Date()</span></span><br><span class="line">         <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(date.toString());<span class="comment">//Fri Feb 11 16:58:08 CST 2022</span></span><br><span class="line">        System.out.println(date.getTime());<span class="comment">//1644569910695</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器2：Date()</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1644569910695L</span>);</span><br><span class="line">        System.out.println(date1.toString());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建java.sql.Date的对象</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="number">1644569910695L</span>)；</span><br><span class="line">        system.out.println(date2.toString());</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//将java.util.Date 对象转换为java.sql.Date 的对象</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        java.sql.<span class="type">Date</span> <span class="variable">date4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(date3.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>java.sql.Date对应着数据库中的日期类型的变量</li></ol><p>​①实例化对象</p><p>​②将java.util.Date 对象转换为java.sql.Date 的对象</p><h4 id="SimpleDateFormat类"><a href="#SimpleDateFormat类" class="headerlink" title="SimpleDateFormat类"></a>SimpleDateFormat类</h4><p>SimpleDateFormat是对日期Date类的格式化和解析</p><ol><li>实例化SimpleDateFormat ：</li></ol><p>​一般建议调用带参数的构造器</p><ol start="2"><li>格式化</li></ol><p>​日期 —&gt;字符串  ；调用format()方法</p><ol start="3"><li>解析</li></ol><p>​格式化的逆过程，字符串 —&gt; 日期；调用parse()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//*************按照指定的方式格式化和解析：调用带参的构造器*****************</span></span><br><span class="line">     <span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">     <span class="comment">//格式化</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">format1</span> <span class="operator">=</span> sdf1.format(date);</span><br><span class="line">     System.out.println(format1);<span class="comment">//2019-02-18 11:48:27</span></span><br><span class="line">     <span class="comment">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),</span></span><br><span class="line">     <span class="comment">//否则，抛异常</span></span><br><span class="line">     <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> sdf1.parse(<span class="string">&quot;2020-02-18 11:48:27&quot;</span>);</span><br><span class="line">     System.out.println(date2);</span><br></pre></td></tr></table></figure><h4 id="Calendar-日历类-抽象类"><a href="#Calendar-日历类-抽象类" class="headerlink" title="Calendar 日历类(抽象类)"></a>Calendar 日历类(抽象类)</h4><ol><li>实例化</li></ol><p>​①创建其子类(GregorianCalendar)的对象</p><p>​②调用其静态方法getInstance()</p><ol start="2"><li>常用方法</li></ol><p>​get()、set()、add()</p><p>​getTime()：日历类—&gt;Date</p><p>​setTime()：Date—&gt; 日历类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get()</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">     <span class="comment">//set()</span></span><br><span class="line">     calendar.set(Calendar.DAY_OF_MONTH,<span class="number">22</span>);</span><br><span class="line">     day = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">     <span class="comment">//add()</span></span><br><span class="line">     calendar.add(Calendar.DAY_OF_MONTH,-<span class="number">3</span>);</span><br><span class="line">     day = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//getTime():日历类---&gt;Date</span></span><br><span class="line">     <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">     System.out.println(time);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//setTime()：Date---&gt;日历类</span></span><br><span class="line">     <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">     calendar.setTime(date);</span><br><span class="line">     day = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">     System.out.println(day);</span><br></pre></td></tr></table></figure><h3 id="JDK8-时间API"><a href="#JDK8-时间API" class="headerlink" title="JDK8  时间API"></a>JDK8  时间API</h3><h4 id="localDate、localeTime、localDateTime类"><a href="#localDate、localeTime、localDateTime类" class="headerlink" title="localDate、localeTime、localDateTime类"></a>localDate、localeTime、localDateTime类</h4><ol><li><p>LocalDateTime相较于LocalDate、LocalTime，使用频率要高</p></li><li><p>类似于Calendar</p></li><li><p>常用方法</p></li></ol><p>​①now():获取当前的日期、时间、日期+时间</p><p>​②of():设置指定的年、月、日、时、分、秒。没有偏移量</p><p>​     ③getXxx()：获取相关的属性</p><p>​     ④withXxx():设置相关的属性  体现不可变性</p><p>​①、②都是用于实例化对象  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//now():获取当前的日期、时间、日期+时间</span></span><br><span class="line">      <span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">      <span class="type">LocalTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span></span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">localDateTime1</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">43</span>);</span><br><span class="line">      System.out.println(localDateTime1);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//getXxx()：获取相关的属性</span></span><br><span class="line">      System.out.println(localDateTime.getDayOfMonth());</span><br><span class="line">      System.out.println(localDateTime.getDayOfWeek());</span><br><span class="line">  </span><br><span class="line">      <span class="comment">//体现不可变性</span></span><br><span class="line">      <span class="comment">//withXxx():设置相关的属性</span></span><br><span class="line">      <span class="type">LocalDate</span> <span class="variable">localDate1</span> <span class="operator">=</span> localDate.withDayOfMonth(<span class="number">22</span>);</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime3</span> <span class="operator">=</span> localDateTime.plusMonths(<span class="number">3</span>);<span class="comment">//当前时间加上</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime4</span> <span class="operator">=</span> localDateTime.minusDays(<span class="number">6</span>);<span class="comment">//当前时间减去</span></span><br><span class="line">      System.out.println(localDate);</span><br><span class="line">      System.out.println(localDate1);</span><br></pre></td></tr></table></figure><h4 id="Instant-瞬时"><a href="#Instant-瞬时" class="headerlink" title="Instant 瞬时"></a>Instant 瞬时</h4><p>instant类似于java.util.Date类</p><ol><li>实例化</li><li>常用方法</li></ol><p>​①now():获取本初子午线对应的标准时间</p><p>​②atOffset():添加时间的偏移量</p><p>​③toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  —&gt; 类似Date类的getTime()</p><p>​④ofEpochMilli():通过给定的毫秒数，获取Instant实例  –&gt;类似Date(long millis)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//now():</span></span><br><span class="line">      <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">      System.out.println(instant);<span class="comment">//2019-02-18T07:29:41.719Z</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//添加时间的偏移量</span></span><br><span class="line">      <span class="type">OffsetDateTime</span> <span class="variable">offsetDateTime</span> <span class="operator">=</span> instant.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">      System.out.println(offsetDateTime);<span class="comment">//2019-02-18T15:32:50.611+08:00</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//toEpochMilli():</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">milli</span> <span class="operator">=</span> instant.toEpochMilli();</span><br><span class="line">      System.out.println(milli);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//ofEpochMilli():</span></span><br><span class="line">      <span class="type">Instant</span> <span class="variable">instant1</span> <span class="operator">=</span> Instant.ofEpochMilli(<span class="number">1550475314878L</span>);</span><br><span class="line">      System.out.println(instant1);</span><br></pre></td></tr></table></figure><h4 id="DateTimeFormat类"><a href="#DateTimeFormat类" class="headerlink" title="DateTimeFormat类"></a>DateTimeFormat类</h4><ol><li><p>用于:格式化或解析日期、时间</p></li><li><p>类似于SimpleDateFormat</p></li><li><p>实例化对象 多种方式</p></li></ol><p>方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</p><p>方式二：本地化相关的格式。如：ofLocalizedDateTime()</p><p>方式三：（最常用的方式）自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        方式一：</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class="line">        <span class="comment">//格式化:日期--&gt;字符串</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> formatter.format(localDateTime);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        System.out.println(str1);<span class="comment">//2019-02-18T15:42:18.797</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析：字符串 --&gt;日期</span></span><br><span class="line">        <span class="type">TemporalAccessor</span> <span class="variable">parse</span> <span class="operator">=</span> formatter.parse(<span class="string">&quot;2019-02-18T15:42:18.797&quot;</span>);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        方式二：</span></span><br><span class="line"><span class="comment">//        FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter1</span> <span class="operator">=</span> DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> formatter1.format(localDateTime);</span><br><span class="line">        System.out.println(str2);<span class="comment">//2019年2月18日 下午03时47分16秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      本地化相关的格式。如：ofLocalizedDate()</span></span><br><span class="line"><span class="comment">//      FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter2</span> <span class="operator">=</span> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> formatter2.format(LocalDate.now());</span><br><span class="line">        System.out.println(str3);<span class="comment">//2019-2-18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      方式三：</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter3</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> formatter3.format(LocalDateTime.now());</span><br><span class="line">        System.out.println(str4);<span class="comment">//2019-02-18 03:52:09</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        <span class="type">TemporalAccessor</span> <span class="variable">accessor</span> <span class="operator">=</span> formatter3.parse(<span class="string">&quot;2019-02-18 03:52:09&quot;</span>); </span><br></pre></td></tr></table></figure><h3 id="Java比较器"><a href="#Java比较器" class="headerlink" title="Java比较器"></a>Java比较器</h3><ol><li><p>一般情况下对象只能用 &#x3D;&#x3D; 或 !&#x3D; 进行比较，不能使用其他运算符比较，但在特殊情况下，需要对多个对象进行排序，即需要比较对象的大小，通过使用Comparable和Comparator接口进行比较</p></li><li><p>Comparable接口：使用的是自然排序</p><p>①像String、包装类等实现了Comparable接口，重写了compareTo(obj)方法，给出了比较两个对象大小的方式。</p><p>②像String、包装类重写compareTo()方法以后，进行了从小到大的排列</p></li></ol><p>​       ③重写compareTo(obj)的规则：</p><p>​如果当前对象this大于形参对象obj，则返回正整数，</p><p>​如果当前对象this小于形参对象obj，则返回负整数，</p><p>​如果当前对象this等于形参对象obj，则返回零。</p><p>​   ④对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法，在compareTo(obj)方法中指明如何排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Product)&#123;</span><br><span class="line">            <span class="type">Product</span> <span class="variable">p</span> <span class="operator">=</span> (Product)o;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.price &gt; p.price)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.price &lt; p.price)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="built_in">this</span>.name.compareTo(p.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;传入的数据类型不符合&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Comparator接口：使用的是定制排序</li></ol><p>​①使用场景： 元素没有实现java.lang.Comparable接口又不方便修改代码 或 实现了java.lang.Comparable接口但排序规则不适合当前的操作</p><p>​②重写compare(Object o1,Object o2)方法规则，比较o1和o2的大小：</p><p>​如果方法返回正整数，则表示o1大于o2；</p><p>​如果返回0，表示相等；</p><p>​返回负整数，表示o1小于o2。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定制排序</span></span><br><span class="line">    <span class="comment">//从低到高的方式排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;CC&quot;</span>,<span class="string">&quot;KK&quot;</span>,<span class="string">&quot;MM&quot;</span>,<span class="string">&quot;GG&quot;</span>,<span class="string">&quot;JJ&quot;</span>,<span class="string">&quot;DD&quot;</span>&#125;;</span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> String &amp;&amp; o2 <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> (String)o1;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> (String)o2;</span><br><span class="line">                    <span class="keyword">return</span> -a.compareTo(b);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;传入的数据类型不符合&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Comparable接口与Comparator的使用的对比：</p><p>①Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。</p><p>②Comparator接口属于临时性的比较。</p></li></ol><h3 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h3><h4 id="System-类"><a href="#System-类" class="headerlink" title="System 类"></a>System 类</h4><ol><li>其内部的成员变量和成员方法都是static的，可以之间通过类进行调用</li><li>相关方法</li></ol><p>​①native long currentTimeMillis()返回当前时间</p><p>​②void exit(int status)：退出程序 status为0 正常退出 status不为0 异常退出 </p><p>​③void gc()：垃圾回收方法，守护线程</p><p>​④String getProperty(String key)：获取系统相关的属性</p><p><img src="https://s4.ax1x.com/2022/02/23/bCVTFf.png" alt="相关属性"></p><h4 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h4><p><img src="https://s4.ax1x.com/2022/02/23/bCZpkV.png" alt="Math类"></p><h4 id="BigInteger-和-BIgDecimal-类"><a href="#BigInteger-和-BIgDecimal-类" class="headerlink" title="BigInteger 和 BIgDecimal 类"></a>BigInteger 和 BIgDecimal 类</h4><p>BigInteger： java.math包的BigInteger可以表示不可变的任意精度的整数。BigInteger 提供 所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。</p><p><img src="https://s4.ax1x.com/2022/02/23/bCZeTx.png" alt="常用方法"></p><p>BIgDecimal：BigDecimal类支持不可变的、任意精度的有符号十进制定点数。</p><p><img src="https://s4.ax1x.com/2022/02/23/bCZNAP.png" alt="常用方法"></p><hr><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><ol><li>概念：类的对象只有有限个，确定的</li><li>当需要定义一组常量时，可以考虑使用枚举类</li><li>当枚举类中只有一个对象时可以作为单例模式的实现方式</li></ol><p>​①自定义枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义枚举类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span>&#123;</span><br><span class="line">    <span class="comment">//1.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String season;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String season,String seasonDes)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.season = season;</span><br><span class="line">        <span class="built_in">this</span>.seasonDes = seasonDes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.提供当前枚举类的多个对象：public static final的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;万物复苏&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取枚举类对象的属性</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeason</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> season;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//4.提供toString()</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> + <span class="string">&quot;season=&#x27;&quot;</span> + season + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, seasonDes=&#x27;&quot;</span> + seasonDes + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​②使用enum关键字定义枚举类：此时定义的枚举类默认继承于java.lang.Enum类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//使用enum关键字创建枚举类</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season1</span>&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;万物复苏&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String season;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season1</span><span class="params">(String season,String seasonDes)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.season = season;</span><br><span class="line">        <span class="built_in">this</span>.seasonDes = seasonDes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.获取枚举类对象的属性</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeason</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> season;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Enum类中的常用方法：</p><p>values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</p><p>valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。</p><p>toString()：返回当前枚举类对象常量的名称</p></li><li><p>使用enum关键字定义的枚举类实现接口的情况</p><p>情况一：实现接口，在enum类中实现抽象方法</p><p>情况二：让枚举类的对象分别实现接口中的抽象方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况二</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season1</span> <span class="keyword">implements</span> <span class="title class_">info</span>&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;万物复苏&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是春天&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是夏天&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解(Annotation)"></a>注解(Annotation)</h3><ol><li>概念：代码里的特殊标记，在jdk5.0新增</li></ol><p>​框架 &#x3D; 注解 + 反射 + 设计模式</p><ol start="2"><li>使用场景</li></ol><p>​①生成文档相关的注解</p><p>​②在编译时进行格式检查(JDK内置的三个基本注解)</p><p>​@Override: 限定重写父类方法, 该注解只能用于方法</p><p>​@Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择</p><p>​@SuppressWarnings: 抑制编译器警告</p><p>​③跟踪代码依赖性，实现替代配置文件功能</p><ol start="3"><li><p>自定义注解(参照@SuppressWarnings定义)</p><p>① 注解声明为：@interface</p><p>② 内部定义成员，通常使用value表示</p><p>③ 可以指定成员的默认值，使用default定义</p><p>④ 如果自定义注解没有成员，表明是一个标识作用。</p></li></ol><p>​说明：如果注解有成员，在使用注解时，需要指明成员的值；</p><p>​自定义注解必须配上注解的信息处理流程(使用反射)才有意义。</p><p>​        自定义注解通过都会指明两个元注解：Retention、Target</p><ol start="4"><li>jdk5.0新增的4种元注解</li></ol><p>​元注解：对现有的其他注解的定义</p><p>​Retention：指定所修饰的 Annotation 的生命周期：SOURCE\CLASS（默认行为）\RUNTIME</p><p>​            只有声明为RUNTIME生命周期的注解，才能通过反射获取。</p><p>​Target:用于指定被修饰的 Annotation 能用于修饰哪些程序元素</p><p>​Documented:表示所修饰的注解在被javadoc解析时，保留下来。(使用较少)</p><p>​Inherited:被它修饰的 Annotation 将具有继承性。(使用较少)</p><ol start="5"><li><p>jdk8.0新增的注解：可重复注解、类型注解</p><p>可重复注解：① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class</p><p>​② MyAnnotation的Target和Retention等元注解与MyAnnotations相同。</p></li></ol><p>​类型注解：ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明）。</p><p>​ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中。</p><hr><h2 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h2><ol><li>集合、数组都是针对多个数据进行存储的操作，都是java容器。(此时储存的位置都在内存层面，不涉及数据库)</li><li>数组在储存数据方面的特点</li></ol><p>​①数据在初始化完成后，数组的长度就不可再修改</p><p>​②数组定义完成，其元素的类型也就确定了，只能针对相应类型数据进行处理</p><p>​③数组提供的方法有限，对于增删改查等操作不便，效率较低</p><p>​④数组存储数据是有序、可重复的，对于无序、不可重复的数据无法执行</p><ol start="3"><li>java集合分为了Collection接口 和 Map接口 两种体系</li></ol><p>​Collection 单例数据 ：定义了存取一个一个的对象</p><p>​ ①List接口(元素有序、可重复的集合)  –&gt; “动态”数组 </p><p>​主要实现类：ArrayList：作为list接口主要实现类，线程不安全，效率高，底层使用Object[] 存储</p><p>​LinkedList：对于频繁的插入和删除操作，使用LinkList比ArrayList效率更高，底层使用双向链表存储</p><p>​Vector：作为list接口的古老实现类 1.0版本已存在，线程安全，效率较低。底层使用Object[] 存储</p><p>​②set接口(元素无序、不可重复的集合) –&gt; 普通概念上的集合  <strong>考虑处理重复数据可用set接口</strong></p><p>​主要实现类：HashSet：作为Set接口 的主要实现类；线程是不安全的，可以存储null值</p><p>​   –LinkedHashSet：作为HashSet的子类；遍历其内部数据可以按照添加的顺序遍历</p><p>​   TreeSet：可以按照添加对象的指定属性，进行排序（对象必须是属于同一个类）</p><p>​Map 双列数据：保存具有映射关系“key-value”的一对数据 –&gt; y &#x3D; f(x)</p><p>​主要实现类：HashMap：作为Map的主要实现类，线程不安全，效率高，可以存储null的key和value</p><p>​–linkedHashMap：作为HashMap的子类，保证在遍历map元素时，可以按照添加的顺序实现遍历  </p><p>​原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。</p><p>​对于频繁的遍历操作，此类执行效率高于HashMap。</p><p>​TreeMap(其底层使用红黑树)：保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序。</p><p>​Hashtable：作为Map的古老实现类，线程安全，效率低，不可以存储null的key和value</p><p>​–Properties：作为Hashtable的子类，常用于处理配置文件，且key和value都是String类型</p><p>补充：HashMap的底层：数组+链表  （jdk7及之前）  数组+链表+红黑树 （jdk 8）</p><h3 id="Collection接口常用方法"><a href="#Collection接口常用方法" class="headerlink" title="Collection接口常用方法"></a>Collection接口常用方法</h3><p><strong>规则：向Collection接口的实现类的对象添加数据时，要求此数据所在的类必须重写equals()方法</strong></p><ol><li>add(Object e)：将元素e添加到当前集合中</li><li>size() ：获取添加元素的个数</li><li>addAll(Collection c) ：将另一个集合的元素添加到这个集合当中</li><li>clear() ：删除集合内的元素</li><li>isEmpty() ：判断当前集合是否为空 实际上是判断集合的长度是否为0</li><li>contains(Object obj) 判断当前集合是否包含obj</li><li>containsAll(Collection c1) 判断形参c1的所有元素是否都在当前集合中</li><li>remove(Object obj) 移除当前集合中的形参元素</li><li>removeAll(Collection c) 移除当前集合中的另一个集合的所有元素</li><li>retainAll(Collection c) 获取当前集合和形参列表内的集合的共同元素并返回到当前集合</li><li>equals(Object obj) 形参也必须是集合，用于比较两个集合的元素是否相同</li><li>hashCode() 返回当前对象的哈希值</li><li>toArray()：集合—&gt; 数组扩展        数组  —&gt; 集合 ：调用Arrays类的静态方法asList()</li></ol><p>比较特殊的方法 14.iterator()：返回iterator接口的实例，用于遍历集合元素，使用迭代器Iterator接口</p><p>内部方法：1. hasNext() 、 next() 、remove()</p><p>说明：①集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</p><p>​②内部的remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()</p><p>​③Iterator中的remove()方法，在未调用next()之前不可调用remove()方法以及</p><p>​已经调用了remove方法，再调用remove两种情况都会报IllegalStateException。</p><p><img src="https://s4.ax1x.com/2022/02/23/bCZ01g.png" alt="执行原理"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//add(Object e)</span></span><br><span class="line">        c.add(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">        c.add(<span class="number">145</span>);<span class="comment">//自动装箱变成了Integer包装类</span></span><br><span class="line">        <span class="comment">//size() </span></span><br><span class="line">        System.out.println(c.size());</span><br><span class="line">        <span class="comment">//addAll(Collection c) </span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        c1.add(<span class="number">123</span>);</span><br><span class="line">        c1.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.addAll(c1);</span><br><span class="line">        <span class="comment">//clear() </span></span><br><span class="line">        c1.clear();</span><br><span class="line">        <span class="comment">//isEmpty()</span></span><br><span class="line">        System.out.println(c1.isEmpty());</span><br><span class="line"><span class="comment">//罗列部分使用方法 更多位于JavaSenior 06 的list包下 </span></span><br></pre></td></tr></table></figure><hr><h4 id="增强For循环-Foreach"><a href="#增强For循环-Foreach" class="headerlink" title="增强For循环 Foreach"></a>增强For循环 Foreach</h4><ol><li><p>在jdk5.0新增，主要是用于遍历集合、数组。其内部还是调用的迭代器</p></li><li><p>格式： for(集合中元素的类型 局部变量名 : 集合对象){}</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// for(集合中元素的类型 局部变量名 : 集合对象)&#123;&#125;</span><br><span class="line">for( Object obj : c1)&#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h4><h5 id="List接口实现类异同"><a href="#List接口实现类异同" class="headerlink" title="List接口实现类异同"></a>List接口实现类异同</h5><p>ArrayList、LinkedList 和 Vector的异同？</p><p>相同点：三个都是List接口的实现类，存储的数据都是有序的，可重复的。</p><p>不同点：见上方实现类处。</p><p>三者的源码分析：</p><ol><li>ArrayList的源码分析：</li></ol><p>​① jdk 7情况下</p><p>​ArrayList list &#x3D; new ArrayList();&#x2F;&#x2F;底层创建了长度是10的Object[]数组elementData</p><p>​list.add(123);&#x2F;&#x2F;elementData[0] &#x3D; new Integer(123);</p><p>​…</p><p>​list.add(11);&#x2F;&#x2F;如果此次的添加导致底层elementData数组容量不够，则扩容。</p><p>​<strong>默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中</strong></p><p>结论：建议开发中使用带参的构造器：ArrayList list &#x3D; new ArrayList(int capacity)</p><p>​②jdk 8中ArrayList的变化：</p><p>​ArrayList list &#x3D; new ArrayList();&#x2F;&#x2F;底层Object[] elementData初始化为{}.并没有创建长度为10的数组</p><p>​list.add(123);&#x2F;&#x2F;第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</p><p>​后续的添加和扩容操作与jdk 7 无异。</p><p>​③小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。</p><ol start="2"><li>LinkedList的源码分析：</li></ol><p>其中，Node定义为：体现了LinkedList的双向链表的说法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LinkedList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>(); 内部声明了Node类型的first和last属性，默认值为<span class="literal">null</span></span><br><span class="line">...</span><br><span class="line">​list.add(test);<span class="comment">//将test封装到Node中，创建了Node对象。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">   E item;</span><br><span class="line">​     Node&lt;E&gt; next;</span><br><span class="line">​    Node&lt;E&gt; prev;</span><br><span class="line"> Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line"> <span class="built_in">this</span>.item = element;</span><br><span class="line"> <span class="built_in">this</span>.next = next;</span><br><span class="line"> <span class="built_in">this</span>.prev = prev;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Vector的源码分析：jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。<strong>在扩容方面，默认扩容为原来的数组长度的2倍</strong></li></ol><h5 id="List接口常用方法"><a href="#List接口常用方法" class="headerlink" title="List接口常用方法"></a>List接口常用方法</h5><p>oid add(int index, Object ele):在index位置插入ele元素</p><p>boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</p><p>Object get(int index):获取指定index位置的元素</p><p>int indexOf(Object obj):返回obj在集合中首次出现的位置</p><p>int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</p><p>Object remove(int index):移除指定index位置的元素，并返回此元素</p><p>Object set(int index, Object ele):设置指定index位置的元素为ele</p><p>List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</p><p>总结：常用方法</p><p>增：add(Object obj)</p><p>删：remove(int index) &#x2F; remove(Object obj)</p><p>改：set(int index, Object ele)</p><p>查：get(int index)</p><p>插：add(int index, Object ele)</p><p>长度：size()</p><p>遍历：① Iterator迭代器方式    ②增强for循环③ 普通的循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">      list1.add(<span class="number">1</span>);</span><br><span class="line">      list1.add(<span class="number">2</span>);</span><br><span class="line">      list1.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">      list2.add(<span class="number">4</span>);</span><br><span class="line">      list2.add(<span class="number">5</span>);</span><br><span class="line">      list2.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">  list1.add(list2);<span class="comment">//4个元素，这里是将list2所有元素作为一个整体加入list1</span></span><br><span class="line">      list1.addAll(list2);<span class="comment">//6个元素，这里是将list2所有元素分为一个个元素加入list1</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h4><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><p>以HashSet为例，Set接口使用的都是Collections中的方法，HashSet的底层是以数组加链表的结构存储</p><p>要求：①向Set中添加数据，其所在的类一定要重写hashCode() 和 equals() 方法</p><p>​②重写的hashCode() 和 equals() 方法要保存一致性，即相同的对象必须具有相等的散列码</p><ol><li><p>无序性：与随机性不同。存储的数据在底层数组当中并非按照数组索引的顺序添加，而是根据数据的哈希值决定</p></li><li><p>不可重复性：添加的元素按照equals()方法判断时，不能返回true。即相同的元素只能添加一个</p></li><li><p>添加元素的过程：在向HashSet中添加元素a，首先调用元素a所在类的hashcode()方法，计算元素a的哈希值，此哈希值通过某种算法计算出在HashSet底</p><p>   层数组中存放位置（即为索引位置），判断数组此位置上是否已经有元素；如果此位置上无元素，则直接添加，如果此位置上有其他元素(或以链表形式存</p><p>   在的多个元素)，则比较元素a与元素b的hash值，在这种情况下，如果hash值不相同，则元素a添加成功；如果hash值相同，进而调用元素a所在类的</p><p>   equals()方法进行比较：如果返回true，则添加失败，如果返回是false，则添加成功</p><p>对于调用equals()方法比较之后添加成功的元素与已经存在指定索引位置的元素以链表的方式连接存储。</p><p>简称七上八下</p><p>jdk7：元素a放到数组中，指向原来的元素。</p><p>jdk8：原来的元素在数组中，指向元素a。</p></li></ol><h5 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h5><p>LinkedHashSet作为HashSet的子类，在添加数据的同时还维护两个引用，记录了前一个数据 和 后一个数据。</p><p>好处：对于频繁的遍历操作，LinkedHashSet的效率要高于HashSet</p><p><img src="https://s4.ax1x.com/2022/02/23/bCZ4c4.png" alt="底层结构图">TreeSet</p><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><ol><li>向TreeSet添加的数据必须是同一个类</li><li>两种排序方式：自然排序 和 定制排序</li><li>自然排序中，比较两个对象是否相同的标准为：compareTo() 返回0，就不再是equals()。</li><li>定制排序中，比较两个对象是否相同的标准为：compare()返回0，不再是equals().</li></ol><p><img src="https://s4.ax1x.com/2022/02/23/bCZou9.png" alt="二叉树Tree"></p><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><ol><li>对于Map结构的理解</li></ol><p>Map中的key:无序的、不可重复的，使用Set存储所有的key  —&gt; key所在的类要重写equals()和hashCode() （以HashMap为例）</p><p>Map中的value:无序的、可重复的，使用Collection存储所有的value —&gt;value所在的类要重写equals()</p><p>一个键值对：key-value构成了一个Entry对象。</p><p>Map中的entry:无序的、不可重复的，使用Set存储所有的entry</p><h4 id="HashMap的底层实现原理"><a href="#HashMap的底层实现原理" class="headerlink" title="HashMap的底层实现原理"></a>HashMap的底层实现原理</h4><p>以jdk7为例</p><p>①HashMap map &#x3D; new HashMap():</p><p>​在实例化以后，底层创建了长度是16的一维数组Entry[] table。</p><p>​map.put()；。。。。</p><p>​map.put(key1,value1):</p><p>​首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。</p><p>​判断数组此位置上是否已经有元素；如果此位置上无元素，则直接添加，如果此位置上有其他元素(或以链表形式存在的多个元素)，</p><p>​则比较key1与当前已在此位置上的数据的hash值，在这种情况下，如果hash值不相同，则key1添加成功；如果hash值相同，</p><p>​进而调用key1所在类的equals()方法进行比较：如果返回true，则使用key1的value值替代此位置上数据的value值，如果返回是false，则添加成功。</p><p>​对于调用equals()方法添加成功的此时key1-value1和原来的数据以链表的方式存储。</p><p>​而当<strong>超出Threshold临界值(且要存放的位置非空)时进行扩容</strong>。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</p><p>​② jdk8 相较于jdk7在底层实现方面的不同：</p><p>​new HashMap():底层没有创建一个长度为16的数组</p><p>​jdk 8底层的数组是：Node[],而非Entry[]</p><p>​首次调用put()方法时，底层创建长度为16的数组</p><p>​jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。</p><p>​形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）</p><p>​当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</p><p>​DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</p><p>​DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75</p><p>​threshold：扩容的临界值，&#x3D;容量*填充因子：16 * 0.75 &#x3D;&gt; 12</p><p>​TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8</p><p>​MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64</p><h4 id="LinkedHashMap的底层原理"><a href="#LinkedHashMap的底层原理" class="headerlink" title="LinkedHashMap的底层原理"></a>LinkedHashMap的底层原理</h4><p>(了解即可)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">HashMap</span>.Node&lt;K,V&gt; &#123;</span><br><span class="line">          Entry&lt;K,V&gt; before, after;<span class="comment">//能够记录添加的元素的先后顺序</span></span><br><span class="line">          Entry(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">             <span class="built_in">super</span>(hash, key, value, next);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h4 id="Map的常用方法"><a href="#Map的常用方法" class="headerlink" title="Map的常用方法"></a>Map的常用方法</h4><p>添加、删除、修改操作：</p><p> Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</p><p> void putAll(Map m):将m中的所有key-value对存放到当前map中</p><p> Object remove(Object key)：移除指定key的key-value对，并返回value</p><p> void clear()：清空当前map中的所有数据</p><p> 元素查询的操作：</p><p> Object get(Object key)：获取指定key对应的value</p><p> boolean containsKey(Object key)：是否包含指定的key</p><p> boolean containsValue(Object value)：是否包含指定的value</p><p> int size()：返回map中key-value对的个数</p><p> boolean isEmpty()：判断当前map是否为空</p><p> boolean equals(Object obj)：判断当前map和参数对象obj是否相等</p><p> 元视图操作的方法：</p><p> Set keySet()：返回所有key构成的Set集合</p><p> Collection values()：返回所有value构成的Collection集合</p><p> Set entrySet()：返回所有key-value对构成的Set集合</p><p> 总结：常用方法：</p><p>添加：put(Object key,Object value)</p><p>删除：remove(Object key)</p><p>修改：put(Object key,Object value)</p><p>查询：get(Object key)</p><p>长度：size()</p><p>遍历：keySet() &#x2F; values() &#x2F; entrySet()</p><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><p>向TreeMap中添加key-value，要求key必须是由同一个类创建的对象</p><p>原因是要按照key进行排序：自然排序 、定制排序</p><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><p>用于处理属性文件，Properties里的key和value都是字符串类型的</p><p>load()；加载流文件</p><p>getProperty()；获取流文件中对应的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fils</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">            fils = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            properties.load(fils);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot;,password=&quot;</span> + password);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fils != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fils.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p> 操作Collection 和 Map 的工具类，此工具内的方法都是静态方法</p><ol><li>常用方法</li></ol><p>reverse(List)：反转 List 中元素的顺序</p><p>shuffle(List)：对 List 集合元素进行随机排序</p><p>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</p><p>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</p><p>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</p><p>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</p><p>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</p><p>Object min(Collection)</p><p>Object min(Collection，Comparator)</p><p>int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</p><p>void copy(List dest,List src)：将src中的内容复制到dest中</p><p>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</p><ol start="2"><li><p>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，</p><p>从而可以解决 多线程并发访问集合时的线程安全问题</p></li></ol><hr><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ol><li>是在jdk 5.0 新增的 </li><li>在集合中使用泛型</li></ol><p>​①集合接口或集合类在jdk5.0时都修改为带泛型的结构</p><p>​②实例化集合类时，可以指明具体的泛型类型</p><p>​③在指明完成后，在集合类或接口中凡是定义类或接口时，内部结构使用到类的泛型的位置内部结构</p><p>​（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。</p><p>​比如：add(E e)  —&gt;实例化以后：add(Integer e)</p><p>​④泛型的类型必须是一个类，不能是基本数据类型，而要用到基本数据类型要替换成包装类</p><p>​⑤在实例化的同时没有指明泛型的类型，则默认类型为java.lang.Object类型</p><h3 id="自定义泛型结构：泛型类、泛型接口、泛型方法"><a href="#自定义泛型结构：泛型类、泛型接口、泛型方法" class="headerlink" title="自定义泛型结构：泛型类、泛型接口、泛型方法"></a>自定义泛型结构：泛型类、泛型接口、泛型方法</h3><ol><li>定义自定义泛型类、泛型接口的注意点：</li></ol><p>​①子类在继承带泛型的父类时，指明了泛型类型。则实例化子类对象时，不再需要指明泛型。</p><p>​②<strong>泛型不同的引用不能相互赋值。</strong></p><p>​③静态方法中不能使用类的泛型参数。原因是静态方法随着类的加载而加载，泛型参数是在实例化对象的时候才出现的</p><p>​④异常类不能声明为泛型</p><p>​⑤类的内部结构可以使用类的泛型 例如(在构造器内部创建泛型的数组) T[ ] arr &#x3D; (T[ ]) new Object[10]; </p><ol start="2"><li>定义泛型方法的注意点：</li></ol><p>​①泛型方法所属的类是不是泛型类与其没有关系</p><p>​②泛型方法在调用时，指明泛型参数的类型。</p><p>​③泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Java</span>&lt;T&gt; &#123;<span class="comment">//自定义的泛型类</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    T javaClass;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Java</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">       <span class="comment">//泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">get</span><span class="params">(E[] arr)</span>&#123;</span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>泛型在继承方面的说明</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">①泛型不具备继承关系，即使类A是类B的父类，但list&lt;A&gt; 和 list&lt;B&gt; 两者是并列关系，不是继承关系 </span><br><span class="line">②类A是类B的父类，但A&lt;list&gt; 是 B&lt;list&gt;  的父类，具备了继承关系 </span><br></pre></td></tr></table></figure><ol start="4"><li>通配符的使用</li></ol><p>​通配符：?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">①类A是类B的父类，list&lt;A&gt;和list&lt;B&gt;是没有关系的，二者共同的父类则是：list&lt;?&gt;</span><br></pre></td></tr></table></figure><p>​②对于list&lt;?&gt;来说添加数据只能往内添加null值，其余数据类中不允许添加；但是允许读取数据，读取的数据类型返回类型Object，原因是任何一个类对象的顶</p><p>级父类都是Object。</p><p>​③有限制条件的通配符的使用说明</p><p>? extends A:（？&lt;&#x3D; A）</p><p>​G&lt;? extends A&gt; list ，此时可以赋值给list的只有类A本身或其子类</p><p>​赋值后通过list去get读取数据只能以上限值接口，即将子类的实例指向父类的引用</p><p>​赋值后通过list去add写入数据编译不能通过</p><p>? super A:（？&gt;&#x3D; A）</p><p>​G&lt;? super A&gt; list，此时可以赋值给list的只有类A本身或其父类</p><p>​赋值后通过list去get数据只能以上限值接口，此处以Object接受，即将子类的实例指向父类的引用</p><p>​赋值后通过list去add写入数据，只能add(类A的本身或其子类的对象)，不能添加类A的父类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">        List&lt;? <span class="built_in">super</span> Person&gt; list2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">        List&lt;Person&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">        List&lt;Object&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        list1 = list3;</span><br><span class="line">        list1 = list4;</span><br><span class="line"><span class="comment">//        list1 = list5;编译不通过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        list2 = list3;编译不通过</span></span><br><span class="line">        list2 = list4;</span><br><span class="line">        list2 = list5;</span><br></pre></td></tr></table></figure><hr><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><ol><li><p>File类的一个对象，就代表了一个文件或一个文件目录(文件夹)</p></li><li><p>File类声明在java.io的包下</p></li><li><p>File类内的方法并未对文件实际内容进行修改，需要进行操作则使用IO流完成</p><p>，通常情况下，File类的对象是以参数的形式传递到流的构造器中，指明了读取或写入的“终点”</p></li><li><p>File类的实例化</p></li></ol><p>​File(String filePath)</p><p>​        File(String parentPath,String childPath)</p><p>​        File(File parentFile,String childPath)</p><p><strong>相对路径：相较于某个路径下，指明的路径绝对路径：包含盘符在内的文件或文件目录的路径</strong></p><ol start="5"><li>File的方法</li></ol><p>​public String getAbsolutePath()：获取绝对路径</p><p>​public String getPath() ：获取路径</p><p>​public String getName() ：获取名称</p><p>​public String getParent()：获取上层文件目录路径。若无，返回null</p><p>​public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</p><p>​public long lastMo dified() ：获取最后一次的修改时间，毫秒值</p><p>​public boolean isDirectory()：判断是否是文件目录</p><p>​public boolean isFile() ：判断是否是文件</p><p>​public boolean exists() ：判断是否存在</p><p>​public boolean canRead() ：判断是否可读</p><p>​public boolean canWrite() ：判断是否可写</p><p>​public boolean isHidden() ：判断是否隐藏</p><p>较为重要的</p><p>​如下的两个方法适用于文件目录：</p><p>​public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组 返回的是只是文件名字</p><p>​public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组 返回的是绝对路径+文件名字</p><p>​public boolean renameTo(File dest):把文件重命名为指定的文件路径</p><p>​     比如：file1.renameTo(file2)为例：</p><p>​     要想保证返回true,需要file1在硬盘中是存在的，且file2不能在硬盘中存在。</p><p>​ 创建硬盘中对应的文件或文件目录</p><p>​public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</p><p>​public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</p><p>​public boolean mkdirs() ：创建文件目录。如果此文件目录存在，就不创建了。如果上层文件目录不存在，一并创建</p><p>​删除磁盘中的文件或文件目录</p><p>​public boolean delete()：删除文件或者文件夹</p><p>​    删除注意事项：Java中的删除不走回收站。</p><h3 id="Java-IO-原理"><a href="#Java-IO-原理" class="headerlink" title="Java IO 原理"></a>Java IO 原理</h3><p>输入input &#x2F;  输出output  从程序或者内存的角度出发</p><ol><li>对于文本文件，使用字符流处理</li><li>对于非文本文件，使用字节流处理</li></ol><hr><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><p>数据单位的不同：字节流(8 bit)  和 字符流(16 bit)</p><p>流向的不同：输入流  输出流</p><p>流的角色的不同：节点流 处理流</p><h3 id="流的体系结构"><a href="#流的体系结构" class="headerlink" title="流的体系结构"></a>流的体系结构</h3><p>​ 字节输入流字节输出流 字符输入流 字符输出流</p><p>抽象基类InPutStreamOutPutStream ReaderWriter</p><p>文件流(节点流)  FileInPutStreamFileOutPutStream   FileReader  FileWriter</p><p>缓冲流(处理流)BufferInPutStreamBufferOutPutStreamBufferReaderBufferWriter</p><table><thead><tr><th align="center">节点流</th><th></th><th align="center">缓冲流</th></tr></thead><tbody><tr><td align="center">FileInputStream   (read(byte[] b))</td><td></td><td align="center">BufferedInputStream (read(byte[] b))</td></tr><tr><td align="center">FileOutputStream  (write(byte[] b,0,len)</td><td></td><td align="center">BufferedOutputStream (write(byte[] b,0,len) &#x2F; flush()</td></tr><tr><td align="center">FileReader (read(char[] c))</td><td></td><td align="center">BufferedReader (read(char[] c) &#x2F; readLine())</td></tr><tr><td align="center">FileWriter (write(char[] c,0,len)</td><td></td><td align="center">BufferedWriter (write(char[] c,0,len) &#x2F; flush()</td></tr></tbody></table><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><ol><li>数据的读入</li></ol><p>​①read():返回读入的一个字符。如果文件返回-1，则文件读取结束</p><p>​②异常的处理try-catch-finally：保证流资源不因异常的影响正常执行关闭操作 close();</p><p>​③数据的读入要求文件必须存在，否则报FiileNotFoundException</p><ol start="2"><li>数据的写出</li></ol><p>​①输出操作，对应的File文件可以不存在。</p><p>​②如果不存在，在输出的过程中，则会自动创建该文件；如果存在，则根据流使用的构造器进行不同的操作</p><p>​如果流使用的构造器是：FileWriter(file,false) &#x2F; FileWriter(file):对原有文件的覆盖</p><p>​        如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容</p><ol start="3"><li>不能使用字符流来处理图片等字节数据，即使创建成功，也无法正常显示</li></ol><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>略</p><h3 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h3><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><ol><li>作用：提高流的读取、写入的速度  原因是内部提高了缓冲区 8192byte，默认情况是8kb</li><li>处理流：即在已有的流的基础上在其外层再“包裹”一层</li></ol><h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><ol><li>属于字符流</li></ol><p>​InPutStreamReader：将InputStream输入流转换为Reader的输入流</p><p>​OutPutStreamWriter：将Write输出流转换为OutPutStream输出流</p><p>说明：编码决定了解码的方式，因在解码的时候需要根据文件当时保存的格式决定解码的字符集</p><ol start="2"><li>作用是 提供了在字节流和字符流之间的转换</li></ol><h3 id="其他类型的流"><a href="#其他类型的流" class="headerlink" title="其他类型的流"></a>其他类型的流</h3><h4 id="标准输入、输出流"><a href="#标准输入、输出流" class="headerlink" title="标准输入、输出流"></a>标准输入、输出流</h4><ol><li>System.in:标准的输入流，默认从键盘输入</li><li>System.out:标准的输出流，默认从控制台输出</li><li>System类的setIn(InputStream is) &#x2F; setOut(PrintStream ps)方式重新指定输入和输出的流。</li></ol><h4 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h4><ol><li>作用：将基本数据类型的数据转化为字符串输出</li><li>PrintStream、PrintWriter</li></ol><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><ol><li>DataInputStream(读取数据)和 DataOutputStream(写入数据)</li><li>作用：用于读取或写出基本数据类型的变量或字符串</li><li>注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//写出数据</span></span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">        dos.writeUTF(<span class="string">&quot;。。。。&quot;</span>);</span><br><span class="line">        dos.flush();<span class="comment">//刷新操作，将内存中的数据写入文件</span></span><br><span class="line">        dos.writeInt(<span class="number">23</span>);</span><br><span class="line">        dos.flush();</span><br><span class="line">        dos.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">        dos.flush();</span><br><span class="line">     <span class="comment">//关闭流</span></span><br><span class="line">        dos.close();</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.读取数据</span></span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isMale</span> <span class="operator">=</span> dis.readBoolean();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;isMale = &quot;</span> + isMale);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        dis.close();</span><br></pre></td></tr></table></figure><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><ol><li><p>属于字节流</p><p>ObjectOutPutStream  ：序列化过程  将java对象从内存中保存到磁盘或通过网络节点传输出去 。 xx.writeObject()方法</p><p>ObjectInPutStream ：反序列化过程  将java对象从磁盘或通过网络节点读取到内存中，还原该java对象 。 xx.readObject()方法</p></li><li><p>作用：用于存储和读取基本数据类型和对象</p></li><li><p>对象序列化机制：允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，</p><p>或通过网络将这种二进制流传 输到另一个网络节点。当其它程序获取了这种二进制流，就可以恢复成原 来的Java对象</p></li><li><p>一个java对象需要序列化或反序列化，则要求其所在的类必须是可序列化的。</p></li><li><p>自定义类可序列化的要求</p><p>①需要实现接口：Serializable</p></li></ol><p>​②此类需要提供一个全局常量：serialVersionUID （例如，public static final long serialVersionUID &#x3D; 4754L;）</p><p>​③除了此自定义类需要实现Serializable接口之外，还必须保证其内部所有属性</p><p>​也必须是可序列化的。（默认情况下，基本数据类型可序列化）</p><p>说明：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</p><h3 id="RandomAccessFile类"><a href="#RandomAccessFile类" class="headerlink" title="RandomAccessFile类"></a>RandomAccessFile类</h3><ol><li><p>此类直接继承于java.lang.Object类，实现了DataInput和DataOutput接口</p></li><li><p>既可以作为输入流，也可以作为一个输出流</p></li><li><p>如果RandomAccessFile作为一个输出流存在，写出到的文件不存在，则会自动创建该文件；</p><p>如果写出到的文件存在，则会对原有文件内容进行覆盖。（默认情况下，从头覆盖）</p></li><li><p>可以通过实现RandomAccessFile“插入”数据的效果</p></li></ol><p>​long getFilePointer()：获取文件记录指针的当前位置 </p><p>​void seek(long pos)：将文件记录指针定位到 pos 位</p><hr><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="通信要素1"><a href="#通信要素1" class="headerlink" title="通信要素1"></a>通信要素1</h3><p>IP和端口号</p><p>作用：准确地定位网络上一台或多台主机；定位主机上的特定的应用</p><h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><ol><li>概念：唯一的标识 Internet 上的计算机（通信实体）</li><li>在Java中使用InetAddress类代表IP</li><li>IP分类：IPv4 和 IPv6 ; 万维网 和 局域网</li><li>实例化InetAddress的方法:①InetAddress.getByName(String host)   ② InetAddress.getLocalHost()</li><li>两个常用方法：获取此IP地址的主机名 getHostName() 、返回文本显示中的IP地址字符串  getHostAddress()</li></ol><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><ol><li><p>概念：正在计算机上运行的进程。</p></li><li><p>要求：不同的进程有不同的端口号</p></li><li><p>范围：被规定为一个 16 位的整数 0~65535。</p></li><li><p>端口号与IP地址的组合得出一个网络套接字：Socket</p></li></ol><h3 id="通信要素2"><a href="#通信要素2" class="headerlink" title="通信要素2"></a>通信要素2</h3><p>提供网络通信协议：TCP&#x2F;IP参考模型（应用层、传输层、网络层、物理+数据链路层）</p><p>作用：找到主机后可靠高效地进行数据传输</p><h4 id="TCP-与-UDP"><a href="#TCP-与-UDP" class="headerlink" title="TCP 与 UDP"></a>TCP 与 UDP</h4><p>TCP协议：传输控制协议TCP(Transmission Control Protocol）</p><ol><li>使用TCP协议前，须先建立TCP连接，形成传输数据通道 </li><li>传输前，采用“三次握手”方式，点对点通信，是可靠的 </li><li>TCP协议进行通信的两个应用进程：客户端、服务端。 </li><li>在连接中可进行大数据量的传输  </li><li>传输完毕，需释放已建立的连接，效率低</li></ol><p>UDP协议：用户数据报协议UDP(User Datagram Protocol)</p><ol><li>将数据、源、目的封装成数据包，不需要建立连接</li><li>每个数据报的大小限制在64K内 </li><li>发送不管对方是否准备好，接收方收到也不确认，故是不可靠的 </li><li>可以广播发送 </li><li>发送数据结束时无需释放资源，开销小，速度快</li></ol><h3 id="URL编程"><a href="#URL编程" class="headerlink" title="URL编程"></a>URL编程</h3><ol><li><p>URL:统一资源定位符，对应着互联网的某一资源地址</p></li><li><p><a href="http://localhost:4000/link/1.txt?user=xx&amp;name=xx">http://localhost:4000/link/1.txt?user=xx&amp;name=xx</a></p><p>协议   主机名    端口号  资源地址           参数列表</p><p>URL url &#x3D; new URL(<a href="http://localhost:4000/link/1.txt?user=xx&amp;name=xx">http://localhost:4000/link/1.txt?user=xx&amp;name=xx</a>)</p></li><li><p>常用方法</p></li></ol><p>​public String getProtocol( ) 获取该URL的协议名 </p><p>​public String getHost( ) 获取该URL的主机名 </p><p>​public String getPort( ) 获取该URL的端口号 </p><p>​public String getPath( ) 获取该URL的文件路径 </p><p>​public String getFile( ) 获取该URL的文件名 </p><p>​public String getQuery( ) 获取该URL的查询名</p><hr><h2 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h2><ol><li><p>Reflection(反射)是被视为动态语言的关键，允许程序通过API取得并修改一些类的内部结构</p></li><li><p>反射机制和面向对象的封装性并不矛盾。</p><p>相对的理解是封装性即自己内部的不建议使用，而是去使用已经提供好的公共的属性或方法</p><p>而对于反射机制而言，相当于是不采纳封装性的建议，通过此机制强行使用其内部的属性或方法</p></li><li><p>关于Java.lang.class类的理解</p></li></ol><p>​编译过程：javac.exe命令—&gt;.class结尾字节码文件(一个或多个)  </p><p>​类的加载过程：(只有java.exe后此时类才加载到内存中，此前都不属于类的加载过程)</p><p>​java.exe(对某个字节码文件解释运行)—-&gt;类加载到内存中</p><p>​    加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例。简而言之，Class的实例就对应着一个运行时类。</p><ol start="4"><li>可以通过不同的多种方式获取已经加载到内存中的运行时类，但都是指向了同一个实例，即地址值相同</li><li>Class实例对象可以是class类、interface接口、[]数组、enum枚举、annotation；注解@interface、primitive type基本数据类型、void</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] i1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">      <span class="type">int</span>[] i2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">20</span>];</span><br><span class="line">      <span class="type">Class</span> <span class="variable">f</span> <span class="operator">=</span> i1.getClass();</span><br><span class="line">      <span class="type">Class</span> <span class="variable">s</span> <span class="operator">=</span> i2.getClass();</span><br><span class="line">      <span class="comment">// 只要数组的元素类型与维度一样，就是同一个Class</span></span><br><span class="line">      System.out.println(f == s);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="获取Class实例的方式"><a href="#获取Class实例的方式" class="headerlink" title="获取Class实例的方式"></a>获取Class实例的方式</h3><ol><li>方式一：调用运行时类的属性：.class</li><li>方式二：通过运行时类的对象,调用getClass()</li><li>方式三：调用Class的静态方法：forName(String classPath)  参数内容为类的全路径</li><li>方式四：使用类的加载器：ClassLoader  (了解)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.运行时类的属性.class</span></span><br><span class="line">      Class&lt;Student&gt; studentClass = Student.class;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//2.运行时类的对象.getClass()方法</span></span><br><span class="line">      <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;T&quot;</span>, <span class="number">20</span>);</span><br><span class="line">      Class&lt;? <span class="keyword">extends</span> <span class="title class_">Student</span>&gt; aClass = s1.getClass();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//3.Class的静态方法 forName(String path)</span></span><br><span class="line">      Class&lt;?&gt; name = Class.forName(<span class="string">&quot;Reflection.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//判断三个Class的实例对象地址是否相同</span></span><br><span class="line">      System.out.println(studentClass == aClass);<span class="comment">//true</span></span><br><span class="line">      System.out.println(name == aClass);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="类的加载器"><a href="#类的加载器" class="headerlink" title="类的加载器"></a>类的加载器</h3><p>了解，获取加载器的方法getParent();</p><p>引导类加载器：负责Java平台核心库，加载java自带的类</p><p>扩展类加载器：负责一些jar包里的类</p><p>系统类加载器：加载自定义的类</p><h3 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h3><ol><li><p>方式一：调用.newInstance()方法创建对象，实际上还是调用了运行时类的空参构造器</p><p>使用此方法的要求：① 运行时类必须提供空参构造器   ②此空参构造器的权限不小于default(缺省)</p><p>补充知识：javabean中要求提供一个public的空参构造器。原因是：</p><p>​        ①便于通过反射，创建运行时类的对象</p><p>​        ②便于子类继承此运行时类时，去调用super()时，保证父类有此构造器</p></li></ol><h3 id="获取运行时类的完整结构"><a href="#获取运行时类的完整结构" class="headerlink" title="获取运行时类的完整结构"></a>获取运行时类的完整结构</h3><p>见Senior 11 工程下各个包</p><h3 id="调用运行时类的指定结构"><a href="#调用运行时类的指定结构" class="headerlink" title="调用运行时类的指定结构"></a>调用运行时类的指定结构</h3><p>主要是：属性、方法、构造器</p><ol><li>获取指定的属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">sd</span> <span class="operator">=</span> Student.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建运行时类的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">st</span> <span class="operator">=</span> (Student) sd.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取运行时类中指定变量名的属性:getDeclaredField(String fieldName)</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> sd.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.保证当前属性是可访问的</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.修改指定对象的值</span></span><br><span class="line">        name.set(st,<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(name.get(st));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>获取指定的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">st</span> <span class="operator">=</span> Student.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建运行时类的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">sd</span> <span class="operator">=</span> (Student) st.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取指定的某个方法</span></span><br><span class="line">        <span class="comment">//getDeclaredMethod():参数1 ：指明获取的方法的名称  参数2：指明获取的方法的形参列表</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">get</span> <span class="operator">=</span> st.getDeclaredMethod(<span class="string">&quot;get&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.保证当前属性是可访问的</span></span><br><span class="line">        get.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.调用方法的invoke():参数1：方法的调用者  参数2：给方法形参赋值的实参</span></span><br><span class="line">        <span class="comment">//invoke()的返回值即为对应类中调用的方法的返回值。</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnGet</span> <span class="operator">=</span> get.invoke(sd, <span class="string">&quot;CTB&quot;</span>);</span><br><span class="line">        System.out.println(returnGet);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用静态方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">showDetails</span> <span class="operator">=</span> st.getDeclaredMethod(<span class="string">&quot;showDetails&quot;</span>);</span><br><span class="line">        showDetails.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//如果调用的运行时类中的方法没有返回值，则此invoke()返回null</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnShow</span> <span class="operator">=</span> showDetails.invoke(Student.class);</span><br><span class="line">        System.out.println(returnShow);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>获取指定的构造器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getCons</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取指定的构造器</span></span><br><span class="line">        <span class="comment">//getDeclaredConstructor():参数：指明构造器的参数列表</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> studentClass.getDeclaredConstructor(<span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.保证此构造器是可访问的</span></span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.调用此构造器创建运行时类的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) declaredConstructor.newInstance(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建被代理类的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用静态方法生成动态代理类的对象，将被代理类对象填入</span></span><br><span class="line">        <span class="comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) MovingProxy.getProxy(s1);</span><br><span class="line">        <span class="type">String</span> <span class="variable">interest</span> <span class="operator">=</span> person.interest();</span><br><span class="line">        System.out.println(interest);</span><br><span class="line">        person.read(<span class="string">&quot;肖申克的救赎&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要想实现动态代理，需要解决的问题？</span></span><br><span class="line"><span class="comment">问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。</span></span><br><span class="line"><span class="comment">问题二：当通过代理类的对象调用方法a时，如何动态的去调用被代理类中的同名方法a。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//接口类</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">read</span><span class="params">(String book)</span>;</span><br><span class="line">    String <span class="title function_">interest</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="comment">//需要实现接口类中的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">(String book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喜欢的书籍是：&quot;</span> + book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">interest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;read book&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MovingProxy</span>&#123;</span><br><span class="line">    <span class="comment">//声明为静态方法，以便生成代理类对象直接调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object obj)</span>&#123;<span class="comment">//此处的obj是传入的被代理类的对象</span></span><br><span class="line">        <span class="comment">//newProxyInstance的第三个参数是InvocationHandler接口的实现类的对象</span></span><br><span class="line">        <span class="type">InvocationHand</span> <span class="variable">invocation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHand</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对invocation类的实例对象以传入的被代理类对象赋值，缺少此步将导致空指针异常</span></span><br><span class="line">        invocation.getObj(obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),invocation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InvocationHand</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getObj</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()</span></span><br><span class="line">    <span class="comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span></span><br><span class="line">    <span class="comment">//此处的proxy即为被代理类的对象，method即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line">        <span class="keyword">return</span> invoke;<span class="comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Java8的新特性"><a href="#Java8的新特性" class="headerlink" title="Java8的新特性"></a>Java8的新特性</h2><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><ol><li>格式：Comparator<Integer> c &#x3D; (o1,o2) -&gt; Integer.compare(o1,o2);</li></ol><p>​-&gt;：lambda操作符 或称为 箭头操作符</p><p>​-&gt;左边：lambda形参列表(接口中抽象方法的形参列表)</p><p>​-&gt;右边：lambda体(重写的抽象方法的方法体)</p><ol start="2"><li>lambda表达式的本质：作为函数式接口的实例</li><li>lambda表达的多种语法格式总结：</li></ol><p>​-&gt;左边：lambda形参列表的参数类型可以省略(类型推断)；</p><p>​如果lambda形参列表只有一个参数，则包裹参数的一对()也可以省略</p><p>​-&gt;右边：lambda体应该使用一对{}包裹；</p><p>​如果lambda体只有一条执行语句（可能是return语句），省略这一对{}和return关键字</p><h4 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h4><ol><li><p>函数式接口概念：接口中只声明了一个抽象方法</p></li><li><p>自定义函数式接口可以通过@Functionnallnterface注解来检验谁否为函数式接口</p></li><li><p>所有的匿名实现类都可以通过Lambda表达来写</p></li><li><p>4个核心接口：①消费型接口   Consumer<T>     void accept(T t)</p><p>​ ②供给型接口Supplier<T>     T get()</p><p>​ ③函数型接口Function&lt;T,R&gt;   R apply(T t)</p><p>​ ④断定型接口Predicate<T>    boolean test(T t)</p></li></ol><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><ol><li><p>使用场景：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用</p></li><li><p>方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。因此方法引用，也是函数式接口的实例。</p></li><li><p>格式：  类(或对象) :: 方法名</p></li><li><p>具体分为如下的三种情况：</p><p>情况1     对象 :: 非静态方法</p><p>情况2     类 :: 静态方法</p><p>情况3     类 :: 非静态方法</p></li><li><p>方法引用使用的要求：</p><p>要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）</p><p>情况3：如果抽象方法中形参列表的第一个参数作为方法引用的方法的调用者，则可以考虑使用。</p></li></ol><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><ol><li>和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。抽象方法的返回值类型即为构造器所属的类的类型</li><li>数组引用：大家可以把数组看做是一个特殊的类，则写法与构造器引用一致。</li></ol><h3 id="Stream-API说明"><a href="#Stream-API说明" class="headerlink" title="Stream API说明"></a>Stream API说明</h3><ol><li><p>Stream关注的是对数据的运算，与CPU打交道；</p><p>集合关注的是数据的存储，与内存打交道； </p></li><li><p>①Stream 自己不会存储元素。</p><p>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</p><p>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行</p></li><li><p>Stream 执行流程：</p></li></ol><p>​① Stream的实例化</p><p>​② 一系列的中间操作（过滤、映射、…)</p><p>​③ 终止操作</p><ol start="4"><li><p>①一个中间操作链，对数据源的数据进行处理</p><p>②一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</p></li></ol><h4 id="Stream的实例化"><a href="#Stream的实例化" class="headerlink" title="Stream的实例化"></a>Stream的实例化</h4><ol><li>方式一：通过集合</li></ol><p>​①default Stream<E> stream() : 返回一个顺序流</p><p>​②default Stream<E> parallelStream() : 返回一个并行流</p><ol start="2"><li>方式二：通过数组</li></ol><p>​①调用Arrays类的static <T> Stream<T> stream(T[] array): 返回一个流</p><ol start="3"><li>方式三：通过Stream的of()</li><li>方式四：创建无限流(了解)</li></ol><p>​①迭代 public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)</p><p>​②生成public static<T> Stream<T> generate(Supplier<T> s)</p><h4 id="Stream的中间操作"><a href="#Stream的中间操作" class="headerlink" title="Stream的中间操作"></a>Stream的中间操作</h4><ul><li><strong>filter和map的如何选择主要考虑是否改变了原来的长度，filter改变了，map则只是加工，并没有改变</strong></li></ul><ol><li>筛选与切片</li></ol><p>​①filter(Predicate p)——接收 Lambda ， 从流中排除某些元素。</p><p>​②limit(n)——截断流，使其元素不超过给定数量。</p><p>​③skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</p><p>​④distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</p><ol start="2"><li>映射</li></ol><p>​①map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，</p><p>​该函数会被应用到每个元素上，并将其映射成一个新的元素。</p><p>​②flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</p><ol start="3"><li>排序</li></ol><p>​①sorted()——自然排序</p><p>​②sorted(Comparator com)——定制排序</p><h4 id="Stream的终止操作"><a href="#Stream的终止操作" class="headerlink" title="Stream的终止操作"></a>Stream的终止操作</h4><ol><li><p>匹配与查找</p><p>①allMatch(Predicate p)——检查是否匹配所有元素。</p><p>②anyMatch(Predicate p)——检查是否至少匹配一个元素。</p><p>③noneMatch(Predicate p)——检查是否没有匹配的元素。</p><p>④findFirst——返回第一个元素</p><p>⑤findAny——返回当前流中的任意元素</p><p>⑥count——返回流中元素的总个数</p><p>⑦max(Comparator c)——返回流中最大值</p><p>⑧min(Comparator c)——返回流中最小值</p><p>⑨forEach(Consumer c)——内部迭代</p></li><li><p>归约</p><p>①reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</p><p>②reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional<T></p><p>③Optional<Double> sumMoney &#x3D; salaryStream.reduce(Double::sum);</p></li><li><p>收集</p><p>①collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</p><p><img src="https://s4.ax1x.com/2022/02/23/bCeVgg.png" alt="相关方法"></p></li></ol><h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><p>理解：为了解决Java的空指针问题</p><ol><li>创建Optional类的实例</li></ol><p>​Optional.of(T t) : 创建一个 Optional 实例，t必须非空；</p><p>​Optional.empty() : 创建一个空的 Optional 实例</p><p>​Optional.ofNullable(T t)：t可以为null</p><ol start="2"><li><p>常用方法</p><p>①of(T t):封装数据t生成Optional对象。要求t非空，否则报错。</p><p>②get()通常与of()方法搭配使用。用于获取内部的封装的数据value</p><p>③ofNullable(T t) ：封装数据t赋给Optional内部的value。不要求t非空</p><p>④orElse(T t1):通常与ofNullable(T t) 搭配使用。如果当前的Optional内部封装的t是非空的，则返回内部的t；</p><p>​如果内部的t是空的，则返回orElse()方法中的参数t1.</p><hr><h2 id="JDK的其他版本特性"><a href="#JDK的其他版本特性" class="headerlink" title="JDK的其他版本特性"></a>JDK的其他版本特性</h2><h3 id="Java9-新特性"><a href="#Java9-新特性" class="headerlink" title="Java9 新特性"></a>Java9 新特性</h3><ol><li><p>jdk目录结构的改变</p></li><li><p>模块化系统 Jigsaw –&gt; Modularity </p><p>export暴露要被导入的结构 requires引进被暴露的结构</p><p><img src="https://s4.ax1x.com/2022/02/23/bCel5V.png" alt="模块化系统"></p></li><li><p>REPL工具：jShell命令</p><p>在dos窗口中运行java代码</p></li><li><p>语法改进：jdk9中接口允许定义自己的私有化方法</p></li><li><p>钻石操作符(泛型)与匿名内部类在java8中不能共存，在java9中则可以</p></li><li><p>java 8中资源关闭操作: Java 8 中，可以实现资源的自动关闭。要求自动关闭的资源的实例化必须放在try的一对小括号中</p><p>如下例所示： try(InputStreamReader reader &#x3D; new InputStreamReader(System.in)){</p><p>​ &#x2F;&#x2F;读取数据细节省略</p><p>​ }catch (IOException e){</p><p>​ e.printStackTrace(); }</p></li><li><p>java9中资源关闭操作：需要自动关闭的资源的实例化可以放在try的一对小括号外。</p><p>此时的资源属性是常量，声明为final的，不可修改</p></li><li><p>String存储结构变更，由char[ ]  变为 byte[ ]</p></li><li><p>集合工厂方法：快速创建只读集合  只可以读，不可以添加数据</p><p>Array.asList()方法创建的也是只读集合</p></li><li><p>InPutStream的加强</p><p>transferTo()，可以用来将InputStream 数据直接 传输到 OutputStream，替代了转换流的工作</p></li><li><p>增强的Stream API</p><p> ①takeWhile()； 返回从开头开始的尽量多的元素，碰到第一个不满足的就结束筛选</p><p> ②dropWhile()；与 takeWhile 相反，返回剩余的元素。</p><p> ③ofNullable()；Java 8 中 Stream 不能完全为null。而在Java 9中创建一个单元素 Stream，可以包含一个非空元素，也可以创建一个空 Stream。</p><p> ④iterate()；可以提供一个 Ppredicate (判断条件)来指定什么时候结束迭代。</p></li><li><p>Optional类中stream()，允许Optional类生成一个流去遍历其内的元素</p></li><li><p>Javascript引擎升级：Nashorn，允许在java虚拟机上允许js文件</p></li></ol><h3 id="Java10-新特性"><a href="#Java10-新特性" class="headerlink" title="Java10 新特性"></a>Java10 新特性</h3><ol><li><p>局部变量类型推断 </p><p>①使用var代替原本的数据类型，var不是关键字</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.声明变量时，根据所附的值，推断变量的类型</span></span><br><span class="line">     <span class="type">var</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">   </span><br><span class="line">     <span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">     list.add(<span class="number">123</span>);</span><br><span class="line">   </span><br><span class="line">     <span class="comment">//2.遍历操作</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i : list) &#123;</span><br><span class="line">         System.out.println(i);</span><br><span class="line">         System.out.println(i.getClass());</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">     <span class="comment">//3.普通的遍历操作</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">         System.out.println(i);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>​②不能使用var替代的情景</p><p> 情况1：没有初始化的局部变量声明 </p><p> 情况2：方法的返回类型   原因是根据返回类型确定什么数据能进入 var是根据进入类型反推类型的 ，两者相互冲突，下方情况同理</p><p>情况3：方法的参数类型 </p><p>情况4：构造器的参数类型 </p><p>情况5：属性 </p><p>情况6：catch块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.局部变量不赋值，就不能实现类型推断</span></span><br><span class="line"><span class="comment">//        var num ;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.lambda表示式中，左边的函数式接口不能声明为var</span></span><br><span class="line"><span class="comment">//        Supplier&lt;Double&gt; sup = () -&gt; Math.random();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        var sup = () -&gt; Math.random();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.方法引用中，左边的函数式接口不能声明为var</span></span><br><span class="line"><span class="comment">//        Consumer&lt;String&gt; con = System.out::println;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        var con = System.out::println;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.数组的静态初始化中，注意如下的情况也不可以</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;<span class="comment">//通过前面推断后面的类型</span></span><br><span class="line"><span class="comment">//        var arr = &#123;1,2,3,4&#125;;//此处前面、后面的类型都被消除了</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>集合新增创建不可变集合的方法</p><p>①of (jdk9新增)</p><p>②copyOf (jdk10新增)</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例1：</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">list1</span> <span class="operator">=</span> List.of(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">copy1</span> <span class="operator">=</span> List.copyOf(list1);</span><br><span class="line">        System.out.println(list1 == copy1); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//示例2：</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        list2.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">var</span> <span class="variable">copy2</span> <span class="operator">=</span> List.copyOf(list2);</span><br><span class="line">        System.out.println(list2 == copy2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>结论：copyOf(Xxx coll):如果参数coll本身就是一个只读集合，则copyOf()返回值即为当前的coll</p><p>​        如果参数coll不是一个只读集合，则copyOf()返回一个新的集合，这个集合是只读的。</p><h3 id="Java11-新特性"><a href="#Java11-新特性" class="headerlink" title="Java11 新特性"></a>Java11 新特性</h3><ol><li><p>String中新增的方法</p><p>①isBlank():判断字符串是否为空白</p><p>②strip():去除首尾空白</p><p>③stripTrailing():去除尾部空格 </p><p>④stripLeading():去除首部空格</p><p>⑤repeat(int count):复制字符串</p><p>⑥lines().count():行数统计</p></li><li><p>Optional新增的方法</p><p>①isPresent()；判断内部的value是否存在</p><p>②isEmpty()；判断内部的value是否为空</p><p>③orElseThrow()；value非空，返回value；否则抛异常NoSuchElementException</p><p>④ifPresentOrElse(Consumer action, Runnable emptyAction)；</p><p>​value非空，执行参数1功能；如果value 为空，执行参数2功能</p><p>⑤Optional<T> or(Supplier&lt;? extends Optional &lt; ? extends T&gt;&gt; supplier)</p><p>​value非空，返回对应的Optional； value为空，返回形参封装的Optional</p></li><li><p>局部变量类型推断的升级</p></li><li><p>HttpClient替换原有的HttpURLConnection</p></li><li><p>更简化的编译运行文件</p><p>即可以直接通过 java xxx.java运行java文件，不必像之前一样javac.exe编译后才能java.exe</p><p>注意点：①执行源文件中的第一个类, 第一个类必须包含主方法。 </p><p>② 并且不可以使用其它源文件中的自定义类, 本文件中的自定义类是可以使用的。</p></li><li><p>ZGC</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSe1</title>
      <link href="/2022/02/22/JavaSe1/"/>
      <url>/2022/02/22/JavaSe1/</url>
      
        <content type="html"><![CDATA[<h2 id="菜鸟的第一个Java程序HelloWorld"><a href="#菜鸟的第一个Java程序HelloWorld" class="headerlink" title="菜鸟的第一个Java程序HelloWorld"></a>菜鸟的第一个Java程序HelloWorld</h2><ol><li>源码文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.java规范了三种注释方式</span></span><br><span class="line"><span class="comment">单行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">文档注释（Java特有）</span></span><br><span class="line"><span class="comment">2.单行注释和多行注释的作用：</span></span><br><span class="line"><span class="comment">①对所写的程序进行解释说明，增强可读性，便于方便自己，同时方便别人</span></span><br><span class="line"><span class="comment">②可以对已完成的代码进行调试</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.单行注释和多行注释的内容不参与编译。</span></span><br><span class="line"><span class="comment">编译生成的.class结尾的字节码文件不包含注释的信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.多行注释里面不可嵌套注释。</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释：</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> Ssk</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> jdk8.0 </span></span><br><span class="line"><span class="comment">这是今天学习的第一个java程序</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloJava</span> &#123;</span><br><span class="line"><span class="comment">/*多行注释：</span></span><br><span class="line"><span class="comment">如下的main方法是程序的入口！</span></span><br><span class="line"><span class="comment">mian的格式是固定的！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//单行注释：如下的语句表示输出到控制台 </span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>验证</li></ol><p>​①在dos窗口下利用cd以及dir指令进入源码保存的路径文件夹</p><p>​②输入javac HelloWord.java回车编译得到HelloChina.class的字节码文件</p><p>​③输入java HelloChina回车进行运行</p><p>​④dos窗口回显Hello World！则代表成功</p><p>​⑤否则根据提示进行排查</p><ol start="3"><li>注意事项</li></ol><p>​输入javac HelloWorld.java 容易出现的问题：</p><p>​①出现找不到文件（无法加载主类） 有可能是输入的指令名称错误或者没有在java的路径下</p><p>​②javac 后面的字母有时没有严格区别大写也能运行是因为javac还是处于windows层面，在windows下大小写字母都被视为同一个文件，而在java环境下严格区</p><p>别大写字母</p><h3 id="关于Java程序Hello-World的补充"><a href="#关于Java程序Hello-World的补充" class="headerlink" title="关于Java程序Hello World的补充"></a>关于Java程序Hello World的补充</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对第一个Java程序的编写总结</span></span><br><span class="line"><span class="comment">1.Java程序编写-编译-运行</span></span><br><span class="line"><span class="comment">编写：将已经编写好的java代码保存在以&quot;.java&quot;为后缀的源文件中</span></span><br><span class="line"><span class="comment">编译：利用&quot;javac.exe&quot;命令对保存好的源文件进行编译。格式：javac 源文件名字</span></span><br><span class="line"><span class="comment">运行：利用&quot;java.exe&quot;命令对编译后产生的以&quot;.class&quot;为后缀的字节码</span></span><br><span class="line"><span class="comment">文件进行处理。格式：java 类名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.</span></span><br><span class="line"><span class="comment">一个java源文件中可以声明多个class，但只有一个类（class）可以声明为public。</span></span><br><span class="line"><span class="comment">此外声明为public的类必须与源文件名字相同</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.程序的入口是main()方法，它的格式是固定的</span></span><br><span class="line"><span class="comment">（）内的中括号 和args是可以变的 尤其是String这个固定的类名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.输出语句</span></span><br><span class="line"><span class="comment">System.out.println();  先输出数据，后换行</span></span><br><span class="line"><span class="comment">System.out.pront();  只输出数据，不换行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.每一个执行语句都以&quot;;&quot;结尾</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6.编译的过程</span></span><br><span class="line"><span class="comment">.class为后缀的字节码文件编译后可以产生多份</span></span><br><span class="line"><span class="comment">字节码文件名与Java源文件的类名一致</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;<span class="comment">//public static void main(String[] args) &#123;//arguments;参数</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">System.out.println();<span class="comment">//换行</span></span><br><span class="line">System.out.print(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><ol><li>JDK，JRE,JVM三者的关系，以及JDK,JRE包含的主要结构都有哪些</li></ol><p>三者层层包含，由外到内分别是JDK,JRE,JVM</p><p>JDK&#x3D;JRE+java的开发工具（javac.exe，java.exe，javadoc.exe）</p><p>JRE&#x3D;JVM+java核心类库（JavaSE）</p><p>2.配置Path的意义，如何配置</p><p>希望在任何文件路径下都能运行java的开发工具。</p><p>配置：在系统变量中建议JAVA_Home的变量，变量值为bin的上层目录，即jdk的安装路径</p><p>并在path变量中添加两个%JAVA_HOME%\bin，%JAVA_HOME%\jre\bin</p><p>3.常用的命令行</p><p>cd  rd md dir exit del cd.. cd &#x2F;d </p><p>4.创建如下的类，使其运行输出</p><p>姓名 ：</p><p>性别：男</p><p>家庭地址：广东</p><p>创建Java文件：work.java</p><p>class定义的类名跟源文件名不一定要一样</p><p>有一种情况则要保持一直，即class前面带了public</p><p>正如下方的例子所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">work</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;性别：男&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;家庭地址：广东&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.编译和运行上述代码的指令</p><p>编译：javac work.java</p><p>运行：java.work</p><hr><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="Java注释-Comnet-的分类"><a href="#Java注释-Comnet-的分类" class="headerlink" title="Java注释(Comnet)的分类"></a>Java注释(Comnet)的分类</h3><ul><li>单行注释  &#x2F;&#x2F;</li><li>多行注释  &#x2F;*    *&#x2F;</li><li>文档注释（ Java特有）  &#x2F;**   *&#x2F;</li></ul><p>文档注释的内容可以被JDK所提供的工具Javadoc所解析，可以生成一套以网页形式体现的该程序的说明文档。</p><p>演示 javadoc -d 生成的文件名 -author -version 源码文件名字.java</p><hr><h3 id="关键字（keyword"><a href="#关键字（keyword" class="headerlink" title="关键字（keyword)"></a>关键字（keyword)</h3><p>定义：被Java语言赋予了特殊含义，用做专门用途的字符串(单词),关键字中所有的字母都是小写。</p><p>三个严格意义上不算关键字的关键字：<strong>true  false  null</strong></p><hr><h3 id="保留字（reserved-word）"><a href="#保留字（reserved-word）" class="headerlink" title="保留字（reserved word）"></a>保留字（reserved word）</h3><p>定义：现有java版本尚未使用，但后续版本有可能作为关键字使用。</p><p>自己命名标识符要避开这些保留字：goto const</p><hr><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>定义：java对各种变量、方法和类等要素命名使用的字符序列</p><p>技巧：凡是自己命名的地方都统称为标识符</p><p>比如：<strong>类名，变量，方法，接口名，包名</strong>等等</p><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><p><strong>1.由26个字母大小写，0-9，_或者$组成</strong></p><p><strong>2.数字不可以开头</strong></p><p><strong>3.不可以使用关键字和保留字，但允许包含关键字和保留字</strong></p><p><strong>4.java中严格区分大小写字母，长度则无限制</strong></p><p><strong>5.标识符不能含有空格</strong></p><p>以上规则不遵守则无法通过编译！</p><h4 id="java名称规范"><a href="#java名称规范" class="headerlink" title="java名称规范"></a>java名称规范</h4><p><strong>包名：多单词组成的所有字母都是小写：xxxyyyzzz</strong></p><p><strong>类名、接口名：多单词组成时，所有的单词首字母大写：XxxYyyZzz</strong></p><p><strong>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</strong></p><p><strong>常变量：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</strong></p><p>以下规则不遵守也能通过编译，但不建议！</p><p>注意事项 类名命名尽量做到见名知意</p><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>变量是程序中最基本的存储单元，包括了<em><strong>变量类型、变量名和存储的值</strong></em></p><ol><li>格式：数据类型 变量名&#x3D;变量值</li><li>说明：①变量必须先声明，再使用。②变量都定义在其作用域内。在作用域内，它是有效的。</li><li><strong>同一个作用域内，不能声明两个同名的变量</strong></li></ol><hr><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>基本数据类型</li></ol><ul><li><p>整型：byte   short   int   long</p></li><li><p>浮点型：float  double</p></li><li><p>字符型 ：char</p></li><li><p>布尔型：boolean</p></li></ul><ol start="2"><li>引用数据类型</li></ol><ul><li><p>类(class)</p></li><li><p>接口(interface)</p></li><li><p>数组(array)</p></li></ul><ol start="2"><li>变量在类中声明的位置</li></ol><ul><li>成员变量（属性）</li><li>局部变量</li></ul><p>补充：整型数据的区别在于占用存储空间的不同</p><p>1byte&#x3D;8bit位  </p><ul><li>byte的范围：-128~127</li><li>声明long型变量，必须以“l”或者“L”结尾</li><li>通常 ，<strong>定义整型，使用int型</strong></li></ul><h4 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h4><p>byte（1字节）\short（2字节）\int（4字节）\long （8字节）</p><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><p>float(4字节) 单精度 double(8字节) 双精度 精度是float的两倍，<strong>声明float的常量要以”f”或者”F”结尾</strong></p><p><strong>通常，在定义浮点型，使用double型</strong></p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>char（1字符&#x3D;2字节） 格式：char c1&#x3D;’a’  字符内部只能写一个字符。</p><p>表示方式：1.声明一个符号 2.转义字符 3.直接使用Unicode值来表示字符型常量</p><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>只能取两个值之一：true 、false ，常常在条件判断、循环结构中使用</p><p><strong>\n转义字符前面加\斜杠代表这个转义字符的换行不再起作用</strong></p><p>在”“两个”前面各自添加一条斜杠\是为了起强调作用，而不影响运行。</p><h4 id="数据类型之间的运算规则"><a href="#数据类型之间的运算规则" class="headerlink" title="数据类型之间的运算规则"></a>数据类型之间的运算规则</h4><p>只包含了七种类型，不包含boolean型</p><p>自动类型提升</p><p>结论：当容量小的数据类型和容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型</p><p>byte、short、char–&gt;int–&gt;long–&gt;float–&gt;double</p><p>特别的：当byte、short、char三种类型的变量做运算时，结果为int的数据类型</p><p>即便是byte、short、char这三类同类的变量做 运算时，结果也是以int的数据类型</p><p>强制类型转换</p><p>自动类型提升的运算的逆运算</p><p>1.需要使用强转符：（）</p><p>2.强制转换类型有可能导致精度损失</p><hr><h3 id="String类型变量使用"><a href="#String类型变量使用" class="headerlink" title="String类型变量使用"></a>String类型变量使用</h3><ol><li>String属于引用数据类型，翻译为：字符串</li><li>声明String类型变量，使用一对“”</li><li>String可以和8中基本数据类型变量做运算，且运算只能是连接运算。凡是在String后面的运算的+号都起连接作用，而不是相加作用。</li><li>运算的结果依然是String类型,</li></ol><p><strong>补充 在字符型 char 中 ‘a’&#x3D;97    ‘A’&#x3D;65</strong></p><hr><h3 id="关于进制转换"><a href="#关于进制转换" class="headerlink" title="关于进制转换"></a>关于进制转换</h3><p>二进制：0，1 满2进1 以0b或者0B开头</p><p>十进制：0-9，满10进1</p><p>八进制：0-7，满8进1，以数字0开头表示</p><p>十六进制：0-9及A-F，满16进1，以0x或者0X开头表示。</p><p>所有数字在计算机底层都以二进制形式存在</p><p>所有的数值，不管正负，底层都以补码的方式存储</p><h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><p>二进制中最左边的是为最高位，0代表正数,1代表负数。</p><p>原码，反码，补码的说明：</p><p>正数：三码合一</p><p>负数：原码；直接将一个数值转换为二进制。最高位是符号位</p><p>负数的反码：除了符号位以外，是对原码按位取反，只是最高位（符号位）确定为1</p><p>负数的补码：其反码加1</p><h4 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h4><p>十进制&#x3D;&#x3D;&gt;二进制：处2取余的逆</p><h4 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h4><p>二转八：每三个byte按2的0次幂，2的一次幂，2的二次幂计算</p><p>八转二：则把每个八进制的按上面拆开。</p><h4 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h4><p>二转十六：每四个byte按2的0次幂，2的一次幂，2的二次幂计算，2的三次幂。</p><p>十六转二：则把每个八进制的按上面拆开。</p><hr><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>定义：运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p><strong>+ - + - * &#x2F; % （前）++ （后）++ （前）– （后）–   +</strong></p><ol><li>取模（取余）运算：结果的符号与被模数的符号相同。</li></ol><p>开发当中经常使用%来判断能否被除尽的情况。</p><ol start="2"><li><p>%取得位数，&#x2F;去掉位数，187三位数，%10取得最后一位，%100取得最后两位，%1000取得最后三位。</p></li><li><p>（变量前）++变量 ：先自增1，再运算。</p></li></ol><p>​（变量后）变量++ ：先运算，后自增1。</p><p>​判断是看这个++在变量的哪个位置。减法同理，在此不做说明。</p><h5 id="四位数输出分位的练习"><a href="#四位数输出分位的练习" class="headerlink" title="四位数输出分位的练习"></a>四位数输出分位的练习</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AriExer</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1440</span>; </span><br><span class="line"><span class="type">int</span> <span class="variable">qian</span> <span class="operator">=</span> num / <span class="number">1000</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> num / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> num / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> num /<span class="number">1</span> % <span class="number">10</span> ;</span><br><span class="line">System.out.println(<span class="string">&quot;千分位为:&quot;</span> + qian);</span><br><span class="line">System.out.println(<span class="string">&quot;百分位为:&quot;</span> + bai);</span><br><span class="line">System.out.println(<span class="string">&quot;十分位为:&quot;</span> + shi);</span><br><span class="line">System.out.println(<span class="string">&quot;个分位为:&quot;</span> + ge);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>略</p><h3 id="比较运算符（关系运算符）"><a href="#比较运算符（关系运算符）" class="headerlink" title="比较运算符（关系运算符）"></a>比较运算符（关系运算符）</h3><p><strong>&#x3D;&#x3D;相等于  !&#x3D;不等于  &lt;小于    &gt;大于      &lt;&#x3D;           小于等于       &gt;&#x3D;大于等于     instanceof 检查是否是类的对象</strong></p><ol><li>比较运算符的结果都属于boolean布尔型的数据类型</li><li><strong>&gt;   &lt;   &gt;&#x3D;   &lt;&#x3D;：只能使用在数据类型的数据之间</strong></li><li><strong>&#x3D;&#x3D; 和 ！&#x3D;：不仅可以使用在数值类型数据之间，还可以使用在其他引用类型变量之间</strong></li><li>区分&#x3D;&#x3D; 和 &#x3D;</li></ol><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>&amp;逻辑与   |逻辑或  ！逻辑非</p><p>&amp;&amp;短路与  ||短路或  ^逻辑异或</p><p><img src="https://s4.ax1x.com/2022/01/30/HPi5p8.png" alt="逻辑运算符"></p><p>逻辑与、短路与两者相同，输出相同的结果，两者不同输出 false</p><p>逻辑或、短路或两者相同，输出相同的结果，两者不同输出 true</p><p>逻辑非 结果取反</p><p>逻辑异或 两者相同输出相反结果，两者不同输出 true</p><ul><li>逻辑运算符的操作都是boolean类型的变量。</li></ul><p>区分&amp;和&amp;&amp;</p><ol><li>相同点：&amp;与&amp;&amp;的运算结果相同</li><li>相同点2：当符号左边是true时，二者都会执行符号右边的运算</li><li>不同点，当符号左边是false时，&amp;继续执行符号右边的运算，&amp;&amp;不再执行符号右边的运算。 </li><li>开发中推荐使用&amp;&amp;</li></ol><p>区分 | 和||</p><ol><li>相同点：|和||的运算结果是相同的</li><li>相同点：当符号左边是false时，二者都会执行符号右边的运算</li><li>不同点：当符号左边是true时，|继续执行符号右边的运算，而||不再执行符号右边的运算</li><li>开发中推荐使用||</li></ol><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>位运算符是直接对整数的二进制进行的运算。</p><p>&lt;&lt; 左移    &gt;&gt;右移    &gt;&gt;&gt;无符号右移      &amp;与运算      |或运算     ^异或运算           ~取反运算</p><ul><li>位运算符操作的都是整型的数据</li></ul><ol><li><strong>&lt;&lt;:在一定的范围内，每向左移1位，相当于*2</strong></li><li><strong>&gt;&gt;:在一定的范围内，每向右移1位，相当于&#x2F;2</strong></li></ol><p>二进制中最左边的是为最高位，0代表正数,1代表负数。</p><p><strong>&lt;&lt; 空位补0，被移除的高位丢弃，空缺位补0.</strong></p><p><strong>&gt;&gt;被移位的二进制最高位是0，右移后，空缺位补0：最高位是1，空缺位补1</strong></p><p><strong>&gt;&gt;&gt;被移位二进制最高位无论是0或者是1，左移后，空缺位都由0补</strong></p><p>实现最高效的2*8的方式</p><p>2&lt;&lt;3 或者 8&lt;&lt;1</p><ul><li>练习交换两个变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">place1</span> <span class="operator">=</span> <span class="string">&quot;广东&quot;</span>, place2 = <span class="string">&quot;江苏&quot;</span>,tempPlace = <span class="string">&quot;中转&quot;</span>;<span class="comment">//定义一个临时变量</span></span><br><span class="line">            <span class="comment">//利用临时变量交换赋值</span></span><br><span class="line">            tempPlace = place1;</span><br><span class="line">            place1 = place2;</span><br><span class="line">            place2 = tempPlace;</span><br><span class="line">            <span class="comment">//输出最终交换的结果</span></span><br><span class="line">            System.out.println(<span class="string">&quot;起点:&quot;</span> + place1);</span><br><span class="line">            System.out.println(<span class="string">&quot;终点:&quot;</span> + place2 );</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>格式（条件表达式）？表达式1：表达式2</p><p>①条件表达式的结果为Boolean类型</p><p>②根据表达式真或假，决定执行表达式1，还是表达式2<br>如果表达式为true，则执行表达式1<br>如果表达式为false，则执行表达式2</p><p>③表达式1和表达式2要求是一致的</p><p>④三元运算符可以嵌套使用</p><p>凡是可以使用三元运算符的地方都可以改写成 if-else。</p><p>反之，不成立。如果程序既可以使用三元运算符，也可以使用if-esle，那么优先使用三元运算符。原因是简洁，执行效率高。</p><h4 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h4><p>PS：想那个先算 直接套（）</p><hr><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>流程控制采用结构化程序设计规定的三种基本流程控制。</p><ul><li>顺序结构</li></ul><p>程序自上到下逐行执行，中间没有任何判断和跳转</p><ul><li>分支结构</li></ul><p>根据条件，选择性执行代码。分别有if-else和switch-case的两种分支语句</p><ul><li>循环结构</li></ul><p>根据循环条件，重复性执行某段代码。分别有while、do-while、for三种循环语句</p><p> jdk1.5提供了foreach循环，方便的遍历集合、数组元素</p><h4 id="if-else的三种语句格式："><a href="#if-else的三种语句格式：" class="headerlink" title="if-else的三种语句格式："></a>if-else的三种语句格式：</h4><ol><li>if（条件表达式）{</li></ol><p>​执行语句</p><p>​}</p><ol start="2"><li>if（条件表达式）{</li></ol><p>​执行语句</p><p>​}else {</p><p>​条件表达式</p><p>​}</p><ol start="3"><li>if（条件表达式）{</li></ol><p>​执行语句</p><p>​}else if（条件表达式）{</p><p>​执行语句</p><p>​}else if（条件表达式）{</p><p>​执行语句</p><p>​}</p><p>​。。。</p><p>​else {</p><p>​执行语句</p><p>​}</p><h4 id="相关练习"><a href="#相关练习" class="headerlink" title="相关练习"></a>相关练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">//两个变量交换的练习</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">place1</span> <span class="operator">=</span> <span class="string">&quot;广东&quot;</span>, place2 = <span class="string">&quot;江苏&quot;</span>,tempPlace = <span class="string">&quot;中转&quot;</span>;<span class="comment">//定义一个临时变量</span></span><br><span class="line">        <span class="comment">//利用临时变量交换赋值</span></span><br><span class="line">        tempPlace = place1;</span><br><span class="line">        place1 = place2;</span><br><span class="line">        place2 = tempPlace;</span><br><span class="line">        <span class="comment">//输出最终交换的结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;起点:&quot;</span> + place1);</span><br><span class="line">        System.out.println(<span class="string">&quot;终点:&quot;</span> + place2 );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用三元运算符或者if-else将三者最大值输出</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">2</span>, num2 = <span class="number">4</span>, num3 = <span class="number">6</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (num1 &gt; num2)? num1 : num2;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max1</span> <span class="operator">=</span> (num2 &gt; num3)? num2 : num3;</span><br><span class="line">        System.out.println(max1 );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">2</span>, i2 = <span class="number">4</span>, i3=<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">if</span> (i1 &gt; i2 &amp;&amp; i1 &gt;i3) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;三个数字当中最大值:&quot;</span> + i1);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i2 &gt;i1 &amp;&amp; i2 &gt;  i3) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;三个数字当中最大值:&quot;</span> + i2);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i3 &gt;i1 &amp;&amp; i3&gt;  i2) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;三个数字当中最大值:&quot;</span> + i3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;没有合适的答案&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过if-else二选一输出定义的double变量的数据</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">10.1</span> , d2 = <span class="number">15.4</span>;</span><br><span class="line">    <span class="keyword">if</span> (d1 &gt; <span class="number">10</span> &amp;&amp; d2 &lt; <span class="number">20</span>) &#123;</span><br><span class="line">        System.out.println(d1 + d2);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(d1 * d2 );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if-else补充"><a href="#if-else补充" class="headerlink" title="if-else补充"></a>if-else补充</h4><ol><li><p>else的结构是可选的。</p></li><li><p>针对于条件表达式；</p><p>如果多个文件表达式之间是互斥关系（或者没有交集的关系），哪个判读和执行语句声明在上面还是下面</p><p>都不影响</p></li></ol><p>​       如果多个条件表达式之间有交集关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面</p><p>​如果多个条件表达式之间有包含关系，需要将范围小的声明在范围大的上面，否则，范围小的就受影响。</p><ol start="3"><li>if-else是可以嵌套使用的。if-else是就近原则</li><li>如果if-else结构中的执行语句只有一行时，{}是可以省略的，但不建议使用</li></ol><h4 id="Switch-case"><a href="#Switch-case" class="headerlink" title="Switch-case"></a>Switch-case</h4><p>结构:</p><p>switch（表达式）{</p><p>case 常量1：</p><p>​执行语句1：</p><p>​&#x2F;&#x2F;break；</p><p>case 常量2：</p><p>​执行语句2：</p><p>​&#x2F;&#x2F;break；</p><p>….</p><p>default；</p><p>​执行语句；</p><p>​&#x2F;&#x2F;break；</p><p>}</p><p>说明</p><p>①根据switch的表达中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应的case结构中，调用执行语句。当调用执行语句完成后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或者次switch-case结构末尾结束为止。</p><p>②break关键字可以使用在此结构中，执行到此关键字，则跳出此swistch-case结构</p><p>③switch结构中的表达式只能是以下6种数据类型之一：byte、short、char、int、枚举类型（jdk5.0新增）、String类型（jdk7.0新增）</p><p>④case之后只能声明常量，不能声明范围。</p><p>⑤braek关键字是可选的。</p><p>⑥default：相当于if-else种的else。</p><p>⑦switch-case结构中多个case的执行语句相同，则可以进行合并处理</p><p>⑧凡是可以使用switch-case的结构，都可以转换为if-else。反之，则不行。</p><p>⑨当写分支结构时，发现两种结构都可以使用，（同时，switch中表达式的取值情况不太多），则优先使用switch-case。</p><hr><h3 id="Scanner-类"><a href="#Scanner-类" class="headerlink" title="Scanner 类"></a>Scanner 类</h3><p>具体实现步骤</p><ol><li>导包：import java.util.Scanner ; &#x2F;&#x2F;import 导入</li><li>Scanner的实例化：Scanner scan &#x3D; new Scanner（system.in）</li><li>调用Scanner类的相关方法（next（）&#x2F;nextXxx（）），来获取指定类型的变量。一般读取什么类型的值就定义什么类型的变量。</li></ol><p>注意：需要根据相应的方法，来输入指定类型的值。如果输入的数据类型与要求类型不匹配时，会报异常；InputMisMatchExce导致程序终止。</p><hr><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>循环语句的四个要素</p><p>①初始化条件（int_statement）</p><p>②循环条件（test_exp）–&gt;是boolean类型</p><p>③循环体（body_statement）</p><p>④迭代条件（alter_statement）</p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>结构：</p><p>for（①；②；④）{</p><p>​③</p><p>}</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>结构</p><p>①</p><p>while（②）{</p><p>​      ③；</p><p>​  ④；</p><p>}</p><p>说明 </p><ol><li>while不能缺少迭代部分，也就是④，才能避免出现死循环的情况。</li><li>for循环和while循环是可以相互转换的。</li><li>for循环的①只能在作用域内使用，而while的①在作用域之外还能调用。</li></ol><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h4><p>结构：</p><p>①</p><p>do{</p><p>​③；</p><p>​④；</p><p>}while(②)；</p><p>执行过程：①-③-④-②-③-④-…-②</p><p>说明：do-while至少循环一次循环体，大部分情况下 for和while使用更多，较少使用do-while。</p><h5 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h5><ol><li>不在循环条件部分限制的结构：for(;;)或while（true）</li><li>结束循环的方式：①循环条件返回false ②在循环体中执行break。</li></ol><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><p>定义：将一个循环结构A声明在另一个循环结构B的循环体中。</p><ol><li><p>外层循环</p></li><li><p>内层循环</p></li><li><p>内层循环结构遍历一遍，只相当于外层循环循环体执行了一次。 </p><p><strong>双层for循环的计算： 内层循环m次 ，外层循环n次，实际总计实行了m*n次循环。</strong></p></li><li><p>技巧：外层循环控制行数，内层循环控制列数</p></li></ol><h5 id="特殊关键字的使用"><a href="#特殊关键字的使用" class="headerlink" title="特殊关键字的使用"></a>特殊关键字的使用</h5><p>不同点：</p><p>①break使用范围是在switch-case和循环结构中，作用是结束当前的循环。</p><p>②continute使用在循环结构中，作用是结束单次循环</p><p>相同点：关键字后面不能声明执行语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">labe1:<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>;i &lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">1</span>;j &lt;= <span class="number">10</span>;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span> (j % <span class="number">4</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">     <span class="comment">//break;//默认跳出包裹此关键字最近一层的循环</span></span><br><span class="line">    <span class="comment">//continue;//默认跳出包裹此关键字最近一层的一次循环</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//break labe1;//结束指定标识的一层循环结构</span></span><br><span class="line">    <span class="keyword">continue</span> labe1;<span class="comment">//结束指定标识的一层循环结构的当次循环</span></span><br></pre></td></tr></table></figure><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li><p>数组（array):是多个相同类型数据按一定的顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一的管理。</p></li><li><p>数组的常见概念</p><p>数组名</p><p>元素</p><p>角标、下标（或索引）</p><p>数组的长度：元素的个数</p></li><li><p>数组的特点：①数组是有序排列的</p><p>②数据属于引用数据类型，数据的元素可以是任意类型。</p><p>③创建数组对象会在内存中开辟一整块连续的空间。不连续的叫链表。</p><p>④数据的长度一旦确定，就不可以修改。</p></li><li><p>数组的分类</p></li></ol><p>①按照维数:一维数组。二维数组….</p><p>②按照数组元素的类型：基本数据类型元素的数组、引用数据类型元素的数组..</p><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p>①一维数组的声明和初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①一维数组的声明和初始化</span></span><br><span class="line">   </span><br><span class="line">      <span class="type">int</span>[] ids;<span class="comment">//声明</span></span><br><span class="line">      <span class="comment">//1.1静态初始化：数组的初始化和数组元素的赋值操作同时进行</span></span><br><span class="line">      ids = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1001</span>, <span class="number">1002</span>, <span class="number">1003</span>, <span class="number">1004</span>&#125;;</span><br><span class="line">      <span class="comment">//1.2动态初始化：数组的初始化和数组元素的赋值操作分开进行</span></span><br><span class="line">      String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>总结：数据一旦初始化完成，数组的长度也就确定了。</p><p>②如何调用数组的指定位置的元素：通过角标的方式调用</p><p>数组的角标（或索引0是从0开始的，到数组的长度-1结束的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//②如何调用数组的指定位置的元素：通过角标的方式调用</span></span><br><span class="line">names[<span class="number">0</span>] = <span class="string">&quot;zhang&quot;</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">&quot;san&quot;</span>;</span><br><span class="line">names[<span class="number">2</span>] = <span class="string">&quot;li&quot;</span>;</span><br><span class="line">names[<span class="number">3</span>] = <span class="string">&quot;si&quot;</span>;</span><br><span class="line">names[<span class="number">4</span>] = <span class="string">&quot;wu&quot;</span>;</span><br></pre></td></tr></table></figure><p>③如何获取数组的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//③如何获取数组的长度</span></span><br><span class="line"><span class="comment">//属性：length</span></span><br><span class="line">System.out.println(names.length);</span><br><span class="line">System.out.println(ids.length);</span><br></pre></td></tr></table></figure><p>④如何遍历数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//④如何遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">    System.out.println(names[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤数组元素的默认初始化值</p><ol><li>数组元素是整形：0</li><li>数组元素是浮点型：0.0</li><li>数组元素是char型：0或者是’u0000’，而非‘0’</li><li>数组元素是boolean型：false</li><li>数组元素是引用数据类型：null</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;************&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">short</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">short</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">    System.out.println(arr1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">     System.out.println(arr2[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> [] arr3 =<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr3.length; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----&quot;</span> + arr3[i] + <span class="string">&quot;******&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr3[<span class="number">0</span>] ==<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;************&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> [] arr4 =<span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">5</span>];</span><br><span class="line">    System.out.println(arr4[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;************&quot;</span>);</span><br><span class="line">String [] arr5 =<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line">System.out.println(arr5[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(arr5[<span class="number">0</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;shuchu&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑥数组的内存解析</p><p>栈（stack）：局部变量。栈的特点是先进后出</p><p>堆（heap）：new出来的结构：对象、数组</p><p>方法区：常量池，静态域，类信息，即时编译后的代码</p><p>一维数组的内存解析：如图</p><p><img src="https://s4.ax1x.com/2022/02/22/bpUmFg.png" alt="img"></p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>二维数组：可以看成是一维数组array1又作为另一个一维数组array2的元素而存在的</p><p>①二维数组的声明和初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//①二维数组的声明和初始化</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//一维数组</span></span><br><span class="line"><span class="comment">//二维数组静态初始化</span></span><br><span class="line"><span class="type">int</span>[][] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//二维数组动态初始化1</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//二维数组动态初始化2</span></span><br><span class="line">String[][] arr3 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>][];</span><br><span class="line"><span class="comment">//不算标准的写法</span></span><br><span class="line"><span class="type">int</span> [][]  arr5 = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> [] arr4 [] = <span class="keyword">new</span> <span class="title class_">int</span>[][] &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>②如何调用数组的指定位置的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(arr1[<span class="number">0</span>][<span class="number">1</span>]);<span class="comment">//2</span></span><br><span class="line">System.out.println(arr2[<span class="number">1</span>][<span class="number">1</span>]);<span class="comment">//nu11</span></span><br><span class="line"></span><br><span class="line">arr3[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">4</span>];</span><br><span class="line">System.out.println(arr3[<span class="number">1</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>③如何获取数组的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(arr4.length);<span class="comment">//3</span></span><br><span class="line">System.out.println(arr4[<span class="number">0</span>].length);<span class="comment">//3</span></span><br><span class="line">System.out.println(arr4[<span class="number">1</span>].length);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>④如何遍历二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i &lt; arr4.length;i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;arr4[i].length;j++)&#123;</span><br><span class="line">        System.out.print(arr4[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤数组元素的默认初始化值</p><p>二维数组分为外层数组的元素，内层数组的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int [] arr =new int [4][3];</span><br><span class="line">外层元素：arr[0],arr[1]等等</span><br><span class="line">内层元素：arr[0][0],arr[1][2]等等</span><br></pre></td></tr></table></figure><p>针对初始化方式一，比如:int [] [] arr &#x3D; new int [4][3] </p><p>外层元素的初始化值为：地址值</p><p>内层元素的初始化值为：与一维数组初始化情况相同</p><p>针对初始化方式二，比如:int [] [] arr &#x3D; new int [4][] </p><p>外层元素的初始化值为：null</p><p>内层元素的初始化值为：不能调用，否则报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//⑤数组元素的默认初始化值</span></span><br><span class="line"><span class="type">int</span> arr6 [][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr6 [<span class="number">0</span>]);<span class="comment">//地址值</span></span><br><span class="line">System.out.println(arr6 [<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="type">double</span> [][] arr7 = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">4</span>][];</span><br><span class="line">System.out.println(arr7 [<span class="number">1</span>]);<span class="comment">//null</span></span><br><span class="line">System.out.println(arr7 [<span class="number">1</span>][<span class="number">0</span>]);<span class="comment">//空指针，报错</span></span><br></pre></td></tr></table></figure><p>⑥二维数组的内存解析</p><p><img src="https://s4.ax1x.com/2022/02/22/bpUgte.png" alt="内存解析"></p><h3 id="数组练习"><a href="#数组练习" class="headerlink" title="数组练习"></a>数组练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">//练习2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//记录数组的和</span></span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;,&#123;<span class="number">12</span>,<span class="number">9</span>&#125;,&#123;<span class="number">7</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">                sum += arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;该二维数组的总和为：&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//       练习3</span></span><br><span class="line"><span class="comment">//       int [] x,y[] 实际上等于 int [] x, int [][] ；</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//杨辉三角练习</span></span><br><span class="line">        <span class="comment">//1.声明并初始化二维数组</span></span><br><span class="line">        <span class="type">int</span> [][] yangHui = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];</span><br><span class="line">        <span class="comment">//2.给数组的元素赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt; yangHui.length;i++)&#123;</span><br><span class="line">            yangHui[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i +<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//2.1给首末元素赋值</span></span><br><span class="line">            yangHui[i][<span class="number">0</span>] = yangHui[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//2.2给每行的非首末元素赋值</span></span><br><span class="line"><span class="comment">//        if(i&gt;1) &#123;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; yangHui[i].length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                yangHui[i][j] = yangHui[i - <span class="number">1</span>][j - <span class="number">1</span>] + yangHui[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.遍历二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt; yangHui.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt; yangHui[i].length;j++)&#123;</span><br><span class="line">                System.out.print(yangHui[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//经典笔试题</span></span><br><span class="line"></span><br><span class="line">       <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line">        <span class="comment">//[0.0,1.0)=&gt;[0.0,30.0)=&gt;[1.0,31.0)=&gt;[1,30]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">            arr1[i] = (<span class="type">int</span>) (Math.random() * (<span class="number">30</span> - <span class="number">1</span> + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr1[i] == arr1[j]) &#123;</span><br><span class="line">                    i--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(arr1[i]);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p> 1.定义一组元素为10的数组，并从1-30之间抽取随机字数给数组元素赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">    arr2[i] = (<span class="type">int</span>) (Math.random() * (<span class="number">99</span> - <span class="number">10</span> + <span class="number">1</span>) + <span class="number">10</span>);</span><br><span class="line">    System.out.print(arr2[i] + <span class="string">&quot;\t&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p>2.求数组的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr2[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i &lt; arr2.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (max &lt; arr2[i]) &#123;</span><br><span class="line">        max = arr2[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;最大值为：&quot;</span> + max);</span><br></pre></td></tr></table></figure><p>3.求数组的最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr2[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr2.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (min &gt;arr2[i])&#123;</span><br><span class="line">        min =arr2[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;最小值为：&quot;</span> + min);</span><br></pre></td></tr></table></figure><p>4.数组元素的总和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i &lt; arr2.length;i++)&#123;</span><br><span class="line">    sum +=arr2[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;和值为：&quot;</span> + sum);</span><br></pre></td></tr></table></figure><p>5.数组的平均数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">average</span> <span class="operator">=</span> sum / arr2.length;</span><br><span class="line">System.out.println(<span class="string">&quot;均值为：&quot;</span> + average);</span><br></pre></td></tr></table></figure><hr><p>arrarray1和array2的关系是：array1和array2的地址值相同，都指向了堆空间中唯一的一个数组实体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//定义两个数组</span></span><br><span class="line"><span class="type">int</span>[] array1 ,array2;</span><br><span class="line"><span class="comment">//显示数组array1的内容</span></span><br><span class="line">array1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt; array1.length;i++)&#123;</span><br><span class="line">    System.out.print(array1[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值array2变量等于array1，不能称作数组的复制，只是array2复制了array1的地址值。</span></span><br><span class="line">array2 = array1;</span><br><span class="line"><span class="comment">//修改array2的偶索引元素，使其索引值等于（如array[0]=0，array[2]=2，</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;array2.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> )&#123;</span><br><span class="line">        array2[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印出数组array1；</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt; array1.length;i++) &#123;</span><br><span class="line">    System.out.print(array1[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//补充 真正意义上array2对array1数组的复制</span></span><br><span class="line">array2 = <span class="keyword">new</span> <span class="title class_">int</span>[array1.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i&lt; array2.length;i++)&#123;</span><br><span class="line">    array2[i]=array1[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的复制、反转、查找"><a href="#数组的复制、反转、查找" class="headerlink" title="数组的复制、反转、查找"></a>数组的复制、反转、查找</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的复制(区别于数组变量的赋值：arr1 = arr)</span></span><br><span class="line">        String[] arr1 = <span class="keyword">new</span> <span class="title class_">String</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr1.length;i++)&#123;</span><br><span class="line">            arr1[i] = arr[i];</span><br><span class="line">            System.out.print(arr1[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组的反转</span></span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length /<span class="number">2</span> ;i++)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[arr.length -i -<span class="number">1</span>];</span><br><span class="line">            arr[arr.length -i -<span class="number">1</span> ] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line"><span class="comment">//        for(int i = 0,j = arr.length;i&lt; j;i++,j--)&#123;</span></span><br><span class="line"><span class="comment">//          String temp = arr [i];</span></span><br><span class="line"><span class="comment">//            arr [i] =arr[j];</span></span><br><span class="line"><span class="comment">//            arr [j] = temp;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找（或搜索）</span></span><br><span class="line">        <span class="comment">//1.线性查找</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="string">&quot;BB&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (dest.equals(arr[i]))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;找到了指定元素，位置为：&quot;</span> + i);</span><br><span class="line">                isFlag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isFlag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;很遗憾，没找到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.二分法查找的前提是：所要查找的数组必须有序(熟悉)</span></span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">98</span>,-<span class="number">34</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">66</span>,<span class="number">79</span>,<span class="number">105</span>,<span class="number">210</span>,<span class="number">333</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">dest1</span> <span class="operator">=</span> -<span class="number">34</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">head</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//初始的首索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> arr2.length -<span class="number">1</span>;<span class="comment">//初始的末索引</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFlag1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(head &lt;= end)&#123;</span><br><span class="line"></span><br><span class="line">         <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (head + end ) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (dest1 == arr2[middle])&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;找到了指定元素，位置为：&quot;</span> + middle);</span><br><span class="line">               isFlag1 = <span class="literal">false</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (arr2[middle] &gt; dest1)&#123;</span><br><span class="line">                end = middle -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                head =middle +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isFlag1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;很遗憾，没找到&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="数组的冒泡排序的实现"><a href="#数组的冒泡排序的实现" class="headerlink" title="数组的冒泡排序的实现"></a>数组的冒泡排序的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">     <span class="type">int</span>[]  arr =<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">43</span>,<span class="number">32</span>,<span class="number">76</span>,-<span class="number">98</span>,<span class="number">0</span>,<span class="number">64</span>,<span class="number">33</span>,-<span class="number">21</span>,<span class="number">32</span>,<span class="number">99</span>&#125;;</span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt;arr.length-<span class="number">1</span>;i++)&#123;<span class="comment">//元素是8 最多只进行了7轮就完成了</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt; arr.length -<span class="number">1</span> -i;j++)&#123;<span class="comment">//没进行一轮就会少一个数，每轮都把最大的放在了右边</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span> ] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt;arr.length;i++)&#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="数组的快速排序的实现"><a href="#数组的快速排序的实现" class="headerlink" title="数组的快速排序的实现"></a>数组的快速排序的实现</h3><p>low比5指向的要小，比5小继续走，比5大就停止。</p><p>high比5指向的要大，比5大继续走，比五小就停止。</p><p>当low的大于high就停止查找，并将high指针的值与pivot的值交换结束。</p><p><img src="https://s4.ax1x.com/2022/02/22/bpUf1A.png" alt="快速排序演示"></p><hr><p><img src="https://s4.ax1x.com/2022/02/22/bpU4Xt.png" alt="数组的工具类"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.boolean equals(int[] a ,int[]b);判断两个数组是否相等</span></span><br><span class="line"><span class="type">int</span>[] arr1 =<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 =<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEquals</span> <span class="operator">=</span> Arrays.equals(arr1,arr2);</span><br><span class="line">System.out.println(isEquals);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.String toString(int [] a) 输出数组信息</span></span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.void fill(int[] a,int val)将指定的值填充到数组当中</span></span><br><span class="line">Arrays.fill(arr1,<span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.void sort(int[] a) 对数组进行排序</span></span><br><span class="line">Arrays.sort(arr2);</span><br><span class="line">System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.int binarySearch(int[] a,int key)二分查找</span></span><br><span class="line"><span class="type">int</span>[]  array3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span>Arrays.binarySearch(array3,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">if</span>(index &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(index);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;未找到&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组中常见异常"><a href="#数组中常见异常" class="headerlink" title="数组中常见异常"></a>数组中常见异常</h3><p>1.数组角标越界的异常：ArrayIndexOutOfBoundsExcetion</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.数组角标越界的异常：ArrayIndexOutOfBoundsExcetion</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i= <span class="number">0</span>;i &lt;= arr.length;i++)&#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(arr[-<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p>2.空指针异常：NullPointerException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.空指针异常：NullPointerException</span></span><br><span class="line"><span class="comment">//情况一</span></span><br><span class="line"><span class="type">int</span> [] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">arr1 =<span class="literal">null</span>;</span><br><span class="line">System.out.println(arr1[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二</span></span><br><span class="line"><span class="type">int</span> [][]  arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][];</span><br><span class="line">System.out.println(arr2[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况三</span></span><br><span class="line">String [] arr3 = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;CC&quot;</span>&#125;;</span><br><span class="line">arr3[<span class="number">0</span>] = <span class="literal">null</span>;</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>].toString());</span><br></pre></td></tr></table></figure><hr><h2 id="数据结构（浅知识）"><a href="#数据结构（浅知识）" class="headerlink" title="数据结构（浅知识）"></a>数据结构（浅知识）</h2><ol><li>数据与数据之间的逻辑关系：集合、一对一、一对多、多对多。</li><li>数据的存储结构：</li></ol><p>线性表（一对一）：顺序表（比如：数组）、链表、栈、队列。</p><p>树形结构（一对多）：二叉树</p><p>图形结构（多对多）：有向图、无向图….</p><p>算法：排序算法、搜索算法</p><p>排序算法分类：内部排序和外部排序。</p><p>内部排序算法&#x3D;&gt;1.选择排序：直接选择排序、堆排序  2.交换排序：冒泡排序、快速排序  3.插入排序：直接插入排序、折半插入排序、shell排序（希尔排序）4.归并排序  5.桶式排序  6.基数排序</p><p>算法的五大特征：输入、输出、有穷性、确定性、可行性。</p><p>衡量算法的优劣性：</p><ol><li>时间复杂度：分析关键字的比较次数和记录的移动次数</li><li>空间复杂度：分析排序算法中需要多少辅助内存</li><li>稳定性：若两个记录A和B的关键字值相等，但排序后A、B的先后次序保持不变，则称这种排序算法是稳定的。</li></ol><p>时间复杂度的蓝框值记一下。</p><p><img src="https://s4.ax1x.com/2022/02/22/bpUHAS.png" alt="算法的时间复杂度"></p><hr><h2 id="面向对象上"><a href="#面向对象上" class="headerlink" title="面向对象上"></a>面向对象上</h2><h3 id="面向对象的主线"><a href="#面向对象的主线" class="headerlink" title="面向对象的主线"></a>面向对象的主线</h3><ol><li>java类及类的成员：属性、方法、构造器、代码块、内部类</li><li>面向对象的三大特征：封装、继承、多态、（抽象性）</li><li>其他关键字：this、super、static、final、abstract、interface、package、import</li></ol><p>如何理解面向过程和面向对象？以“人把大象装进冰箱”为例</p><ol><li>面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做</li></ol><p>①把冰箱门打开</p><p>②抬起大象，把大象塞进冰箱</p><p>③把冰箱门关上</p><ol start="2"><li>面向对象：强调了具备功能的对象，以类&#x2F;对象为最小单位，考虑谁来做</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">人&#123;</span><br><span class="line">    打开(冰箱)&#123;</span><br><span class="line">        冰箱，打开();</span><br><span class="line">    &#125;</span><br><span class="line">    抬起(大象)&#123;</span><br><span class="line">        大象，进入(冰箱);</span><br><span class="line">    &#125;</span><br><span class="line">    关闭(冰箱)&#123;</span><br><span class="line">        冰箱，关闭()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">冰箱&#123;</span><br><span class="line">    打开（）&#123;&#125;</span><br><span class="line">    关闭（）&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">大象&#123;</span><br><span class="line">    进入（冰箱）&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面向对象的元素"><a href="#面向对象的元素" class="headerlink" title="面向对象的元素"></a>面向对象的元素</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>类：对一类事物的描述，是抽象的、概念上的定义</p><p>对象：是实际存在的该类事物的每个个体，因此也称为实例（instance）</p><p>面向对象程序设计的重点是类的设计。</p><h4 id="设计类，就是设计类的成员。"><a href="#设计类，就是设计类的成员。" class="headerlink" title="设计类，就是设计类的成员。"></a>设计类，就是设计类的成员。</h4><p>属性&#x3D; 成员变量&#x3D;field&#x3D;域、字段</p><p>方法&#x3D;成员方法&#x3D;函数&#x3D;method  </p><p>创建类的对象&#x3D;类的实例化&#x3D;实例化类</p><h4 id="类和对象的使用（实例化）"><a href="#类和对象的使用（实例化）" class="headerlink" title="类和对象的使用（实例化）"></a>类和对象的使用（实例化）</h4><p>①创建类，设计类的成员</p><p>②创建类的对象</p><p>③通过对象（名）调用类的属性和方法。</p><p>具体操作：</p><ol><li><p>调用对象的结构：属性、方法</p></li><li><p>调用属性：”对象.属性“</p></li><li><p>调用对象的方法：”对象.方法“</p></li></ol><p>补充：如果在一个类中创建了多个 多个对象，每个对象都拥有独立的一套类的属性（非static的）。也就意味着修改其中一个的对象的属性，不会影响到另一个属性的值。</p><h4 id="内存解析"><a href="#内存解析" class="headerlink" title="内存解析"></a>内存解析</h4><p><img src="https://s4.ax1x.com/2022/02/22/bpUvXq.png" alt="内存解析"></p><h3 id="类中属性的使用"><a href="#类中属性的使用" class="headerlink" title="类中属性的使用"></a>类中属性的使用</h3><p>属性（成员变量）与  局部变量</p><ol><li>相同点</li></ol><p>①定义变量的格式一致：数据类型 变量名 &#x3D; 变量值</p><p>②都是先声明，后使用</p><p>③变量都有其固定的使用域</p><ol start="2"><li>不同点：</li></ol><p>①在类中声明的位置不同</p><p>属性：之间定义在类的一对{}内</p><p>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</p><p>②关于权限修饰符的不同</p><p>属性：可以在声明属性时，指明其权限，使用权限修饰符</p><p>常用的权限修饰符：private、public、缺省、protected</p><p>局部变量：不可以使用权限修饰符。</p><ol start="3"><li>默认初始化值</li></ol><p>属性：类的属性，根据其类型，都有默认初始化值。</p><p>​整形（byte、short、int、long）:0</p><p>​浮点型（float、double）：0.0</p><p>​字符型（char）：0或者以‘\u0000’来表示</p><p>​布尔型（boolean）：false</p><p>​引用数据类型（类、接口、数组）：null</p><p>局部变量：没有默认初始化值。也就意味着在调用局部变量之前必须先显式赋值。 </p><p>​ 需要注意的是形参在调用时赋值即可</p><ol start="4"><li>在内存中加载的位置不同</li></ol><p>属性：加载在堆空间中（非static）</p><p>局部变量：加载在栈空间中</p><h3 id="类中方法的使用"><a href="#类中方法的使用" class="headerlink" title="类中方法的使用"></a>类中方法的使用</h3><p>方法：描述类应该具有的功能</p><ol><li>例如：Math类：sqrt（）、random（）…</li></ol><p>​Scanner类：nextXxx（）…</p><p>​Arrays类：sort（）、binarySearch()、toString（）、equals（）…</p><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;&#125;<span class="comment">//不返回数据，无形参的void方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> hour)</span>&#123;&#125;<span class="comment">//不返回数据，有形参的void方法</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;&#125;<span class="comment">//返回数据，无形参的 返回值的类型方法</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNation</span><span class="params">(String nation)</span>&#123;&#125;<span class="comment">//返回数据，有形参的 返回值的类型方法</span></span><br></pre></td></tr></table></figure><p><img src="https://s4.ax1x.com/2022/02/22/bpap7T.png" alt="方法的分类"></p><ol start="2"><li><p>方法的声明：</p><p>格式：权限修饰符  返回值类型  方法名（形参列表）{</p><p>​方法体</p><p>}</p></li></ol><p>​static、final、abstract来修饰方法</p><ol start="3"><li>权限修饰符</li></ol><p>java规定的4种权限修饰符：private、public、缺省、protected</p><ol start="4"><li>返回值类型</li></ol><p>有返回值 与  无返回值</p><p>①区别：如果方法有返回值，则必须在方法声明时，指定返回值的类型。同时在方法中，必须使用return关键字返回指定类型的变量或常量。“return 数据”</p><p>如果方法没有返回值，则方法声明时，使用void来表示。一般在没有返回值的方法中不用使用return，非要使用只能用“ return； ”表示结束此方法的意思</p><p>②定义方法要不要返回值</p><p>​1.看题目要求</p><p>​2.根据经验判断</p><ol start="5"><li><p>方法名：属于标识符，遵循标识符的规则和规范，“见名知意”</p></li><li><p><strong>形参列表</strong>：方法可以声明0个、一个或多个形参。</p><p>①格式：数据类型1 形参1，数据类型2，形参2，….</p></li></ol><p>​②定义方法判断是否需要形参</p><p>​1.题目要求</p><p>​2.根据经验判断</p><ol start="7"><li>方法体：方法功能的体现</li></ol><hr><h3 id="return关键字的使用"><a href="#return关键字的使用" class="headerlink" title="return关键字的使用"></a>return关键字的使用</h3><ol><li>使用范围：使用在方法体中</li><li>作用：①结束方法 ②针对有返回值类型的方法，使用“  return 数据” 方法返回需要的数据</li><li>补充：return关键字后面不可以声明执行语句</li></ol><hr><h4 id="方法的使用补充"><a href="#方法的使用补充" class="headerlink" title="方法的使用补充"></a>方法的使用补充</h4><ol><li>可以调用当前类的属性或方法</li></ol><p>特殊的：方法A中调用了方法A—-递归方法</p><ol start="2"><li>方法中不可以定义方法</li></ol><hr><h3 id="Jvm内存结构"><a href="#Jvm内存结构" class="headerlink" title="Jvm内存结构"></a>Jvm内存结构</h3><p>发生在字节码文件编译完开始运行的环节。使用JVM中的类的加载器和解释器对生成的字节码文件进行解释运行。此时需要将字节码文件对应的类加载到内存中，才涉及了内存解析</p><p>在虚拟机栈中，局部变量储存在栈结构中，new出来的结构（数组、对象、对象的属性（非static））都储存在堆空间中。方法区则储存类的加载信息、常量池、静态域</p><hr><p><strong>如何理解“万事万物皆对象”？</strong></p><ol><li>在java语言中，都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构</li><li>涉及到Java语言与前端html、后端数据库交互时，在java层面交互时，都体现为类、对象。</li></ol><h3 id="对象数组内存解析"><a href="#对象数组内存解析" class="headerlink" title="对象数组内存解析"></a>对象数组内存解析</h3><p>①引用数据类型的变量只可能存储两类值：null 或 地址值（含变量的类型）</p><p><img src="https://s4.ax1x.com/2022/02/22/bpaA39.png" alt="内存分析"></p><hr><h3 id="匿名对象的使用"><a href="#匿名对象的使用" class="headerlink" title="匿名对象的使用"></a>匿名对象的使用</h3><ol><li>概念：创建的对象没有显式的赋给一个变量名，即为匿名对象</li><li>特征：匿名对象只能调用一次</li><li>应用场景：见代码</li></ol><hr><h3 id="方法的相关补充"><a href="#方法的相关补充" class="headerlink" title="方法的相关补充"></a>方法的相关补充</h3><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><ol><li>概念：在同一个类当中，允许存在一个以上的同名方法，只需要它们的参数个数或者参数类型不同即可</li></ol><p>满足“两同一不同”：同一个类、相同方法名。参数列表不同：参数类型不同，参数个数不同，参数顺序不同</p><ol start="2"><li><p>举例：Arrays类重重载的sort（）&#x2F;binarySearch（）</p></li><li><p>判断是否重载：跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系。</p></li><li><p>在通过对象调用方法时，如何确定某一个指定的方法</p></li></ol><p>​方法名—&gt;参数列表</p><h4 id="可变个数的形参"><a href="#可变个数的形参" class="headerlink" title="可变个数的形参"></a>可变个数的形参</h4><ol><li>是属于jdk5.0的新增内容</li><li>①格式：数据类型 … 变量名</li></ol><p>​②当调用可变个数形参的方法时，传入的参数个数可以是0个，1个，2个等等</p><p>​③可变个数形参的方法与本类中方法名相同，形参类型不同的方法之间构成重载。</p><p>​④可变个数形参的方法与本类中方法名相同，形参类型也相同的方法之间不构成重载。也就是两者不能共存</p><p>​⑤可变个数形参在方法的形参中，只能声明在末尾</p><p>​⑥可变个数形参在方法的形参中，只能声明一个可变形参。</p><p>补充：1可变参数方法和固定参数方法同时满足执行条件时，会<strong>优先执行固定参数方法</strong> 。 —- 固定参数方法优先级高于可变参数方法。</p><p>​2 可变参数其实是一个 <strong>数组</strong> </p><p>​3 如果一个方法有多个参数，必须把可变参数放到<strong>最后</strong>。</p><p>​            4 <strong>一个方法，只能有一个可变参数。</strong></p><h4 id="方法参数的值传递机制：值传递"><a href="#方法参数的值传递机制：值传递" class="headerlink" title="方法参数的值传递机制：值传递"></a>方法参数的值传递机制：值传递</h4><ul><li>关于变量的赋值：如果变量是基本数据类型，此时赋值的是变量所保存的数据值。</li></ul><p>​如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</p><ol><li>形参：方法定义时，声明小括号内的参数</li></ol><p>​实参：方法调用时，实际传递给形参的数据。</p><ol start="2"><li>值传递机制：</li></ol><p>​如果参数是基本数据类型，则实参赋给形参的是实参真实存储的数据值。</p><p>​如果参数是引用数据类型，则实参赋给形参的是实参真实存储数据的地址值 (含变量的数据类型  )</p><p><img src="https://s4.ax1x.com/2022/02/23/bpaenx.png" alt="基本数据类型"></p><p><img src="https://s4.ax1x.com/2022/02/23/bpanHK.png" alt="引用数据类型"></p><h4 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h4><p>定义：一个方法体内调用它自身。</p><p>②此方法中包含一种隐式的循环，会重复执行某段代码，但这种重复执行无需循环控制</p><p>需要注意的是：递归要往已知方向递归，否则就会形成无穷递归，类似死循环</p><p>n！–&gt;（n的阶乘）是指从1、2……（n-1）、n这n个数的连乘积，即n！&#x3D;1×2×……×（n-1）×n，在排列组合中常用到。</p><hr><h3 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征"></a>面向对象的特征</h3><h4 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h4><ol><li><p>封装性的设计思想：把该隐藏的隐藏起来，该暴露的暴露出来。高内聚，低耦合。</p></li><li><p>封装性的体现之一：将类的属性私有化（private）， 提供公共的方法（public）方法来获取（get）和设置（set）属性的值。</p></li></ol><p>​封装性的体现：①属性私有化 ②方法私有化（不对外暴露的私有方法）③单例模式（将构造器私有化）</p><ol start="3"><li>封装性的体现通过权限修饰符来配合</li></ol><p>​①4种权限修饰符（从小到大）：private、缺省、、protected、public</p><p>​②4种权限可以修饰类的内部结构：属性、方法、构造器、内部类</p><p>​但是对于类的修饰只能用缺省、public</p><ol start="4"><li>java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小</li></ol><p><img src="https://s4.ax1x.com/2022/02/23/bpa33d.png" alt="权限修饰符"></p><h3 id="构造器-Constructor-的使用"><a href="#构造器-Constructor-的使用" class="headerlink" title="构造器(Constructor)的使用"></a>构造器(Constructor)的使用</h3><ol><li>构造器(的作用：创建对象、初始化对象的属性</li><li>说明：①如果没有显式的定义构造器，系统提供一个默认空参的构造器，空参构造器的权限修饰大小与它所在的类相同</li></ol><p>​②定义构造器的格式： 权限修饰符 类名（形参列表）{}</p><ol start="3"><li><p>一个类中定义的多个构造器可以构成重载</p></li><li><p>一旦显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</p></li><li><p>一个类中至少存在一个构造器</p></li><li><p><em><strong>属性赋值的先后顺序</strong></em>：是下列的 ① -②&#x2F;⑤ - ③ - ④</p></li></ol><p>​①默认初始化②显式初始化（属性内直接赋值） ③构造器内初始化  ④ 通过”对象.方法“或”对象.属性“的方式赋值  </p><p>​⑤在代码块中赋值</p><h3 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h3><ol><li><p>JavaBean是指符合以下标准的java类：类是公共的，有一个无参的公共的构造器，有属性且又对应的get、set方法</p></li><li><p>UML类图</p></li></ol><p><img src="https://s4.ax1x.com/2022/02/23/bpatDP.png" alt="JavaBean"></p><hr><h3 id="关键字的使用"><a href="#关键字的使用" class="headerlink" title="关键字的使用"></a>关键字的使用</h3><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><ol><li><p>this可以用来修饰、调用：属性、方法、构造器</p></li><li><p>this修饰属性和方法：此时this理解为当前对象 或 当前正在创建对象（构造器内中的说法）</p><p>2.1在类的方法中，可以使用”this.属性“或”this.方法“的方式调用当前对象的属性和方法。在一般情况下，都选择省略”this.“。但是在特殊情况下，如果方法的形参和类的属性同名时，则必须显式的使用”this.变量“的方式，表明此变量是属性，而非形参。</p></li></ol><p>​2.2 在类的构造器中，可以使用”this.属性“或”this.方法“的方式调用当前正在创建的对象的属性和方法。在一般情况下，都选择省略”this.“。但是在特殊情况下， 如果构造器的形参和类的属性同名时，则必须显式的使用”this.变量“的方式，表明此变量是属性，而非形参。</p><ol start="3"><li>this调用构造器</li></ol><p>​①在类的构造器中，可以显式的使用”this(形参列表)“方式，调用指定类的其他构造器</p><p>​②构造器中不能通过”this(形参列表)“方式调用自己</p><p>​③如果一个类中有n个构造器，则最多只有n-1构造器使用“this（形参列表）”</p><p>​④规定：“this（形参列表）”必须声明在构造器的首行</p><p>​⑤构造器内部最多只有一个声明“this（形参列表）”，用来调用其他的构造器# </p><h5 id="package（包）"><a href="#package（包）" class="headerlink" title="package（包）"></a>package（包）</h5><ol><li>为了更好实现项目中类的管理，提供了包的概念。</li><li>用package声明类和接口所属的包，声明在源文件首行</li><li>包也属于标识符，也需要遵循标识符命名规则、规范（都要小写）</li><li>每一个“.”代表一层文件目录。</li></ol><p>补充：同一个包下不可以命名同名的接口和类，不同的包名可以</p><p><img src="https://s4.ax1x.com/2022/02/23/bpaw4g.png" alt="MVC设计模式"></p><h4 id="import（导入）"><a href="#import（导入）" class="headerlink" title="import（导入）"></a>import（导入）</h4><ol><li>在源文件中显式的使用import结构导入指定包下的类、接口</li><li>声明在包的声明和类的声明之间。</li><li>需要导入多个结构并列写出即可。</li><li>也可以使用“XXX.*”的方式来表示导入xxx包下的所有结构</li><li>使用的类和接口属于Java.lang包下定义的就可以省略import结构</li><li>在同一个包下定义的类和接口也可以省略import结构</li><li>如果在源文件中使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全类名的方式</span></span><br><span class="line">com.java.exer3.<span class="type">Account</span> <span class="variable">acct1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.atgugui.exer3.Account(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><ol start="8"><li>使用“xxx.*”方式调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，依然还是需要显式导入</li><li>import static 导入指定类或接口中的静态结构</li></ol><hr><h2 id="面向对象中"><a href="#面向对象中" class="headerlink" title="面向对象中"></a>面向对象中</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ol><li>继承性的好处：①减少代码的冗余，提高代码的复用性  ②便于功能的扩展  ③为多态性的使用提供前提</li><li>继承性的格式： class A extends B{}</li></ol><p>​A 子类、派生类、subclass  B父类、超类、基类、superclass</p><ol start="3"><li>体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明所有的方法和属性</li></ol><p>​①父类中声明为private的属性或者方法，子类继承父类之后，仍然认为获取了父类中的私有结构，只是因为封装性的影响，使得子类并不能直接调用父类的结构。</p><p>​②子类继续父类之后还能声明自己特有的属性和方法，实现功能的扩展。（子类的功能性更大一些）</p><p>其余补充：子类与父类的关系不同于子集和集合的关系。</p><p><img src="https://s4.ax1x.com/2022/02/23/bpacD0.png" alt="继承性"></p><ol start="4"><li>Java关于继承性的规范</li></ol><p>​①一个父类可以被多个子类继承</p><p>​②java中的类的单继承性是一个类只能有一个父类</p><p>​③子父类是相对的概念</p><p>​④子类直接继承的父类称为直接父类，间接继承的父类成为间接父类</p><p>​⑤子类继承父类以后就直接获取父类以及所有间接父类声明的属性和方法</p><ol start="5"><li>如果没有显式的声明一个类的父类，则此类继承于java.lang.Object类，所有的Java类（除了java.lang.Object类之外）都直接或间接继承于java.lang.Object类，也就意味着所有的Java类都具有java.lang.Object类声明的功能</li></ol><hr><h3 id="debug使用"><a href="#debug使用" class="headerlink" title="debug使用"></a>debug使用</h3><ol><li>调试程序的方法 system out println（）</li><li>step over 执行完当前行的语句，进入下一行</li></ol><p>​step into 进入当前行所调用的方法</p><p>​force step into 强制进入调用的方法</p><p>​drop frame 返回当前方法调用处</p><p>​step out跳出该方法，返回到该方法被调用处的下一行语句</p><p>debug使用相关<a href="https://blog.csdn.net/u012757419/article/details/85294885">https://blog.csdn.net/u012757419/article/details/85294885</a></p><hr><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><ol><li>重写(override&#x2F;overwrite)：子类继承父类以后，对父类中同名同参数的方法进行覆盖操作</li><li>重写以后，当创建子类对象以后，通过对象调用子父类中的同名同参数的方法时，调用的是子类中重写的父类的方法。</li><li>方法重写的规定</li></ol><p>​方法的声明 ： 权限修饰符 返回值类型 方法名（形参列表） throw 异常的类型{<br>​方法体<br>​}</p><p>子类中的方法称为重写的方法，父类中的方法称为被重写的方法</p><p>①子类重写的方法的方法名和形参列表一定是与父类中被重写的方法相同。</p><p>②子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符 唯一一种特殊情况时子类不能重写父类中声明为private权限的方法</p><p>③返回值类型 </p><p>​父类被重写的方法返回值类型是void，则子类中重写的方法返回值也只能 是void</p><p>​父类被重写的方法返回值类型是A类，则子类中重写的方法返回值类型可以是A类也可以是A类的子类</p><p>​父类被重写的方法返回值类型如果是基本数据类型（比如是double），那么子类重写的方法的返回值类型必须是相同的基本数据类型（必须也是double）</p><p>④子类中重写的方法抛出的异常类型不大于父类中被重写的方法抛出的异常类型</p><p>额外说明：子类和父类同名同参数的方法要么都声明为非static的（可以重写），要么都声明为static的（不能被重写）</p><hr><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><ol><li><p>super理解为父类的….</p></li><li><p>super可以用来修饰属性、方法、构造器</p></li><li><p>可以在子类的方法或构造器中使用 ”super.属性“、”super.方法“显式的调用父类中声明的属性和方法。</p><p>①但通常情况下都省略super.的结构。但是面临特殊情况，如子类和父类定义了同名的属性，想在子类当中调用父类中声明同名的属性，则必须显式的使用super.属性的方法，表明调用的是父类当中的属性</p><p>②特殊情况，当子类重写了父类中的方法以后，要在子类的方法中调用父类被重写的方法时，必须显式的使用”super.方法“的方式表明调用的是父类中被重写的方法</p></li><li><p>super调用构造器</p></li></ol><p>​①可以在子类的构造器内显式的使用”super（形参列表）“的方式，表明调用父类中的指定的构造器</p><p>​②”super（形参列表）“的方式必须声明在子类构造器的首行</p><p>​③在类的构造器中，针对”this（形参列表）“ 或者 ”super（形参列表）“只能二选一，不能同时出现</p><p>​④在构造器首行没有显式声明”this（形参列表）“ 或者 ”super（形参列表）”则默认调用父类中空参的构造器</p><p>​⑤在类的多个构造器当中，至少有一个类的构造器使用了 ”super（形参列表）”，调用父类的构造器</p><hr><h3 id="子类对象的实例化过程"><a href="#子类对象的实例化过程" class="headerlink" title="子类对象的实例化过程"></a>子类对象的实例化过程</h3><ol><li>从结果上看（体现了继承性）：子类继承父类以后就获取了父类中声明的属性和方法，而创建子类的对象，在堆空间中就会加载所有父类中声明的属性。</li><li>从过程上看，通过子类的构造器创建子类对象时，一定会直接或间接调用父类的构造器，进而调用父类的父类的构造器，直至调用了java.lang.Object类中的空参构造器，因为加载过父类中的结构，内存中才显示了父类中的结构，子类对象才可以考虑调用</li><li>虽然创建子类对象时调用了父类中的构造器，但始终还是只有一个对象，即new的这一个对象</li></ol><hr><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p>​理解多态性：一个事物的多种形态。</p><p><img src="https://s4.ax1x.com/2022/02/23/bpBka6.png" alt="多态的理解"></p><p>  <strong>多态是个运行时行为</strong>，因为程序只能在程序运行的时候才能决定调用哪个对象的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="comment">//等号右边new必须是等号左边的子类</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br></pre></td></tr></table></figure><ol><li>对象多态性：父类的引用指向子类的对象（子类的对象赋给父类的引用）</li><li>多态的使用：虚拟方法调用（有了对象以后多态性以后，在编译期间只能调用父类中声明的方法，但在运行期间实际执行的是子类重写父类的方法）</li></ol><p>​总结就是编译看左边，执行看右边</p><ol start="4"><li>多态性使用的前提 ① 类的继承关系  ②要有方法的重写</li><li>对象的多态性只适用于方法，不适用于属性（属性编译运行都看左边）。</li><li>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类声明的属性和方法，子类特有的属性和方法不能调用。 </li><li>子类继承父类</li></ol><p>​①若子类重写了父类方法，意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统不可能将父类里的方法转移到子类中</p><p>​②对于实例变量（类的属性）则不存在这样的现象，即使子类里面定义了与父类完全一样相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量（类的属性）</p><p>补充：针对第6点想要调用子类特有的属性和方法</p><p>向下转型：使用强制类型转换符 Man m1 &#x3D; （Man）p2   与基本数据类型强转相似  但使用强转时有可能出现ClassCastException异常</p><p>使用向下转型的目的是为了调用子类中特有的属性和方法</p><p><img src="https://s4.ax1x.com/2022/02/23/bpaf5F.png" alt="类型转换"></p><hr><h3 id="Instanceof关键字"><a href="#Instanceof关键字" class="headerlink" title="Instanceof关键字"></a>Instanceof关键字</h3><ol><li><p>a instanceof A：判断对象a是否为类A(其子类)的实例。如果是返回true，若不是返回false</p><p>实际上是根据父类的引用来判断的，而不是根据此引用对象的类型来决定的 </p><p>例如 Obeject obj &#x3D; new Person();  判断相同与否看的是new Person()这个与instanceof后方的类是否是当前类或其子类的实例对象</p></li><li><p>使用情景： 为了避免在向下转型时出现异常，在进行向下转型之前进行instanceof的判断，一旦返回true就执行向下转型，如果返回的是false，则不能执行</p></li></ol><p>​如果 a instanceof A 返回true，a  instanceof B也返回true，则类B是类A的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//new的只能是同级类或者此类的子类。</span></span><br><span class="line"><span class="comment">//问题一：编译通过，运行不通过</span></span><br><span class="line"><span class="comment">//举例一</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Women</span>();</span><br><span class="line"><span class="type">Man</span> <span class="variable">m3</span> <span class="operator">=</span> (Man)p3;</span><br><span class="line"><span class="comment">//举例二</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Man</span> <span class="variable">m4</span> <span class="operator">=</span> (Man)p4;</span><br><span class="line"></span><br><span class="line"><span class="comment">//问题二：编译通过，运行通过</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person)obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//问题三，编译不通过</span></span><br><span class="line"><span class="comment">//等号右边new必须是等号左边的子类</span></span><br><span class="line"><span class="type">Man</span> <span class="variable">m5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Women</span>(); </span><br></pre></td></tr></table></figure><hr><h3 id="Object类的使用"><a href="#Object类的使用" class="headerlink" title="Object类的使用"></a>Object类的使用</h3><ol><li>object类是所有java类的根父类</li><li>如果在类的声明中没有显示的使用extends关键字指定其继承的父类，则默认父类为Java.lang.Object类</li><li>Object类中的属性和方法具有通用性</li><li>Object类有一个默认的空参构造器</li></ol><p>finalize（）：对象被回收之前调用当前对象的finalize的方法通知系统进行回收，一般不主动调用，有垃圾回收器自动调用</p><p>引用数据类型分为了类 数组 接口，其中数组可以看作一个特殊的类，也继承了Object类，属于Object的子类</p><h4 id="x3D-x3D-和equals的区别"><a href="#x3D-x3D-和equals的区别" class="headerlink" title="&#x3D;&#x3D;和equals的区别"></a>&#x3D;&#x3D;和equals的区别</h4><ol><li>&#x3D;&#x3D;的使用</li></ol><p>&#x3D;&#x3D;：运算符   </p><p>①可以使用在基本数据类型变量和引用数据类型变量当中</p><p>②如果比较的是基本数据类型变量，比较两个变量保存的数据是否相等，但不一定要求数据类型相同（i &#x3D;&#x3D; d）</p><p>如果比较的是引用数据类型变量，比较两个对象的地址值是否相同</p><p>补充：&#x3D;&#x3D; 符号使用时，必须保证符号左右两边的变量类型一致</p><ol start="2"><li>equals（）方法的使用</li></ol><p>①equals（）是个方法，而非运算符。</p><p>②只适用于引用数据类型</p><p>③Object类中equals()的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>说明：Object类中定义的equals()和 &#x3D;&#x3D; 作用相同，比较两个对象地址值是否相同</p><p>④<strong>像String、Date、File、包装类等都重写了equals()方法，重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的“实体内容”是否相同</strong></p><ol start="3"><li>通常情况下，自定义的类如果使用equals()方法通常也是比较两个对象的“实体内容”是否相同，则需要对Object类中的equals()方法进行重写</li></ol><p>重写的规则：比较两个对象的实体内容是否相同</p><p>特别需要注意的是在集成开发环境中自己生成和手动生成的区别是：自动生成的判断的是两个类的类型是否一样</p><p>自己写的判断的是两个类是否互为父子类，是则会返回true，但是又漏洞 例如父类和子类中都生成了同样的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>():</span><br><span class="line"><span class="type">Man</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line"><span class="comment">//在自动生成中由于判断是两个类的类型是不同的，所以返回了false</span></span><br><span class="line"><span class="comment">//而在手动写的方法中instance判断了m是person的子类实例，返回了true，进入下一步强转，导致最终返回了true，这就是手动生成的弊端所在</span></span><br><span class="line">system,out,println(p.age.equals(m));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s4.ax1x.com/2022/02/23/bpaovR.png" alt="== 与 equals的区别"></p><p><img src="https://s4.ax1x.com/2022/02/23/bpaHDx.png" alt="方法原则"></p><hr><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h3><ol><li>输出一个对象的引用时，实际上就是调用当前对象的toString（）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Customer</span> <span class="variable">cust</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Custeomer</span>（<span class="string">&quot;你好&quot;</span>）</span><br><span class="line">    system.out.println(cust.toString());<span class="comment">//地址值//ObejctExer.MyDate@1540e19d</span></span><br><span class="line"> system.out.println(cust);<span class="comment">//地址值=数据类型+@+地址</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Obejct类中toString()的定义:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>像String、Date、File、包装类等都重写了Object类中的toString()方法，重写以后，调用该方法输出的是对象的”实体内容“信息</li><li>自定义类也可以重写toString()方法，以返回对象实体内容</li></ol><p>​重写toString()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Stirng <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Customer[name = &quot;</span> + name + <span class="string">&quot;,age = &quot;</span> + age + <span class="string">&quot;]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="单元测试使用方法"><a href="#单元测试使用方法" class="headerlink" title="单元测试使用方法"></a>单元测试使用方法</h3><ol><li>此时的java类要求：①类是public ②此类提供公共的无参的构造器</li><li>此类声明单元测试的方法：此时的单元测试方法：方法的权限是public，没有返回值，没有形参</li><li>此单元测试方法上需要声明@Test，并在单元测试中导入包import org.junit.Test;</li><li>声明好单元测试方法以后，就可以在方法体内测试相关的代码</li><li>完成后，左键双击单元测试方法名，右键：run 单元测试方法名（）</li><li>执行结果绿色正常 红色异常</li></ol><hr><h3 id="包装类的使用"><a href="#包装类的使用" class="headerlink" title="包装类的使用"></a>包装类的使用</h3><ol><li><p>java提供了8种基本数据类型对应的包装类</p><p>包装类的目的是使得基本数据类型的变量具有类的特征</p></li></ol><p><img src="https://s4.ax1x.com/2022/02/23/bpavPe.png" alt="包装类"></p><ol start="2"><li>基本数据类型、包装类、String三者之间的转换</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jdk5.0之前的转换法</span></span><br><span class="line"><span class="comment">//基本数据类型 ---&gt;&gt; 包装类：调用包装类的构造器</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>；</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">in1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(num)</span><br><span class="line">    system.out.println(in1.toString());</span><br><span class="line"></span><br><span class="line"> <span class="type">Integer</span> <span class="variable">in2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">    system.out.println(in2.toString());</span><br><span class="line"></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>)；</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&quot;TrUe&quot;</span>)；</span><br><span class="line">    <span class="comment">//忽略大小写的情况只要不为空值且也是true则返回true；</span></span><br><span class="line">    system.out.println(b2);<span class="comment">//true</span></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&quot;true122&quot;</span>)</span><br><span class="line">    system.out.println(b3); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//包装类 ---&gt;&gt; 基本数据类型：调用包装类的xxxValue()</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">in1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">12</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> in1.intValue();</span><br><span class="line">system.out.println(i1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本数据类型、包装类 ---&gt;&gt; String类型</span></span><br><span class="line"><span class="comment">//方式一：连接运算</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>；</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> num + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//方式二：调用String的valueOf(Xxx xxx)</span></span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">13.1f</span>；</span><br><span class="line">    String.valueOf(f1);<span class="comment">//&quot;13.1&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>JDK5.0新特性：自动装箱和自动拆箱</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jdk5.0之后的转换法</span></span><br><span class="line"><span class="comment">//自动装箱：基本数据类型 ---&gt; 包装类</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>；</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">in1</span> <span class="operator">=</span> num；<span class="comment">//自动装箱</span></span><br><span class="line">    <span class="type">booolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>；</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> b1；<span class="comment">//自动装箱</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//自动拆箱：包装类 ---&gt; 基本数据类型  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> in1;<span class="comment">//自动拆箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String类型 ---&gt;&gt; 基本数据类型、包装类:调用包装类的parseXxx(String s)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="comment">//可能会报NunberFormatException</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str1);</span><br><span class="line">    system.out.println(num + <span class="number">1</span>);<span class="comment">//其他类型同理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基本数据类型、包装类 ---&gt;&gt; String类型</span></span><br><span class="line"><span class="comment">//方式二：调用String的valueOf(Xxx xxx)</span></span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">13.1f</span>；</span><br><span class="line">    String.valueOf(f1);<span class="comment">//&quot;13.1&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相关的面试题目</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">System.out.println(i == j);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Integer内部定义了IntegerCache结构，IntegerCache中定义了Integer[],</span></span><br><span class="line"><span class="comment">//保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在</span></span><br><span class="line"><span class="comment">//-128~127范围内时，可以直接使用数组中的元素，不用再去new了。目的：提高效率</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">System.out.println(m == n);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">128</span>;<span class="comment">//相当于new了一个Integer对象</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">128</span>;<span class="comment">//相当于new了一个Integer对象</span></span><br><span class="line">System.out.println(x == y);<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="面向对象下"><a href="#面向对象下" class="headerlink" title="面向对象下"></a>面向对象下</h2><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><ol><li>static：静态</li><li>static可以用来修饰类的内部结构：属性、方法、代码块、内部类</li><li>使用static修饰属性：静态变量(类变量)</li></ol><p>​3.1属性：是否使用static修饰，又分为静态属性 和 非静态属性(实例变量)</p><p>​实例变量：当创建了类的多个对象，每个对象都独立拥有自己的一套非静态属性，修改其中一个的非静态属性，不会导致其他对象中同样的属性值的修改</p><p>​静态变量：当创建了类的多个对象，每个对象都使用同一个静态变量，当通过一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</p><p>​3.2 static修饰属性的其他说明</p><p>​①静态变量随着类的加载而加载，可以通过”类.静态变量”的方式去调用</p><p>​②静态变量的加载要早于对象的创建</p><p>​③由于类只加载一次，所以静态变量在内存中也只有一份：存在方法区的静态域中</p><p>​④类变量 实例变量<br>​类yesno<br>​对象yesyes</p><p><img src="https://s4.ax1x.com/2022/02/23/bpdCrt.png" alt="内存解析"></p><ol start="4"><li>使用static修饰方法：静态方法</li></ol><p>①静态方法随着类的加载而加载，可以通过”类.静态方法”的方式去调用</p><p>②静态方法非静态方法<br>                        类yesno<br>                        对象yesyes</p><p>③静态方法中，只能调用静态方法或者属性</p><p>但在非静态方法中，既可以调用非静态的方法或属性，也可以调用静态方法或属性</p><ol start="5"><li>static注意点</li></ol><p>​①在静态方法内，不能使用this和super关键字</p><p>​②关于静态属性和静态方法的理解都从生命周期的出发</p><ol start="6"><li>开发中，如何确定一个属性是否要声明为static的？</li></ol><p>​&gt;属性是可以被多个对象共享，不随着对象的不同而不同的</p><p>​&gt;类中的常量也常常声明为static</p><p>​开发中，如何确定一个方法是否要声明为static的？</p><p>​&gt;操作静态属性的方法，通常设置为static的</p><p>​&gt;工具类中的方法，习惯上声明为static的，比如：Math、Array、Collections</p><hr><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><ol><li>对设计模式的理解：实际就相当于一个“套路”，针对不同的问题使用不同的“套路”</li></ol><p>​而所谓的单例设计模式就是指采用一定的方法保证整个软件系统当中某个类只有一个对象</p><ol start="2"><li>单例设计模式的实现</li></ol><p>​2.1：饿汉式单例模式实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleTonTest</span> &#123;</span><br><span class="line">    <span class="comment">//1.私有化类的构造器 目的是为了避免外部调用构造器造对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleTonTest</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.内部创建类的对象</span></span><br><span class="line">    <span class="comment">//4.要求类的属性也必须是静态的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingleTonTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleTonTest</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供公共的静态方法返回类的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleTonTest <span class="title function_">getTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2：懒汉式单例模式实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.声明当前类的对象，没有初始化</span></span><br><span class="line">    <span class="comment">//4.要求此对象也必须是静态的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Test</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.声明public、static的返回当前类对象的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title function_">getTest1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (test1 == <span class="literal">null</span>)&#123;</span><br><span class="line">            test1 = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> test1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  线程安全的单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleTonImprovement</span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Improvement</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建类的对象，赋予空值</span></span><br><span class="line">    <span class="comment">//3.要求类的对象也必须是静态的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Improvement</span> <span class="variable">im</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同步代码块   高效率的线程安全</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Improvement <span class="title function_">getIm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//只有前几个线程进入到if的判断中，后面的线程会直接判断不为空，返回对象，因此效率较高</span></span><br><span class="line">        <span class="keyword">if</span> (im == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Improvement.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (im == <span class="literal">null</span>)&#123;</span><br><span class="line">                    im = <span class="keyword">new</span> <span class="title class_">Improvement</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> im;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>区分 饿汉式 和 懒汉式</li></ol><p>​饿汉式：</p><p>​坏处：对象加载时间过长 好处：是线程安全的</p><p>​懒汉式：</p><p>​好处：延迟对象的创建目前写法的坏处：线程是不安全的</p><h4 id="单例设计模式应用场景"><a href="#单例设计模式应用场景" class="headerlink" title="单例设计模式应用场景"></a>单例设计模式应用场景</h4><p><img src="https://s4.ax1x.com/2022/02/23/bpdFVf.png" alt="单例设计模式"></p><hr><h3 id="关于main-方法的说明"><a href="#关于main-方法的说明" class="headerlink" title="关于main()方法的说明"></a>关于main()方法的说明</h3><ol><li>main()方法作为程序的入口</li><li>main()方法也是个普通的静态方法</li><li>main()方法也可以作为与控制台交互的方式</li></ol><hr><h3 id="代码块-也称为初始化块"><a href="#代码块-也称为初始化块" class="headerlink" title="代码块 (也称为初始化块)"></a>代码块 (也称为初始化块)</h3><p>格式</p><p>{</p><p>}</p><ol><li>代码块的作用：用来初始化类、对象</li><li>只能使用static修饰代码块</li><li>分类：静态代码块 和 非静态代码块</li><li>静态代码块</li></ol><p>​①内部可以有输出语句</p><p>​②随着类的加载而执行，而且只执行了一次</p><p>​③作用：初始化类的信息</p><p>​④如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</p><p>​⑤静态代码块的执行优先于非静态代码块的执行</p><p>​⑥静态代码块内只能调用静态的属性和方法，不能调用非静态的结构</p><ol start="5"><li>非静态代码块</li></ol><p>​①内部可以有输出语句</p><p>​②随着对象的创建而执行</p><p>​③每创建一个对象，就执行一次非静态代码块</p><p>​④作用：可以在创建对象时，对对象的属性等进行初始化</p><p>​⑤如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</p><p>​⑥非静态代码块内可以调用静态的属性和方法，也可以调用非静态的属性和方法</p><p>总结：由父及子，先静态后非静态，先代码块后构造器</p><hr><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>​final：最终的</p><ol><li><p>final可以修饰的结构：类、方法、变量</p></li><li><p>final 用来修饰一个类：此类不能被其他类继承（比如String类、System类、StringBuffer类）</p></li><li><p>final 用来修饰方法：表明此方法不能再被重写（比如Object类中getClass()方法）</p></li><li><p>final 用来修饰变量：此时的“变量”就称为常量</p><p>① final修饰属性：可以考虑赋值的位置有：显式初始化、代码块内赋值、构造器内初始化</p><p>多个对象使用的属性都一样考显式初始化，多个对象都有自己的一个属性值靠构造器内初始化，调用方法且有可能抛异常考虑再代码块内赋值</p><p>②final修饰局部变量：在使用final修饰局部变量时表明此变量是个常量，当在调用此方法时，给常量形参赋了一个实参，一旦赋值就只能在方法体使用此形参，但不能重新修改</p></li></ol><p>static final用来修饰全局常量、全局方法</p><hr><h3 id="抽象类和抽象方法-abstract"><a href="#抽象类和抽象方法-abstract" class="headerlink" title="抽象类和抽象方法 abstract"></a>抽象类和抽象方法 abstract</h3><ol><li>abstract：抽象的</li><li>abstract可以修饰的结构： 类、方法</li><li>abstract修饰类：抽象类</li></ol><p>​①此类不能实例化</p><p>​②抽象类中有构造器，便于子类实例化时调用</p><p>​③开发中都会提供抽象类的子类，让子类实例化以完成相关操作</p><ol start="4"><li>abstract修饰方法：抽象方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>​①抽象方法只有方法的声明，没有方法体</p><p>​②包含抽象方法的类一定是个抽象类，反之抽象类里面不一定要有抽象方法的</p><p>​③若子类重写了父类中的所有的抽象方法后，则子类才可以实例化</p><p>​若子类没有重写了父类中的所有的抽象方法，则子类也是个抽象类，需要使用abstract修饰</p><ol start="5"><li><p>abstract使用的注意点：</p><p>​    ①abstract不能使用来修饰：属性、构造器、代码块等结构</p><p>​②不能用来修饰私有方法、静态方法、final的方法、final的类</p></li></ol><hr><h4 id="抽象类的匿名子类"><a href="#抽象类的匿名子类" class="headerlink" title="抽象类的匿名子类"></a>抽象类的匿名子类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">method1(worker);<span class="comment">//非匿名的类非匿名的对象</span></span><br><span class="line"></span><br><span class="line">method1(<span class="keyword">new</span> <span class="title class_">Worker</span>());<span class="comment">//非匿名的类匿名的对象</span></span><br><span class="line">System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建了一个匿名子类的非匿名对象：p</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">breath</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">method1(p);</span><br><span class="line">System.out.println(<span class="string">&quot;********************&quot;</span>);</span><br><span class="line"><span class="comment">//创建匿名子类的匿名对象</span></span><br><span class="line">method1(<span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">breath</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">p.eat();</span><br><span class="line">p.breath();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="模板方法的设计"><a href="#模板方法的设计" class="headerlink" title="模板方法的设计"></a>模板方法的设计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">SubTemplate</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubTemplate</span>();</span><br><span class="line"></span><br><span class="line">t.spendTime();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Template</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算某段代码执行所需要花费的时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spendTime</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.code();<span class="comment">//不确定的部分、易变的部分</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubTemplate</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;i &lt;= <span class="number">1000</span>;i++)&#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;j &lt;= Math.sqrt(i);j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">isFlag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isFlag)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="接口-Interface"><a href="#接口-Interface" class="headerlink" title="接口(Interface)"></a>接口(Interface)</h3><ol><li><p>接口使用interfac来定义</p></li><li><p>java中，接口和类是并列的</p></li><li><p>如何定义接接口：定义接口中的成员</p><p>​①JDK7及以前：只能定义全局常量和抽象方法</p><p>​&gt;全局常量：public static final的，但书写可以省略</p><p>​&gt;抽象方法：public abstract的</p></li></ol><p>​②JDK8：除了定义全局常量和抽象方法以外还可以定义静态方法(接口的静态方法只能此接口来调用，其实现类不能调用)、默认方法(接口的是实现了可以通过实现类的对象调用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如下的三个方法的权限修饰符都是public</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">methodAbstract</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodStatic</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是接口中的静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">methodDefault</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是接口中的默认方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">        methodPrivate();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>接口中不能定义构造器，意味着接口不能实例化</li><li>接口通过让类去实现（imlements）的方式来使用</li></ol><p>​①如果实现类覆盖了接口中所有的抽象方法，则此实现类才可以实例化对象</p><p>​②如果实现类没有覆盖接口中所有的抽象方法，则此实现类也是个抽象类</p><ol start="6"><li>Java类可以实现多个接口，—–&gt;弥补了Java单继承性的局限性</li></ol><p>​格式： class A extends B implements C,D</p><ol start="7"><li>接口与接口之间可以继承，且可以多继承</li><li>接口的具体使用也体现了多态性</li><li>接口，实际上可以看做是一种规范</li></ol><h4 id="接口的应用-代理模式"><a href="#接口的应用-代理模式" class="headerlink" title="接口的应用 - 代理模式"></a>接口的应用 - 代理模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NetWorkTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line"><span class="comment">//server.browse();</span></span><br><span class="line"><span class="type">ProxyServer</span> <span class="variable">proxyServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyServer</span>(server);</span><br><span class="line"></span><br><span class="line">proxyServer.browse();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span> <span class="keyword">implements</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;真实的服务器访问网络&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyServer</span> <span class="keyword">implements</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> NetWork work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProxyServer</span><span class="params">(NetWork work)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.work = work;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;联网之前的检查工作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span> &#123;</span><br><span class="line">check();</span><br><span class="line"></span><br><span class="line">work.browse();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s4.ax1x.com/2022/02/23/bpdAIS.png" alt="接口的应用"></p><h4 id="Java8中接口的新特性"><a href="#Java8中接口的新特性" class="headerlink" title="Java8中接口的新特性"></a>Java8中接口的新特性</h4><ol><li>接口定义的静态方法只能通过接口调用</li><li>通过实现类的对象可以调用接口中定义的默认方法，如果实现类重写了默认方法，那么在调用的时候调用的是重写后的方法</li><li><strong>类优先原则</strong>：如果子类（或实现类）继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没有重写此方法的情况下，默认调用的是父类中同名同参数的方法</li><li><strong>接口冲突</strong>：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，在没有重写此方法的情况下，编译器会报错，则必须在实现类中重写此方法</li><li>如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>&#123;</span><br><span class="line">method3();<span class="comment">//调用自己定义的重写的方法</span></span><br><span class="line"><span class="built_in">super</span>.method3();<span class="comment">//调用的是父类中声明的</span></span><br><span class="line"><span class="comment">//调用接口中的默认方法</span></span><br><span class="line">      <span class="comment">//接口名.super.方法名()</span></span><br><span class="line">CompareA.<span class="built_in">super</span>.method3();</span><br><span class="line">CompareB.<span class="built_in">super</span>.method3();</span><br></pre></td></tr></table></figure><hr><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><ol><li><p>Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类</p></li><li><p>内部类的分类：成员内部类(静态、非静态) 和 局部内部类(方法内、代码块内、构造器内)</p></li><li><p>成员内部类：</p><p>​&gt;一方面，作为外部类的成员：①调用外部类的结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.<span class="built_in">this</span>.eat();<span class="comment">//调用外部类的非静态属性</span></span><br></pre></td></tr></table></figure><p>​②可以用static修饰    ③可以被4种不同权限修饰</p><p>​&gt;另一方面，作为一个类：①类内可以定于属性、方法、构造器等 </p><p>​②可以用final修饰，表示此类不可以被继承，不使用final则可以被继承   </p><p>​③ 可以用abstract修饰，表示此类不能实例化</p><ol start="4"><li>如何实例化内部类的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Dog实例(静态的成员内部类):</span></span><br><span class="line">Person.<span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>.Dog();</span><br><span class="line">dog.show();</span><br><span class="line"><span class="comment">//创建Bird实例(非静态的成员内部类):</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">Person.<span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> p.<span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">bird.sing();</span><br></pre></td></tr></table></figure><ol start="5"><li>如何在成员内部类中区分调用外部类的结构</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(String name)</span>&#123;</span><br><span class="line">System.out.println(name);<span class="comment">//方法的形参</span></span><br><span class="line">System.out.println(<span class="built_in">this</span>.name);<span class="comment">//内部类的属性</span></span><br><span class="line">System.out.println(Person.<span class="built_in">this</span>.name);<span class="comment">//外部类的属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>开发当中局部内部类的使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回一个实现了Comparable接口的类的对象</span></span><br><span class="line"><span class="keyword">public</span> Comparable <span class="title function_">getComparable</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个实现了Comparable接口的类:局部内部类</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyComparable</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyComparable</span>();</span><br></pre></td></tr></table></figure><p>注意点：①在局部内部类的方法中如果调用局部内部类所在的声明的方法中的局部变量，要求此变量必须是final的</p><p>②在jdk 7及之前，要求此局部变量显式声明为final的</p><p>​在jdk 8及之后的版本，可以省略final的声明</p><p> 总结：成员内部类和局部内部类，在编译之后都会生成字节码文件</p><p>格式：成员内部类：外部类$内部类名.class</p></li></ol><p>​局部内部类：外部类$数字 内部类名.class</p><hr><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ol><li><p>定义：将程序运行中发生的不正常情况称为“异常”（但不包括语法错误和逻辑错误，这两者都不是异常）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//1.栈溢出：java.lang.StackOverflowError</span></span><br><span class="line"><span class="comment">//main(args);</span></span><br><span class="line"><span class="comment">//2.堆溢出：java.lang.OutOfMemoryError </span></span><br><span class="line">Integer[] arr = <span class="keyword">new</span>     <span class="title class_">Integer</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br></pre></td></tr></table></figure></li><li><p>异常的体系结构</p></li></ol><p>​java.lang.Throwable</p><p>​①java.lang.Error：一般不编写针对性代码处理</p><p>​②java.lang.Exception：可以进行异常处理</p><p>​—-编译时异常（受检异常 check）</p><p>​1.IOException</p><p>​2.FileNotFoundException</p><p>​3.ClassNotFoundException</p><p>​—-运行时异常（未检异常  uncheck RuntimeException）</p><p>​1.NullPointerException</p><p>​2.ArrayIndexOutOfBoundsException</p><p>​3.ClassCastException(类型转换异常 向下转型)</p><p>​4.NumberFormatException(数值转换异常)</p><p>​5.InputMismatchException</p><p>​6.ArithmeticException</p><ol start="3"><li>异常的处理：抓抛模型</li></ol><p>过程一：”抛”：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。</p><p>并将此对象抛出。一旦抛出对象以后，其后的代码就不再执行。</p><p>关于异常对象的产生：① 系统自动生成的异常对象    ② 手动的生成一个异常对象，并抛出（throw）</p><p>过程二：”抓”：理解为异常的处理方式：① try-catch-finally  ② throws</p><h3 id="try-catch-finally的使用"><a href="#try-catch-finally的使用" class="headerlink" title="try-catch-finally的使用"></a>try-catch-finally的使用</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">​<span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>（异常类型<span class="number">1</span>  异常变量名）&#123;</span><br><span class="line">​<span class="comment">//处理异常的方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>（异常类型<span class="number">2</span>  异常变量名）&#123;</span><br><span class="line">​<span class="comment">//处理异常的方式2</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">​<span class="comment">//一定会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：1.finally是可选的</p><ol start="2"><li><p>使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</p></li><li><p>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没有写finally的情况），继续执行其后的代码</p></li><li><p>catch中的异常类型如果没有子父类关系，则谁在上面或者下面的位置并不重要。</p><p>catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。不然编译则报错</p></li><li><p>常用的异常对象处理的方式： ① String  getMessage()    ② printStackTrace()</p></li><li><p>在try结构中声明的变量，在出了try结构以后，就不能再被调用，除非在外面声明，在里面赋值</p></li><li><p>try-catch-finally结构可以相互嵌套</p></li></ol><p>补充1：使用try-catch-finally处理编译时异常，只是让程序在编译时不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到了运行时出现。</p><p>体会2：开发中，由于运行时异常比较常见，所以通常就不针对运行时异常编写try-catch-finally了。但针对于编译时异常，则一定要考虑异常的处理。</p><hr><h4 id="try-catch-finally的finally的使用"><a href="#try-catch-finally的finally的使用" class="headerlink" title="try-catch-finally的finally的使用"></a>try-catch-finally的finally的使用</h4><ol><li>finally中声明的是一定会比执行的语句，不管在catch中是否还会出现异常、try中有return语句、catch中有return语句还是照样执行</li><li>像数据库连接、输入输出流、网络编程Socker等资源，JVM虚拟机是没办法进行回收的，要求自己进行手动的资源释放，那么就需要声明在finally结构中</li></ol><p>补充：</p><p>final 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。即如果一个类被声明为 final，意味着它不能作为父类被继承，因此一个类不能同时被声明为 abstract 的，又被声明为 final 的。变量或方法被声明为 final，可以保证它们在使用中不被修改。被声明为 final 的变量必须在声明时给赋予初值，而在以后的引用中只能读取，不可修改。被声明为 final 的方法也同样只能使用，不能重载。</p><p>finally 是异常处理语句结构的一部分，总是执行，常见的场景：释放一些资源，例如前面所说的 redis、db 等。在异常处理时提供 finally 块来执行任何清除操作，即在执行 catch 后会执行 finally 代码块。</p><p>finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。</p><h5 id="finally-和-return的执行先后说明"><a href="#finally-和-return的执行先后说明" class="headerlink" title="finally 和 return的执行先后说明"></a>finally 和 return的执行先后说明</h5><p>①<strong>finally 在 return 之后时，先执行 finally 后，再执行该 return，此时return返回的是其上行所得的数据值，而不是finally得到的数据值</strong></p><p>②<strong>finally 内含有 return 时，直接执行其 return 后结束，此时return返回的finally得到的数据值，直接取得上方的return</strong></p><p>③finally 在 return 前，执行完 finally 后再执行 return。</p><h3 id="throws-异常类型"><a href="#throws-异常类型" class="headerlink" title="throws + 异常类型"></a>throws + 异常类型</h3><ol><li>“throws + 异常类型”声明在方法处（方法名后面），表示此方法执行时有可能抛出的异常。一旦方法执行后出现异常，就会在异常处生成一个对应异常类的对象，，此对象满足throws后异常类型，就会被抛出。而异常处之后的代码则不再执行和输出</li><li>try-catch-finally：真正的将异常处理了</li></ol><p>​throws的方式只是将异常抛给了方法的调用者，并没有将异常真正处理掉</p><ol start="3"><li>如何正确选择使用 try-catch-finally 还是 throws？</li></ol><p>​①如果父类中被重写的方法没有throws方式处理异常，则子类中重写的方法也不能使用throws，也就意味着如果子类中重写的方法有异常，则必须使用try-catch-finally的方式解决</p><p>​②执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。</p><p>补充  方法重写的规则中曾经提到：子类中重写的方法抛出的异常类型不大于父类中被重写的方法抛出的异常类型。<strong>是因为父类方法中抛出一个异常，子类继承重写方法后若异常类型大于父类异常类型，通过多态调用子类方法时，抛出的异常类型在父类中的try-catch-finally没办法解决。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">regist</span><span class="params">(<span class="type">int</span> id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">if</span>(id &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//手动抛出异常对象</span></span><br><span class="line"><span class="comment">//throw new RuntimeException(&quot;您输入的数据非法！&quot;);</span></span><br><span class="line"><span class="comment">//throw new Exception(&quot;您输入的数据非法！&quot;);</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;不能输入负数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><ol><li>继承于现有的异常结构：RuntimeException、Exception</li><li>提供全局常量：serialVersionUID</li><li>提供重载的构造器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义负数异常类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EcDef</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7037193246939L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EcDef</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EcDef</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
